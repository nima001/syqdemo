<template>
  <a-layout class="maincontent">
    <div class="panel">
      <div class="toolbar">
        <div class="left">
          <a-button type="primary" @click="add">新增</a-button>
        </div>
        <div class="right">
          <a-input class="search-item" placeholder="请输入关键词" v-model="query.searchkey" />
          <div class="selectBtn">
            <a-button type="primary" @click="onSearch">查询</a-button>
            <a-button class="resetBtn" @click="onReset">重置</a-button>
          </div>
        </div>
      </div>
      <div class="tablecontent">
        <a-table
          rowKey="id"
          :loading="loading"
          :columns="columns"
          :dataSource="pagination.rows"
          :pagination="false"
        >
        <span slot="action" class="operation" slot-scope="text, record">
          <a href="javascript:;" @click="edit(record.id)">编辑</a>
          <a href="javascript:;" @click="publish(record.id)">发布</a>
          <a-popconfirm
            title="确认删除?"
            @confirm="() => onDelete(record.id)"
          >
            <a href="javascript:;">删除</a>
          </a-popconfirm>
        </span>
        </a-table>
      </div>
      <div class="footer">
        <a-pagination
          v-if="pagination.rows && pagination.rows.length"
          showSizeChanger
          :showTotal="total => `总共：${total}条`"
          @showSizeChange="onShowSizeChange"
          :total="pagination.total"
          :pageSize="pagination.pagesize"
          v-model="pagination.pagenum"
          @change="onPageChange"
        >
        </a-pagination>
      </div>
    </div>
    <model-application-info :selectedid="selectedid" :visible="visible" @cancelModel="cancelModel" @okModel="okModel"/>
  </a-layout>
</template>
<script>
import {Layout, Table, Button, Select, Input, Popconfirm, Pagination} from "ant-design-vue"
import DictSelect from "@/framework/components/DictSelect";
import {pagelist,del,publish} from "@/workflowsystem/api/modelapplication"
import { showError } from "@/framework/utils/index";
import moment from "moment";
import ModelApplicationInfo from './ModelApplicationInfo.vue';
export default {
  name: "MonitorApplication",
  components: {
    ALayout: Layout,
    AButton: Button,
    ATable: Table,
    ASelect: Select,
    ASelectOption: Select.Option,
    AInput: Input,
    APopconfirm: Popconfirm,
    APagination: Pagination,
    DictSelect,
    ModelApplicationInfo
  },
  data(){
    return {
      query: {
        searchkey: undefined
      },
      columns:[
        {
          title: "序号",
          customRender: (text, record, index) => index + 1,
          width: "2%"
        },
        {
          title: "名称",
          dataIndex: "name",
          width: "15%",
          customRender: text => <span title={text}>{text}</span>
        },
        {
          title: "流程类型",
          dataIndex: "type",
          width: "5%",
          customRender: this.dictRender("workflow.model.modelapptype")
        },
        {
          title: "适用终端",
          dataIndex: "clientarr",
          width: "10%",
          customRender: this.formatClient()
        },
        {
          title: "编辑版本",
          dataIndex: "editversion",
          width: "5%"
        },
        {
          title: "发布版本",
          dataIndex: "publishversion",
          width: "5%"
        },
        {
          title: "发布用户",
          dataIndex: "publishusername",
          width: "10%",
          customRender: text => <span title={text}>{text}</span>
        },
        {
          title: "发布时间",
          dataIndex: "publishtime",
          width: "10%",
          customRender: text => moment(text).format("YYYY-MM-DD HH:mm:ss") 
        },
        {
          title: "操作",
          width: "10%",
          scopedSlots: { customRender: 'action' },
        }
      ],
      loading: false,
      pagination: {
        rows: null,
        pagesize: 10,
        pagenum: 1,
        total: 0
      },
      selectedid: null,
      visible: false,
    }
  },
  created(){
    this.refresh();
  },
  methods: {
    refresh(){
      let { pagenum, pagesize } = this.pagination;
      this.loadData(pagenum, pagesize);
    },
    loadData(pagenum, pagesize) {
      let params = {
        query: this.query,
        needtotal: true,
        pagenum,
        pagesize
      };
      this.loading = true;
      pagelist(params).then(resp =>{
        this.loading = false;
        this.pagination = resp.result;
      }).catch(err => {
        this.loading = false;
        showError(err);
      })
    },
    onSearch(){
      this.loadData(1, this.pagination.pagesize);
    },
    onReset(){
      this.query = {};
      this.loadData(1, this.pagination.pagesize);
    },
    add(){
      this.selectedid = null;
      this.visible = true;
    },
    edit(id){
      this.selectedid = id;
      this.visible = true;
    },
    publish(id){
      publish(id).then(resp => {
        this.$message.success("发布成功");
        this.refresh();
      }).catch(err => showError(err));
    },
    onDelete(id) {
      del(id).then(resp => {
        this.$message.success("删除成功");
        this.refresh();
      }).catch(err =>  showError(err));
    },
    dictRender(key) {
      return (text, row, index) => {
        let v = this.$store.getters.dictKey(key, text);
        text = (v && v.text) || "";
        return <span title={text}>{text}</span>;
      };
    },
    onPageChange(page, pagesize){
      this.loadData(page, pagesize);
    },
    onShowSizeChange(current, pagesize) {
      this.loadData(current,pagesize)
    },
    okModel(){
      this.visible = false;
      this.refresh();
    },
    cancelModel(){
      this.visible = false;
    },
    formatClient(){
      return (text, row, index) => {
        let clients = [];
        if(text && text.length > 0){
          text.forEach(item => {
            let v = this.$store.getters.dictKey("workflow.sys.client", item);
            let textValue = (v && v.text) || "";
            clients.push(textValue);
          });
        }
        text = clients.join("、");
        return <span title={text}>{text}</span>;
      };
    }
  }
}
</script>
<style lang="less" scoped>
.maincontent{
  height: 100%;
  padding: @layout-space-base;
  .panel{
    display: flex;
    flex-direction: column;
    overflow: hidden;
    position: relative;
    height: 100%;
    width: 100%;
    background-color: white;
    padding-top: @layout-space-base;
    border-radius: @border-radius-base;
    .toolbar{
      padding: @content-padding-v @content-padding-h;
      width: 100%;
      height: auto;
      .left{
        float: left;
      }
      .right{
        float: right;
        display: flex;
        .search-item{
          width: 180px;
          margin: 0 8px 0 0;
        }
        .selectBtn{
          .resetBtn{
            margin-left: 8px;
          }
          
        }
      }
    }
    .tablecontent{
      padding: 0 @content-padding-h;
      flex-shrink: 1;
      min-height: 0;
      overflow-y: auto;
      /deep/table{
        table-layout: fixed;
        td,th{
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis; 
        }
      }
      .operation {
        a {
          margin-right: 20px;
          &:hover {
            text-decoration: underline;
          }
        }
      }
    }
    .footer{
      padding: @content-padding-v @content-padding-h;
      .ant-pagination{
        float: right;
        margin-bottom: 10px;
      }
    }
  }
  /deep/.ant-table-thead {
    tr {
      th {
        border-right: 1px solid #e8e8e8;
        &:last-child {
          border-right: none;
        }
      }
    }
  }
}
</style>