<template>
  <a-select
    show-search
    class="query-select"
    :value="value"
    placeholder="查询历史"
    style="width: 200px"
    :show-arrow="false"
    :filter-option="false"
    :not-found-content="null"
    @search="onSearch"
    @change="onChange"
    @focus="allSearch()"
    @popupScroll="onScroll"
  >
    <a-select-option v-for="(res,index) in data" :key="res.id">
      {{ res.title }}
      <a-spin
        v-if="loadStatus == 'scroll' && createQuery().hasNext() && data.length-1 == index"
        class="loading-more"
        tip="加载中..."
      >
        <a-icon slot="indicator" type="loading" />
      </a-spin>
    </a-select-option>
  </a-select>
</template>
<script>
import { Select, Icon, Spin } from "ant-design-vue";
import { querylist } from "@/person/api/integratedquery";
import { showError } from "@framework/utils";

/**
 * 查询选择
 * 提供外部事件
 * 1.select 选中查询事件 返回查询ID
 */
export default {
  components: {
    ASpin: Spin,
    AIcon: Icon,
    ASelect: Select,
    ASelectOption: Select.Option,
  },
  props: {
    namespace: {
      //搜索查询的命名空间
      type: String,
      required: true,
    },
  },
  data() {
    return {
      data: [],
      pagenum: 1,
      pagesize: 20,
      value: undefined,
      loadStatus: false,
      timeout: null,
      canceltoken: 0,
    };
  },
  created() {
    console.log("select source", this.namespace);
  },
  methods: {
    fetch(value, time) {
      this.loadStatus = false;
      this.data = [];
      this.canceltoken = 0;
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }
      this.timeout = setTimeout(() => {
        this.pagenum = 1;
        this.value = value;
        this.createQuery().createList();
      }, time);
    },
    onSearch(value) {
      this.value = value;
      this.fetch(value, 500);
    },
    onChange(value) {
      this.$emit("select", value);
      this.value = undefined;
    },
    allSearch(value) {
      this.fetch(value, 0);
    },
    onScroll(e) {
      if (
        !this.loadStatus &&
        this.createQuery().hasNext() &&
        e.target.scrollHeight - e.target.clientHeight - e.target.scrollTop <= 34
      ) {
        //剩余可滚动区域小于底部加载中高度
        this.loadStatus = "scroll";
        this.pagenum++;
        this.createQuery().createList();
      }
    },
    createQuery() {
      let This = this;
      return {
        hasNext() {
          return This.pagenum >= 1;
        },
        createList() {
          let token = ++This.canceltoken;
          querylist({
            searchkey: This.value,
            pagenum: This.pagenum,
            pagesize: This.pagesize,
          })
            .then((res) => {
              if (This.canceltoken == token) {
                if (This.loadStatus == "scroll") {
                  This.loadStatus = false;
                  let list = res.result.rows || [];
                  This.data = [...This.data, ...list];
                  if (list.length == 0) {
                    This.loadStatus = true;
                  }
                  return list;
                } else {
                  This.data = res.result.rows;
                }
              }
            })
            .catch((error) => {
              this.loadStatus = false;
              showError(error);
            });
        },
      };
    },
  },
};
</script>
<style lang="less" scoped>
.loading-more {
  display: block;
  text-align: center;
  /deep/.anticon-loading {
    vertical-align: middle;
  }
  /deep/.ant-spin-text {
    display: inline-block;
    vertical-align: middle;
    margin-left: 6px;
    line-height: 34px;
    color: fade(@black, 25%);
  }
}
</style>