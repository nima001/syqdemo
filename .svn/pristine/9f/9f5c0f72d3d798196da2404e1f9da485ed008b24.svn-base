<!-- 权限库 -->
<template>
  <div>
    <div class="body">
      <div class="body_1">
        <span style="display:flex;">
          <a-select class="antdxk" defaultValue="权限标签">
            <a-select-option value="lucy">权限标签</a-select-option>
          </a-select>
          <a-input-group style="width: 80%" compact>
            <a-select style="width: 160px" v-model="searchVal">
              <a-select-option value="all">全部</a-select-option>
              <a-select-option value="namelike">权限名称</a-select-option>
              <a-select-option value="codelike">权限代码</a-select-option>
            </a-select>
            <a-input style="width: 160px;margin: 0 10px" v-model="val" />
          </a-input-group>
        </span>
        <a-button type="primary" @click="search">搜索</a-button>
        <a-button @click="reset">重置</a-button>
      </div>

      <div class="body_2">
        <a-button icon="file-excel">导入</a-button>
        <a-button icon="swap" @click="addition">添加权限</a-button>
        <a-button icon="plus">
          <router-link to="/dev/addaccess">新增权限</router-link>
        </a-button>
        <a-button icon="delete" @click="deletes">删除</a-button>
        <!-- <a-button icon="undo">刷新</a-button> -->
      </div>

      <a-table
        :columns="columns"
        :dataSource="data"
        :rowSelection="rowSelection"
        :pagination="false"
      >
        <template slot="name" slot-scope="text, record, index">
          <template v-if="record.editable">
            <a-input v-model="data[index].name" />
          </template>

          <template v-else>{{ text }}</template>
        </template>

        <template slot="code" slot-scope="text, record, index">
          <template v-if="record.editable">
            <a-input v-model="data[index].code" />
          </template>

          <template v-else>{{ text }}</template>
        </template>

        <template slot="tags" slot-scope="text, record, index">
          <template v-if="record.editable">
            <a-select v-model="data[index].tags" mode="tags">
              <a-select-option v-for="i in 3" :key="(i + 9).toString(36) + i">{{
                (i + 9).toString(36) + i
              }}</a-select-option>
            </a-select>
          </template>

          <template v-else>
            <span v-html="calculate(text)"></span>
          </template>
        </template>

        <template slot="id" slot-scope="text, record">
          <div>
            <span v-if="record.editable">
              <a @click="save(record.id)" style="margin-right: 10px;">保存</a>
              <a @click="cancel">取消</a>
            </span>
            <span v-else>
              <a @click="edit(record.id)">编辑</a>
            </span>
          </div>
        </template>
      </a-table>
      <a-pagination
        v-if="data.length > 0"
        :total="total"
        :showSizeChanger="true"
        @showSizeChange="onShowSizeChange"
        :page-size-options="pageSizeOptions"
        :pageSize="pagination.pagesize"
        v-model="pagination.pagenum"
        @change="onPageChange"
        :showTotal="(total) => `总共：${total}条`"
      />
    </div>
  </div>
</template>

<script>
import {
  Select,
  Table,
  Button,
  Tag,
  Input,
  notification,
  Modal,
  Pagination,
} from "ant-design-vue";
import { limitlist, limitdelete, limitupdate } from "@/dev/api/limit";
import { showError } from "@/framework/utils/index";
export default {
  props: ["check", "back"],
  data() {
    return {
      searchVal: "all",
      codelike: null,
      namelike: null,
      data: [],
      selectedRows: [],
      selectedRowKeys: [],
      val: "",
      columns,
      total: 20,
      pagination: {
        pagesize: 10,
        pagenum: 1,
      },
      pageSizeOptions: ["10", "20", "30", "40", "50"],
    };
  },
  components: {
    AInput: Input,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATable: Table,
    AButton: Button,
    AModal: Modal,
    notification,
    APagination: Pagination,
  },

  computed: {
    rowSelection() {
      const { selectedRowKeys } = this;
      return {
        onChange: (selectedRowKeys, selectedRows) => {
          this.selectedRows = selectedRows;
          this.selectedRowKeys = selectedRowKeys;
        },
        selectedRowKeys: selectedRowKeys,
        getCheckboxProps: (record) => ({
          props: {
            disabled: this.check.includes(record.id),
            // defaultChecked: this.check.includes(record.id),
            name: record.name,
          },
        }),
      };
    },
  },

  watch: {
    check: function() {
      let obj = {
        appId: this.$store.state.id,
        pagenum: this.pagin.defaultCurrent,
        needtotal: true,
      };
      this.refresh(obj);
    },
    back: function() {
      let obj = {
        appId: this.$store.state.id,
        pagenum: this.pagin.defaultCurrent,
        needtotal: true,
      };
      this.refresh(obj);
    },
  },
  created() {
    this.refresh();
  },
  methods: {
    // 切换每页多少条
    onShowSizeChange(current, size) {
      this.pagination.pagenum = current;
      this.pagination.pagesize = size;
      this.refresh();
    },
    // 点击页码
    onPageChange(current) {
      this.pagination.pagenum = current;
      this.refresh();
    },
    calculate(a) {
      return a.join(";");
    },
    // 分页数据
    refresh() {
      var obj = {
        appId: this.$route.query.id,
        pagenum: this.pagination.pagenum,
        pagesize: this.pagination.pagesize,
        needtotal: true,
        codelike: null,
        namelike: null,
      };
      switch (this.searchVal) {
        case "all":
          obj.namelike = this.val;
          obj.codelike = this.val;
          break;
        case "namelike":
          obj.namelike = this.val;
          break;
        case "codelike":
          obj.codelike = this.val;
          break;
      }
      limitlist(obj)
        .then((res) => {
          this.pagin.pageSize = res.result.pagesize;
          this.pagin.total = res.result.total;
          this.pagin.defaultCurrent = res.result.pagenum;
          let data = res.result.rows;
          let serial = (res.result.pagenum - 1) * 10;
          if (res.result.total < 11) {
            serial = 0;
          }
          data.forEach(function(x, y) {
            x.key = y + 1 + serial;
          });
          this.data = data;
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 搜索
    search() {
      this.pagination.pagenum = 1;
      this.refresh();
    },
    // 重置
    reset() {
      this.searchVal = "all";
      this.codelike = null;
      this.namelike = null;
      this.val = "";
      this.refresh();
    },
    // 删除
    deletes() {
      let selectedRows = this.selectedRows;
      let arr = [];
      selectedRows.forEach(function(i) {
        arr.push(i.id);
      });
      this.selectedRowKeys = [];
      limitdelete(arr).then((res) => {
        if (res.code == "success") {
          this.refresh();
        } else {
          notification.error({
            message: "提示",
            description: res.message,
            duration: 1.5,
          });
        }
      });
    },
    addition() {
      let arr = [];
      this.selectedRows.forEach((i) => {
        arr.push(i.id);
      });
      this.$emit("onchan", arr);
      this.selectedRowKeys = [];
    },
    // 修改
    edit(id) {
      const newData = [...this.data];
      const target = newData.filter((item) => id === item.id)[0];
      if (target) {
        target.editable = true;
        this.data = newData;
      }
    },
    // 保存
    save(id) {
      const newData = [...this.data];
      const target = newData.filter((item) => id === item.id)[0];
      if (target) {
        delete target.editable;
        this.data = newData;
        let obj = { ...target };
        delete obj.key;
        obj.appid = this.$route.query.id;
        limitupdate(obj).then((res) => {
          if (res.code == "success") {
          } else {
            notification.error({
              message: "提示",
              description: res.desc,
              duration: 1.5,
            });
          }
          this.refresh();
        });
      }
    },
    // 取消
    cancel() {
      this.refresh();
    },
  },
};

const columns = [
  {
    title: "序号",
    dataIndex: "key",
    key: "key",
    width: "20%",
  },
  {
    title: "权限名称",
    dataIndex: "name",
    key: "name",
    width: "20%",
    scopedSlots: { customRender: "name" },
  },
  {
    title: "权限代码",
    dataIndex: "code",
    key: "code",
    width: "20%",
    scopedSlots: { customRender: "code" },
  },
  {
    title: "权限标签",
    dataIndex: "tags",
    key: "tags",
    width: "20%",
    scopedSlots: { customRender: "tags" },
  },
  {
    title: "操作",
    key: "id",
    dataIndex: "id",
    scopedSlots: { customRender: "id" },
  },
];
</script>
<style lang="less" scoped>
.ant-pagination {
  margin-top: 30px;
  text-align: right;
}
.body {
  .body_1 {
    display: flex;
    .antdxk {
      width: 150px;
      margin-right: 12px;
    }
    .ant-btn {
      width: 60px;
      height: 32px;
      margin-right: 13px;
    }
  }
  .body {
    width: 100%;
  }
  .body_2 {
    margin-top: 20px;
    .ant-btn {
      color: @primary-color;
      border: 1px solid @primary-color;
      margin-right: 22px;
    }
  }

  .ant-table-wrapper {
    margin-top: 35px;
  }
}
</style>
