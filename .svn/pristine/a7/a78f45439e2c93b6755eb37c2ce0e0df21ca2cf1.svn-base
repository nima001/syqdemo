import notification from 'ant-design-vue/es/notification'
import modal from 'ant-design-vue/es/modal'
import 'ant-design-vue/lib/notification/style'

// 接口统一错误提示
export function showError (error) {
  if (typeof error.code === 'number') {
    // 生成环境 http状态错误不提示
    return
  }
  notification.error({
    message: '提示',
    description: error.message || '未知错误' + (error.code || ''),
    duration: 2
  })
}

/**
 * 延时关闭窗口
 * @param {Number} delay 
 */
export function closeWindowDelay(delay, message){
  let secondsToGo = delay || 3;
  message = message ? message + '，' : '';
  const m = modal.info({
    title: '提示', 
    content: `${message}窗口将在 ${secondsToGo} 后自动关闭`,
    okText: '关闭窗口',
    keyboard: false,
    onOk: () => {
      window.close();
    }
  })
  const interval = setInterval(() => {
    secondsToGo -= 1;
    m.update({
      content: `${message}窗口将在 ${secondsToGo} 后自动关闭`,
    });
  }, 1000);
  setTimeout(() => {
    clearInterval(interval);
    window.close();
  }, secondsToGo * 1000);
}

/**
 * 移除字符串指定开头的字符
 * @param {String} str 字符串
 * @param {String} start 需移除的字符
 */
export function removeStart (str, start) {
  if (str && start) {
    if (str.startsWith(start)) {
      str = str.substr(start.length)
    }
  }
  return str
}

/**
 * 日期格式
 * @param {Date} date 日期
 * @param {String} fmt 格式 yyyy-MM-dd hh:mm:ss
 */
export function dateFormat (date, fmt) {
  if(typeof date == 'number'){
    date = new Date(date);
  }
  var o = {
    'M+': date.getMonth() + 1,
    'd+': date.getDate(),
    'h+': date.getHours(),
    'm+': date.getMinutes(),
    's+': date.getSeconds(),
    'q+': Math.floor((date.getMonth() + 3) / 3),
    S: date.getMilliseconds()
  }
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(
      RegExp.$1,
      (date.getFullYear() + '').substr(4 - RegExp.$1.length)
    )
  }
  for (var k in o) {
    if (new RegExp('(' + k + ')').test(fmt)) {
      fmt = fmt.replace(
        RegExp.$1,
        RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)
      )
    }
  }
  return fmt
}

// 异步加载js
export function asyncLoadJs (url) {
  return new Promise((resolve, reject) => {
    let hasLoaded = document.getElementById('idmjsLink')
    if (hasLoaded) {
      resolve()
      return
    }
    let script = document.createElement('script')
    script.type = 'text/javascript'
    script.src = url
    script.id = 'idmjsLink'
    document.body.appendChild(script)
    script.onload = () => {
      resolve()
    }
    script.onerror = () => {
      reject()
    }
  })
}

// 手机号格式校验
export function validatePhoneNumber (str) {
  const reg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/
  return reg.test(str)
}

// 邮箱格式校验
export function validateEmail (str) {
  const reg = /^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/
  return reg.test(str)
}

// 函数防抖
export function debounce (fn, delay) {
  var timer = null
  var delay = delay || 200
  return function () {
    var args = arguments
    var that = this
    clearTimeout(timer)
    timer = setTimeout(function () {
      fn.apply(that, args)
    }, delay)
  }
}

// 生成指定长度的字符串
export function randomStr (n) {
  var chars = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
    'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z' ]
  var res = ''
  for (var i = 0; i < n; i++) {
    var id = Math.ceil(Math.random() * 25)
    res += chars[id]
  }
  return res
}

// 生成uuid
export function guid () {
  function S4 () {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)
  }
  return S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4()
}

// 数组转对象 [{key:'name',value:'张三'}]=> {name:'张三'}
export function objFromArr (arr = []) {
  let obj = {}
  for (let i = 0; i < arr.length; i++) {
    let item = arr[i]
    obj[item.key] = item.value
  }
  return obj
}

//身份证号检测
var Wi = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ];// 加权因子  
var ValideCode = [ 1, 0, "X", 9, 8, 7, 6, 5, 4, 3, 2 ];// 身份证验证位值.10代表X 
/**
 * 判断身份证号码为18位时最后的验证码是否正确
 * @param {String} idCard
 * @return
 */
let isTrueValidateCodeBy18IdCard = function(idCard) {
  let sum = 0;  //  加权求和
  let _idCard = idCard.split("");

  for(let i = 0; i < 17; i ++) {
    let num = _idCard[i];
    sum += Wi[i] * num;//  加权求和
  }
  if(_idCard[17] == ValideCode[sum % 11]) {
    return true;
  }else{
    return false;
  }
} 

/** 
 * 验证18位数身份证号码中的生日是否为有效生日
 * @param {String} idCard
 * @reutrn
 */
let isValidityBrithBy18IdCard = function(idCard18) {
  let year = idCard18.substring(6, 10);
  let month = idCard18.substring(10, 12);
  let day = idCard18.substring(12, 14);
  let card_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
  if(card_date.getFullYear() != parseFloat(year)
    || card_date.getMonth() != parseFloat(month) - 1
    || card_date.getDate() != parseFloat(day)) 
  {
    return false;
  }else if(new Date().getTime() - new Date(card_date).getTime() < 0) {//  时间不能超过当前日期
    return false;
  }else{
    return true;
  }
}

/** 
 * 验证15位数身份证号码中的生日是否为有效生日
 * @param {String} idCard
 * @reutrn
 */
let isValidityBrithBy15IdCard = function(idCard15) {
  let year = idCard15.substring(6, 8);
  let month = idCard15.substring(8, 10);
  let day = idCard15.substring(10, 12);
  let card_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
  if(card_date.getYear() != parseFloat(year)
    || card_date.getMonth() != parseFloat(month) - 1
    || card_date.getDate() != parseFloat(day)) 
  {
    return false;
  }else if(new Date().getTime() - new Date(card_date).getTime() < 0) {//  时间不能超过当前日期
    return false;
  }else{
    return true;
  }
}

/**
 * 身份证验证15/18位
 * @param {String} idCard
 * @return
 */
export function checkIdcard (idCard) {
  let idcard18_patter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0-9][0-9][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/;
  let idcard15_patter = /^[1-9][0-9]{5}([0-9]{2})([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}$/;
  if(idCard) {
    if(idCard.length == 15) {
      if(idcard15_patter.test(idCard) && isValidityBrithBy15IdCard(idCard)) {
        return true;
      }else{
        return false;
      }
    }else if(idCard.length == 18) {
      if(idcard18_patter.test(idCard) && isValidityBrithBy18IdCard(idCard) && isTrueValidateCodeBy18IdCard(idCard)) {
        return true;
      }else{
        return false;
      }
    }else{
      return false;
    }
  }
  return false;
}

/**
 * 整数转中文
 * @param {Number} number 
 */
export function numberToChinese(number) {
  number = parseInt(number);
  if(number >= 0){
    let s1 = [ "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九" ];
    let s2 = [ "十", "百", "千", "万", "十", "百", "千", "亿", "十", "百", "千" ];
    let result = "",  str = number + '';
    let n = str.length;
    let zero = false;
    for (let i = 0; i < n; i++) {
      let num = str.charCodeAt(i) - 48;//'0'.charCodeAt(0)
      let numStr = s1[num];
      if (i != n - 1) {
        let unit = s2[n - 2 - i];
        if(numStr == "〇"){
          zero = true;
        }else{
          if(zero){
            result += "〇";
          }
          zero = false;
          if(i == 0 && numStr == "一" && unit == "十"){//第一位如果是1且后面单位是十，忽略前面的1
            result += unit;
          }else{
            result += numStr + unit;
          }
        }
      } else if(!numStr == "〇" || n == 1){//最后一位不是0
        if(zero){
          result += "〇";
        }
        result += numStr;
      }
    }
    return result;
  }
}
