<template>
  <div class="add-report">
    <a-form class="report-form" :form="form">
      <a-form-item 
        label="评估内容"
        :required="true" 
        :label-col="formLayout.labelCol" 
        :wrapper-col="formLayout.wrapperCol"
        :validateStatus="validateStatus"
        >
        <a-select
          :value="content"
          @change="onChangeOpt"
          >
          <a-select-opt-group v-for="(item, i) in configData" :key="i">
            <span slot="label">{{item.title}}</span>
            <a-select-option
              v-for="(opt, j) in item.item"
              :key="j"
              :value="opt.id"
              >
              {{opt.content}}
            </a-select-option>
          </a-select-opt-group>
        </a-select>
      </a-form-item>
      <form-group ref="formGroup" :formLayout="formLayout" :props="props">
      </form-group>
    </a-form>
  </div>
</template>
<script>
import { Form, Select } from "ant-design-vue";
import FormGroup from './FormGroup';
import { listConfig, reportInput } from "@/person-shaoxing/api/assessment";
import { showError } from '../../../../../framework/utils';
import { getPops, items, loadData } from './contentItems';

export default {
  name: 'addReport',
  components: {
    AForm: Form,
    AFormItem: Form.Item,
    ASelect: Select,
    ASelectOption: Select.Option,
    ASelectOptGroup: Select.OptGroup,
    FormGroup
  },
  data() {
    return {
      configData: [],
      orgvisible: false,
      content: undefined,
      validateStatus: undefined,
      formLayout: {
        labelCol: { span: 6 },
        wrapperCol: { span: 14 },
      },
      itemArr: []
    }
  },
  computed: {
    props: {
      get() {
        return getPops(this.itemArr)
      },
      set() {
        return getPops(this.itemArr)
      }
    }
  },
  beforeCreate() {
    this.form = this.$form.createForm(this);
  },
  created() {
    this.getData();
  },
  methods: {
    getData() {
      listConfig()
      .then(({result}) => {
        this.configData = result;
      })
      .catch(err => {
        showError(err);
      })
    },
    onChangeOpt(value) {
      this.content = value;
      if(value) {
        reportInput(value)
        .then(({result}) => {
          this.itemArr = result;
        })
        .catch(err => {
          showError(err);
        })
      }
    },
    getFormValue(){
      return new Promise((resolve, reject) => {
        if(this.content) {
          let obj = {};
          this.validateStatus = 'success';
          this.$refs.formGroup.validateFields(obj)
          .then(res => {
            resolve({
              target: obj,
              content: this.content,
              itemArr: this.itemArr
            });
          })
          .catch(err => {
            showError({code:'form_validate_fail', message: err})
          });
        }else{
          this.validateStatus = 'error';
          showError({code:'form_validate_fail', message: '请选择评估内容'});
        }
      })
    },
  }
}
</script>
<style lang="less" scoped>
.add-report{
  height: 100%;
  display: flex;
  flex-direction: column;
  .report-form{
    flex: auto;
    min-height: 0;
    overflow: auto;
    padding: @content-padding-v @content-padding-h;
  }
}
</style>