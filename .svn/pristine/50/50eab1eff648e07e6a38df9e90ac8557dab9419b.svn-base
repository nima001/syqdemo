<template>
<div class="cell">
    <div class="cell-top">
        <p class="title">数据集</p>
    </div>
    <ul>
        <li class="data-source" v-for="(item,index) in dataSourceCopy" :key="item.queryid" @click.stop="getQuery(item,index)">
        <div class="panel">
            <div class="panel-title" :class="{active:item.active}">
              <div class="left">
                  <a-icon type="right" />
              </div>
              <div class="right">
                <div class="top">
                  <div class="editor" v-if="index == editorIndex">
                    <a-input v-model="item.name" size="small" v-focus @blur="editorClose(index)" @click.stop="()=>{}" />
                  </div>
                  <p v-else>
                      <span class="text" @click.stop="editorParams(item,3)">{{item.name}}</span>
                      <span class="editorIcon" @click.stop="editorName(item,index)">
                      <a-icon type="edit" />
                      </span>
                  </p>
                  <div class="icon">
                    <a-icon type="select" @click.stop="openDataSource(item,index)" />
                    <a-icon type="delete" @click.stop="delDataSource(index)" />
                  </div>
                </div>
                <p class="desc">{{item.desc}}</p>
              </div>
            </div>
            <template v-if="item.active">
            <a-spin :spinning="loading">
                <ul class="panel-content">
                    <li class="fields" v-for="item in fields" :key="item.key" @click.stop="editorParams(item,4)">
                        <a-tooltip placement="topLeft" :mouseLeaveDelay="0">
                        <template slot="title">
                            <span>{{item.key}}</span>
                        </template>
                        <span>{{`${item.showname}（${item.key}）`}}</span>
                        </a-tooltip>
                    </li>
                </ul>
            </a-spin>
            </template>
        </div>
        </li>
    </ul>
    <div class="add">
        <span @click.stop="addDataSource"><a-icon type="plus" />添加数据集</span>
    </div>
    <!--添加数据集(综合查询)-->
    <a-modal v-model="showQueryModal" 
      dialogClass="exper-query-model" @cancel="closeQueryModal" :footer="null" :destroyOnClose="true" 
      width="90%" :style="{minWidth:'1100px'}" :bodyStyle="{padding:'10px 0 0 0', height: '80vh'}">
      <IntegratedQuery v-if="showQueryModal" :query="queryid" :namespace="namespace" :copySource="true" @save="callBack" />
    </a-modal>
</div>
</template>
<script>
import { Input, Icon, Tooltip, Spin ,Modal,Divider} from "ant-design-vue";
import IntegratedQuery from "@/person/views/integratedquery/query";
import {randomStr,showError} from "@framework/utils/index";
import { mixins } from "./minxin";
import cloneDeep from "lodash/cloneDeep";
import { queryById } from "@person/api/integratedquery";
import Bus from "@/framework/utils/EventBus";
// 数据集
export default {
  components: {
    ATooltip: Tooltip,
    AInput: Input,
    AIcon: Icon,
    ASpin: Spin,
    AModal:Modal,
    IntegratedQuery
  },
  props: {
    dataSource: {
      type: Array
    }
  },
  mixins: [mixins],
  data() {
    return {
      // 当前编辑状态数据集
      editorIndex: undefined,
      //字段前缀  a.name a['_id@orgstatistic.org']
      prefix: "",
      // 缓存数据集
      map: new Map(),
      // 加载动画
      loading: false,
      // 数据集字段二级列表
      fields: [],
      // 综合查询Id(一数据源既一个常用查询)
      queryid: undefined,
    // 综合查询 modal
      showQueryModal: false,
      //
      dataSourceCopy:cloneDeep(this.dataSource)
    };
  },
  directives:{
    focus:{
      inserted(el){
        el.focus();
      }
    }
  },
  watch:{
    dataSource:{
      handler(v){
        this.dataSourceCopy = v;
      },
      deep:true
    }
  },
  methods: {
    openDataSource(item, index) {
      this.queryid = item.queryid;
      this.showQueryModal = true;
       // Vuex缓存作用域数据
       Bus.$emit('saveScopeData')
    },
    addDataSource() {
      this.queryid = undefined;
      this.showQueryModal = true;
      Bus.$emit('saveScopeData');
      this.$store.commit({
        type: "SET_TREEDATA",
        data: {
          op: "and",
          criteria: []
        }
      });
    },
    // 获取字段
    getQuery(item, index) {
      if (!item.queryid) {
        return false;
      }
      this.prefix = item.name;
      let obj = cloneDeep(this.dataSourceCopy[index]);
      this.toggle(index);
      this.loading = true;
      if (obj.active) {
        this.loading = false;
      } else {
        let result = this.map.get(item.queryid);
        if (result) {
          this.fields = result;
          this.loading = false;
        } else {
          queryById(item.queryid)
            .then(res => {
              this.fields = res.result.fields;
              this.map.set(item.queryid, cloneDeep(res.result.fields));
            })
            .catch(err => {
              showError(err);
            })
            .finally(() => {
              this.loading = false;
            });
        }
      }
    },
    toggle(num) {
      this.dataSourceCopy.map((item, index) => {
        let obj = item;
        if (num == index) {
          obj.active = !item.active;
        } else {
          obj.active = false;
        }
        this.$set(this.dataSourceCopy, index, obj);
      });
    },
    editorName(item, index) {
      this.prefix = item.name;
      this.editorIndex = index;
    },
    editorClose(index) {
      this.editorIndex = undefined;
      this.$emit("sourceCall", this.dataSourceCopy);
    },
    closeQueryModal(){
      // 重置 作用域数据
      this.$store.commit({
        type:'SET_SCOPE_DATA',
        data:[]
      });
    },
    // 删除数据集/定义数据
    delDataSource(index) {
      this.dataSourceCopy.splice(index, 1);
      this.$emit("sourceCall", this.dataSourceCopy);
    },
    // 修改数据集
    inputChange(){
      this.$emit("sourceCall", this.dataSourceCopy);
    },
    //添加、更新数据集
    callBack(query) {
      let obj = {queryid: query.id};
      this.map.clear();
      this.dataSourceCopy = cloneDeep(this.dataSource);
      let index = this.indexInArray(this.dataSourceCopy,obj,'queryid');
      if(index != -1){
        // 更新
        this.$set(this.dataSourceCopy[index], 'desc', query.title);
      }else{
        // 添加
        this.dataSourceCopy.push({
          desc: query.title,
          queryid: query.id,
          name: randomStr(6)
        });
      }
      this.$emit("sourceCall", this.dataSourceCopy);
      this.showQueryModal = false;
    },
    indexInArray(arr, obj,key) {
      let index = arr.findIndex(item => item[key] == obj[key]);
      return index;
    }
  }
};
</script>
<style lang='less' scoped>
.cell {
  width: 100%;
  border: 1px solid @border-color-base;
  margin-top: @padding-md;
  height: 360px;
  display: flex;
  flex-direction: column;
  &-top {
    display: flex;
    align-items: center;
    background: #d1d1d180;
    border-bottom: 1px solid #d9d9d9;
    p {
      width: 40%;
      margin: 0px;
      height: 30px;
      line-height: 30px;
      text-indent: 10px;
    }
    .ant-select {
      flex: 1;
      margin-right: 8px;
    }
  }
  ul {
    flex: 1;
    width: 100%;
    overflow-y: auto;
    margin: 0px;
    li {
      padding: 0px 10px;
      width: 100%;
      height: 30px;
      line-height: 30px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      &:hover {
        background: #d1d1d180;
        cursor: pointer;
      }
      &.data-source {
        height: auto;
        cursor: pointer;
        border-bottom: 1px solid #d9d9d9;
        padding: 0px;
        &:last-child {
          border-bottom: none;
        }
        &:hover {
          background: none;
          cursor: inherit;
        }
        .editor {
          display: flex;
          flex: 1;
          margin-right: 10px;
          a {
            width: 50px;
            text-align: center;
          }
          input {
            flex: 1;
          }
        }
        .panel {
          &-title {
            padding: 6px 10px;
            cursor: pointer;
            &:hover {
              background: #9e9e9e1c;
              .right {
                width: 100%;
                overflow: hidden;
                .top {
                  .editorIcon {
                    visibility: visible;
                  }
                }
              }
            }
            &.active {
              border-bottom: 1px solid #d9d9d9;
              .left {
                i {
                  transform: rotate(90deg);
                  transition: 0.24s;
                }
              }
            }
            display: flex;
            .left {
              width: 25px;
              display: flex;
              justify-content: left;
              align-items: center;
            }
            .right {
              flex: 1;
              .top {
                display: flex;
                .icon {
                  width: 40px;
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  i {
                    cursor: pointer;
                    padding: 0px 2px;
                    color: @primary-color;
                  }
                }
                p {
                  flex: 1;
                  margin-right: 10px;
                  height: 24px;
                  line-height: 24px;
                  .text {
                    padding: 0px 6px;
                    &:hover {
                      background: #d9d9d9;
                    }
                  }
                  .editorIcon {
                    color: @primary-color;
                    cursor: pointer;
                    padding: 0px 4px;
                    visibility: hidden;
                  }
                }
              }
              p.desc {
                margin-top: 4px;
              }
            }
          }
          &-content {
            padding: 8px 0px;
            background: #fff;
            .fields {
              padding: 0px 10px;
            }
          }
          /deep/ .ant-spin-nested-loading > div > .ant-spin .ant-spin-dot {
            position: absolute;
            top: 15%;
            left: 50%;
          }
        }
        p {
          height: 20px;
          line-height: 20px;
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          background: none;
          margin: 0px;
        }
      }
    }
  }
  .add {
    height: 30px;
    line-height: 30px;
    border-top: 1px solid @border-color-base;
    cursor: pointer;
    color: @primary-color;
    display: flex;
    span {
      flex: 1;
      text-align: center;
    }
  }
}
</style>
<style lang="less">
.exper-query-model{
  min-width: 1100px;
  & > .ant-modal-content > .ant-modal-close > .ant-modal-close-x{
    width: 40px;
    height: 38px;
    line-height: 38px;
  }
}
</style>