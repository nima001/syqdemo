<template>
  <div class="layout">
    <a-button type="primary" @click="boo" v-if="allow && hasPermit('/dev/manage/app/update')">{{ arr }}</a-button>
    <a-form :form="form">
      <a-row :gutter="24">
        <a-col :span="24">
          <div class="titleBar">接入信息</div>
        </a-col>
        <a-col :span="8">
          <a-form-item label="接入码">
            <a-input v-decorator="['accessCode',{rules: [{ required: true, message: '请输入接入码' }],initialValue: data.accessCode}]"></a-input>
          </a-form-item>
        </a-col>
        <a-col :span='8'>
          <a-form-item label="接入密钥">
            <a-input
              v-decorator="['accessKey',{rules: [{ required: true, message: '请输入接入密钥' }],initialValue: data.accessKey}]">
              <a-icon slot="suffix" type="plus" @click="randomKey"/>
            </a-input>
          </a-form-item>
        </a-col>
      </a-row>
      <a-row :gutter="24">
        <a-col :span="24">
          <div class="titleBar">基本信息</div>
        </a-col>
        <a-col :span="16">
          <a-row :gutter="24">
            <a-col :span="12">
              <a-form-item label="应用名称">
                <a-input
                  v-decorator="['name',{rules: [{ required: true, message: '请输入应用名称' }],initialValue: data.name}]"
                ></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="Host地址">
                <a-input v-decorator="['hostAddress',{initialValue: data.hostAddress}]"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="PC端应用地址">
                <a-input v-decorator="['pcAddress',{initialValue: data.pcAddress}]"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="移动端应用地址">
                <a-input v-decorator="['mobileAddress',{initialValue: data.mobileAddress}]"></a-input>
              </a-form-item>
            </a-col>
          </a-row>
        </a-col>
        <a-col :span="8">
          <a-form-item label="应用图标">
            <a-upload
              v-decorator="['icon',{rules: [{ required: true, message: '请上传图标' }]}]"
              list-type="picture-card"  
              :show-upload-list="false"
              :before-upload="beforeUpload"
              :customRequest = 'customRequest'
            >
              <div class="iconCell"><img :src="url" v-if="iconid"><a-icon v-else :type="loading ? 'loading' : 'plus'" /></div>
            </a-upload>
          </a-form-item>
        </a-col>
        <a-col :span="24">
          <a-form-item label="应用简介">
            <a-textarea :rows="4" :autoSize="false" v-decorator="['desc',{rules: [{ required: true, message: '请输入应用简介' }],initialValue: data.desc}]"></a-textarea>
          </a-form-item>
        </a-col>
      </a-row>
      <a-row :gutter="24">
        <a-col :span="24">
          <div class="titleBar">联系信息</div>
        </a-col>
        <a-col :span="8">
          <a-form-item label="接入单位">
            <a-input v-decorator="['unit',{rules: [{ required: true, message: '请输入接入单位' }],initialValue: data.unit}]"></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="接入单位联系人">
            <a-input
              v-decorator="['unitContact',{rules: [{ required: true, message: '请输入单位联系人' }],initialValue: data.unitContact}]"
            ></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="接入单位联系方式">
            <a-input
              v-decorator="['unitPhone',{rules: [{ required: true, message: '请输入正确的联系方式' }],initialValue: data.unitPhone}]"
            ></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="开发公司">
            <a-input
              v-decorator="['devCompany',{rules: [{ required: true, message: '请输入开发公司' }],initialValue: data.devCompany}]">
            </a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="开发公司联系人">
            <a-input
              v-decorator="['devCompanyContact',{rules: [{ required: true, message: '请输入开发公司联系人' }],initialValue: data.devCompanyContact}]"
            ></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="开发公司联系方式">
            <a-input
              v-decorator="['devCompanyPhone',{rules: [{ required: true, message: '请输入正确的联系方式' }],initialValue: data.devCompanyPhone}]"
            ></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="运维联系人">
            <a-input
              v-decorator="['operationContact',{rules: [{ required: true, message: '请输入运维联系人' }],initialValue: data.operationContact}]"
            ></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="8">
          <a-form-item label="运维联系方式">
            <a-input
              v-decorator="['operationPhone',{rules: [{ required: true, message: '请输入正确的联系方式' }],initialValue: data.operationPhone}]"
            ></a-input>
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
  </div>
</template>
<script>
import {Form,Button,Icon,Input,notification,Upload,Row,Col} from "ant-design-vue";
import { appdetail, appcodeIsExist, appupdate, generate } from "@/dev/api/app";
import { serviceVerify } from "@/dev/api/service";
import { uploadV2,downloadV2 } from "@/framework/api/file";
import { showError } from "@/framework/utils";
import { uiConfigsCookies } from "@/framework/utils/auth";
export default {
  components: {
    AButton: Button,
    AInput: Input,
    AIcon: Icon,
    AForm: Form,
    AFormItem: Form.Item,
    notification,
    ATextarea: Input.TextArea,
    AUpload: Upload,
    ARow:Row,
    ACol:Col
  },
  data() {
    return {
      boos: 0,
     // 上传图片 进度
      loading : false,
      form: this.$form.createForm(this),
      boole: true,
      arr: "编辑",
      data: {},
      iconid: undefined
    };
  },
  computed: {
    //当应用状态不为在用状态时禁止修改
    allow() {
      return this.$store.getters.appInfo.state == 0 ? true : false;
    },
    url(){
      return downloadV2(this.iconid)
    }
  },
  created() {
    let appid = this.$store.getters.appInfo.id;
    if (appid !== undefined) {
      this.refresh(appid);
    }
  },
  methods: {
    // 生成密钥
    randomKey(e) {
      generate()
        .then(res => {
          this.$set(this.data, "accessKey", res.result);
        })
        .catch(err => {
          showError(err);
        });
    },
    // 判断接入码是否唯一
    validExist(e, callback) {
      appcodeIsExist(e)
        .then(res => {
          callback && callback();
        })
        .catch(err => {
          showError(err);
          let a = eval("(" + err.desc + ")");
          const value = Object.values(a);
          callback(value[0]);
        });
    },
    // 修改应用基本信息
    boo() {
      if (this.arr == "编辑") {
        this.arr = "保存";
        this.boole = false;
      } else {
        if (this.boos == 0) {
          let data = this.data;
          if (this.iconid !== undefined) {
            this.form.setFieldsValue({ icon: this.iconid });
          }
          this.form.validateFields((err, values) => {
            if (err) {
              notification.error({
                message: "提示",
                description: "请正确填写信息！",
                duration: 2
              });
            } else {
              let obj = Object.assign(data, values);
              appupdate(data)
                .then(res => {
                  notification.success({
                    message: "提示",
                    description: "修改成功",
                    duration: 1.5
                  });
                  this.$store.commit("appInfo_change", data);
                  this.arr = "编辑";
                  this.boole = true;
                })
                .catch(err => {
                  notification.error({
                    message: "提示",
                    description: err.desc,
                    duration: 1.5
                  });
                  this.refresh(this.$route.query.id);
                });
            }
          });
        }
      }
    },
    // 查询应用基本信息
    refresh(id) {
      appdetail(id)
        .then(res => {
          let data = res.result;
          if (this.$store.getters.appInfo.state === undefined) {
            this.$store.commit("appInfo_change", data);
          }
          this.data = data;
        })
        .catch(err => {
          showError(err);
        });
    },
    //上传图片之前校验
    beforeUpload(file) {
      const isJpgOrPng =
        file.type === "image/jpeg" || file.type === "image/png";
      if (!isJpgOrPng) {
        this.$message.error("只能上传图片!");
      }
      const isLt300K = file.size / 1024 < 300;
      if (!isLt300K) {
        this.$message.error("图片大小不能超过300KB!");
      }
      return isJpgOrPng && isLt300K;
    },
    //上传图片
    customRequest(options){
      this.loading = true;
      const { onSuccess, onError, file, onProgress } = options;
        uploadV2(file)
        .then(res => {
          this.iconid = res.data.result.uploadid;
          this.$message.success('上传成功!');
        })
        .catch(error => {
          showError(error);
        }).finally(()=>{
          this.loading = false;
        })
    }
  }
};
</script>
<style lang="less" scoped>
.layout {
  .titleBar{
    margin: @layout-space-base 0;
    line-height: 1em;
    border-left: 5px solid @primary-color;
    font-size: 18px;
    text-indent: 5px;
    color: @primary-color;
  }
  /deep/ .iconCell{
    width: 100%;
    height: 100%;
    position: relative;
    i{
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%,-50%)
    }
    img{
      max-width: 100%;
    }
  }
}
</style>
