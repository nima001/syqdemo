<template>
  <div ref="content" :class="['pie-chart', {'border': isDrag}]" @mousedown.prevent="allowMove?move():false">
    <h2 v-if="settings.titleVisible!==false" :style="{ textAlign: settings.titlePosition||'center' }">{{ title }}</h2>
    <h3 v-if="settings.subtitleVisible!==false" :style="{ margin: 0, textAlign: settings.titlePosition||'center' }">{{subtitle}}</h3>
    <div ref="chart" class="chart"></div>
    <div class="tag" v-if="allowDrag" @mousedown.stop.prevent="drag()"/>
  </div>
</template>
<script>
import * as G2 from "@antv/g2";
import BaseMixin from "./BaseMixin";
import { get, orderBy, cloneDeep, xorBy, reduce, concat, map } from "lodash";
import { delTemplate } from "../../api/booklet";

export default {
  icon: "chart-pie",
  title: "饼图",
  name: "PieChart",
  mixins: [BaseMixin],
  data() {
    return {
      currentMoveX: 0,
      currentMoveY: 0,
      isDrag: false,
      isMove: false,
      plot: undefined,
    };
  },
  mounted() {
    this.draw(this.data);
  },
  computed: {
    colors() {
      if (this.settings.color&&(this.settings.color.length||typeof this.settings.color==='string')) {
        if(typeof this.settings.color==='string') {
          return this.settings.color.split(',');
        }
        return this.settings.color;
      } else {
        let colors = this.$store.getters.getConfig("chart.colors");
        if (colors) {
          try {
            colors = JSON.parse(colors);
            if (colors && colors.length) {
              return colors;
            }
          } catch (err) {}
        }
      }
      return ["#D15456", "#5488D1", "#EDBA55", "#D48265", "#91C7AE", "#749F83", "#BDA29A", "#6E7074", "#585470", "#706254"];
    },
  },
  watch: {
    data: {
      handler(v) {
        this.draw(v);
      },
      deep: true,
    },
    settings: {
      deep: true,
      handler(val,old) {
        if(val!=old) {
          this.draw(this.data)
        }
      },
    },
    // colors: {
    //   deep: true,
    //   handler(val, old) {
    //     if (val != old) {
    //       this.draw(this.data);
    //     }
    //   },
    // },
  },
  methods: {
    move() {
      let that = this;
      //获取x坐标和y坐标
      let startX = event.clientX;
      let startY = event.clientY;
      //获取左部和顶部的偏移量
      let left = that.$refs.content.offsetLeft;
      let top = that.$refs.content.offsetTop;
      this.isMove = true;
      document.onmousemove = function (e) {
        let endX = e.clientX;
        let endY = e.clientY;
        if(endX!=startX) {
          that.$refs.content.style.left = endX-(startX-left)+'px';
        }
        if(endY!=startY) {
          that.$refs.content.style.top =  endY-(startY-top)+'px';
        }
      }
      document.onmouseup = function () {
        this.isMove = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    drag() {
      let that = this;
      let startX = event.x;
      let startY = event.y;
      let width = that.$refs.content.offsetWidth;
      let height = that.$refs.content.offsetHeight;
      that.isDrag = true;
      document.onmousemove = function (e) {console.log('2')
        let moveX = e.pageX - startX;
        let moveY = e.pageY - startY;
        if(that.currentMoveX!=event.x&&moveX!=0) {
          that.$refs.content.style.width = Math.min(1400, Math.max(300, moveX+width))+'px';
          that.currentMoveX = event.x;
        }
        if(that.currentMoveY!=event.y&&moveY!=0) {
          that.$refs.content.style.height = Math.min(1400, Math.max(200, moveY+height))+'px';
          that.currentMoveY = event.y;
        }
      };
      document.onmouseup = function () {
        that.draw(that.data)
        that.isDrag = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    changeColor() {
      this.geometry.adjust("stack").position("value").color("key", this.colors);
    },
    sum(list) {
      let sum = 0;
      list.forEach((item) => {
        sum += parseInt(item.value);
      });
      return sum;
    },
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = this.transform(dataTable);
      return rows.map((item) => {
        let keys = keyCols.map((k) => item[k.column]);
        return {
          key: keys.join("-"),
          value: item[valueCols[0].column] || 0,
        };
      });
    },
    //排序 截取
    sortAndMerge(data) {
      let sortData = cloneDeep(data);
      if(!this.muitl){
        let mergeData = [{ key: "其他", value: undefined }];
        //截取合并之前需要先排序一次，保证截取的正确性
        let type = get(this.settings,'sort.type');
        let mergeOther = get(this.settings,'sort.mergeOther');
        let afterintercept = get(this.settings, 'sort.afterintercept');
        if (type && type !== "recover") {
          //是否排序
          sortData = orderBy(sortData, "value", type);
        }
        if (afterintercept) {
          //是否截取
          sortData = sortData.slice(
            afterintercept[0] - 1,
            afterintercept[1]
          );
        }
        if (mergeOther) {
          let xorData = map(xorBy(data, sortData, "key"), "value");
          mergeData[0].value = reduce(xorData, (sum, n) => {
            return sum + n;
          });
          sortData = concat(sortData, mergeData);
        }
        if (type && type !== "recover") {
          //是否排序
          sortData = orderBy(sortData, "value", type);
        }
      }
      map(sortData,(item,index)=>{
        var x = String(item.value).indexOf('.') + 1; //小数点的位置
        if(x>0) {
          item.value = (item.value).toFixed(2);
        }
      })
      return sortData;
    },
    draw(dataTable) {
      let data = this.createData(dataTable);
      let sortData = this.sortAndMerge(data);
      let sum = this.sum(sortData);
      if (!data) {
        return;
      }
      if (this.plot) {
        this.plot.destroy();
      }
      const chart = new G2.Chart({
        container: this.$refs.chart,
        // width: this.settings.canvas?this.settings.canvas.width:undefined,
        // height: this.settings.canvas?this.settings.canvas.height:undefined,
        autoFit: true,
        forceFit: true,
        appendPadding: this.settings.padding || [0, 0, 0, 0],
      });
      chart.coordinate("theta", { radius: 0.7 });
      chart.data(sortData);
      //提示
      chart.tooltip({
        showTitle: false,
        showMarkers: false,
      });
      if (this.settings.tooltip) {
        if (!this.settings.tooltip.visible) {
          chart.tooltip(false);
        }
      }
      // 配置图例
      chart.legend(false);
      if (this.settings.legend) {
        if (this.settings.legend.visible) {
          chart.legend({
            position: this.settings.legend.position,
            flipPage: this.settings.legend.flipPage,
            itemHeight: 15,
            marker: {
              symbol: this.settings.legend.marker,
            },
          });
        }
      }
      let geometry = chart.interval();
      //是否显示label
      geometry.label("key*value", {
        layout: [{ type: "pie-spider" }, { type: "hide-overlap" }],
        content: (obj) => `${obj.key}:  ${obj.value}`,
      });
      if(this.settings.label===false) {
        geometry.label(false); //FIXME 值太多默认不显示
      }
      chart.scale("value", {
        formatter: (val) => {
          if (sum == 0) {
            return `${0}%`;
          } else {
            if (val == 0) {
              return `${0}%`;
            } else {
              let float = Math.floor((val / sum) * 100);
              return `${float}%`;
            }
          }
        },
      });

      geometry
      .adjust("stack")
      .position("value")
      .color("key", this.colors)
      .state({
        active: {
          style: element => {
            const shape = element.shape;
            return {
              lineWidth: 8,
              stroke: shape.attr('fill'),
              strokeOpacity: shape.attr('fillOpacity'),
            };
          },
        },
      });
      chart.interaction('element-active');
      chart.changeData(sortData);
      this.plot = chart;
    },
  },
};
</script>
<style lang="less" scoped>
.pie-chart {
  width: 100%;
  height: 400px;
  display: flex;
  flex-direction: column;
  position: relative;
  &.border {
    border: 1px dashed #000;
  }
  /deep/.chart {
    display: flex;
    div {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }
  .tag {
    position: absolute;
    right: -10px;
    bottom: -10px;
    border-right: 5px solid #979797;
    height: 14px;
    border-bottom: 5px solid #979797;
    width: 14px;
    cursor: nw-resize;
  }
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>
