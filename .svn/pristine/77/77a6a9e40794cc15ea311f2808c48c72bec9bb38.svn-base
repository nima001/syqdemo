<template>
  <div class="wrap" :id="id">
    <a-spin :spinning="loading"></a-spin>
  </div>
</template>

<script>
import { orgPostReport } from "@/person-shaoxing/api/orgStaffReport";
import DataSet from "@antv/data-set";
import { Chart } from "@antv/g2";
import { showError } from "@framework/utils";
import { Spin } from "ant-design-vue";
// 雷达图
export default {
  data() {
    return {
      id: Math.random()
        .toString(36)
        .substr(2),
      yAxisKey: [
        "_id@organization.statistic.ldzs_hd",
        "_id@organization.statistic.ldzs_hd_sy"
      ],
      color: ["#d15456", "#5488d1"],
      list: [],
      plot: undefined,
      valueCols: [],
      loading: true
    };
  },
  props: {
    unittype: {
      required: true
    }
  },
  components: {
    ASpin: Spin
  },
  watch: {
    unittype(v) {
      if (this.plot) {
        this.plot.destroy();
      }
      this.getData(v, "");
    }
  },
  mounted() {
    this.getData(this.unittype, "");
  },
  methods: {
    getData(unittype, district) {
      this.loading = true;
      orgPostReport(unittype, district)
        .then(res => {
          this.createData(res.result, () => {
            this.draw();
          });
        })
        .catch(err => {
          showError(err);
        })
        .finally(() => {
          this.loading = false;
        });
    },
    createData(dataTable, fn) {
      let { keyCols, rows, valueCols } = dataTable;
      valueCols = valueCols.filter(item => {
        if (this.yAxisKey.includes(item.key)) {
          return item;
        }
      });
      this.valueCols = valueCols;
      let key = keyCols[0];
      this.list = rows.map(item => {
        return {
          item: item[key.column],
          [valueCols[0].showname]: item[valueCols[0].column],
          [valueCols[1].showname]: item[valueCols[1].column]
        };
      });
      fn();
    },
    draw() {
      const { DataView } = DataSet;
      const dv = new DataView().source(this.list);
      dv.transform({
        type: "fold",
        fields: [this.valueCols[0].showname, this.valueCols[1].showname], // 展开字段集
        key: "name", // key字段
        value: "value" // value字段
      });
      const chart = new Chart({
        container: this.id,
        autoFit: true,
        height: 500
      });
      chart.data(dv.rows);
      chart.scale("value", {
        //  度量: 等分度量
        type: "quantile"
      });

      chart.coordinate("polar", {
        radius: 0.8
      });
      chart.tooltip({
        shared: true
      });
      chart.axis("item", {
        line: null,
        tickLine: null,
        grid: {
          line: {
            style: {
              lineDash: null
            }
          }
        }
      });
      chart.axis("value", {
        line: null,
        tickLine: null,
        grid: {
          line: {
            type: "line",
            style: {
              lineDash: null
            }
          },
          closed: true,
          alternateColor: "#f5f5f5"
        }
      });
      chart
        .line()
        .position("item*value")
        .color("name", this.color);
      chart
        .point()
        .position("item*value")
        .color("name", this.color)
        .label("value", {
          style: {
            fill: "#d15456"
          },
          labelEmit: true,
          offset: 10,
          layout: "fixed-overlap"
        })
        .shape("circle")
        .style({
          stroke: "#fff",
          lineWidth: 1,
          fillOpacity: 1
        });
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 100%;
  .ant-spin {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}
</style>