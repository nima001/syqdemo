
<template>
  <div class="content">
    <div class="g6-wrapper">
      <div class="header">
        <div class="tabs">{{ orgtitle ? orgtitle : finddata.orgname }}</div>
      </div>
      <div class="container-main">
        <div>
          <div class="mechanism-div">
            <div class="small-div"></div>
            <div class="small-p">变革沿革</div>
          </div>
        </div>
        <div class="container-box">
          <div id="container"></div>
          <div class="timeline">
            <div class="track-list">
              <ul>
                <li v-for="(item, index) in g6timedata" :key="index">
                  <i class="node-icon"><a-icon type="clock-circle" /></i>
                  <span class="time">{{ item }}</span>
                  <i class="last" v-if="index === g6timedata.length - 1">
                    <a-icon type="arrow-right"
                  /></i>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div class="container-reason">
        <div class="mechanism-div">
          <div class="small-div" ref="s"></div>
          <div class="small-p">变更原因及依据</div>
        </div>
        <div class="reason-div">
          <p class="reason-p">{{ reason }}</p>
          <a-button @click="downloadFile(fileuri)">下载文件</a-button>
        </div>
      </div>
      <div class="container-reason basic">
        <div class="mechanism-div">
          <div class="small-div"></div>
          <div class="small-p">基本情况</div>
        </div>
        <div class="reason-div">
          <p class="reason-p">
            <span style="margin-right: 200px"
              >核定编制数:{{ this.bzzjcount }}</span
            ><span style="margin-right: 200px"
              >核定职数:{{ this.bmldzzcount || 0 }}</span
            ><span>核准内设机构数:{{ this.bznscount }}</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import G6 from "@antv/g6";
import dagre from "dagre";
import { postevolution, orgdistr } from "@/person-shaoxing/api/analysis";
import { showError } from "@/framework/utils/index";
import { download } from "@/framework/api/file";
import { Button, Steps, Icon } from "ant-design-vue";
import isEmpty from "lodash/isEmpty";
import assign from "lodash/assign";
export default {
  components: {
    AButton: Button,
    ASteps: Steps,
    AIcon: Icon,
    AStep: Steps.Step,
  },
  data() {
    return {
      documentwidth: "",
      documentheight: "",
      g6timedata: [],
      G6data: {},
      finddata: null,
      G6dataid: null,
      maxNum: null,
      reason: null,
      fileuri: null,
      itemId: null,
      orgtitle: null,
      bzzjcount: 0, //
      bmldzzcount: "", //核定职数,正,副,其他(三总师+其他)
      bznscount: 0, //标准内设机构数
      positionY: [], //流程图节点坐标数组
    };
  },
  created() {
    if (!isEmpty(this.$route.params)) {
      sessionStorage.setItem("params", JSON.stringify(this.$route.params));
    }
    let params = JSON.parse(sessionStorage.getItem("params"));
    this.G6data = params.G6data;
    this.g6timedata = params.g6timedata;
    this.finddata = params.finddata;
    this.G6dataid = params.finddata.id;
    this.findMost(this.G6data.nodes);
    this.getmodeldata(this.finddata);
  },
  mounted() {
    this.documentwidth =
      this.g6timedata.length * 120 + (this.g6timedata.length - 1) * 130 + 23;
    this.documentheight = this.maxNum * 60 + (this.maxNum - 1) * 130 + 60;
    this.init();
  },
  methods: {
    //下载文件
    downloadFile(fileuri) {
      if (fileuri) {
        download(fileuri);
      }
    },
    findMost(arr) {
      if (!arr.length) return;
      if (arr.length === 1) return (this.maxNum = 1);
      let res = {};
      let maxName,
        maxNum = 0;
      // 遍历数组
      arr.forEach((item) => {
        res[item.evolutiontime]
          ? (res[item.evolutiontime] += 1)
          : (res[item.evolutiontime] = 1);
      });

      // 遍历 res
      for (let r in res) {
        if (res[r] > maxNum) {
          maxNum = res[r];
        }
      }
      this.maxNum = maxNum;
    },
    init() {
      let myDiv = document.querySelector(".small-div");
      let finalStyle = myDiv.currentStyle ? myDiv.currentStyle : document.defaultView.getComputedStyle(myDiv, null);//利用判断是否支持currentStyle（是否为ie）
      let color = finalStyle.background.split('none')[0];
      let that = this;
      G6.registerNode(
        "sql",
        {
          drawShape(cfg, group) {
            //边框
            const rect = group.addShape("rect", {
              attrs: {
                x: -75,
                y: -25,
                width: 120,
                height: 60,
                radius: 8,
                fill: that.G6dataid == cfg.id ? color : "white",
                // stroke: that.G6dataid == cfg.id ? "#d60002" : "#D9D9D9",
                stroke: color, //默认节点边框颜色
                lineWidth: 2,
                cursor: "pointer",
              },
              name: "rect-shape",
            });
            //字体
            if (cfg.orgname) {
              group.addShape("text", {
                attrs: {
                  text:
                    cfg.orgname.length > 6
                      ? cfg.orgname.slice(0, 6) + "..."
                      : cfg.orgname,
                  x: -15,
                  y: 5,
                  fill: that.G6dataid == cfg.id ? "white" : color, //字体颜色修改
                  fontSize: 14,
                  textAlign: "center",
                  textBaseline: "middle",
                },
                name: "text-shape",
              });
            }
            return rect;
          },
        },
        "single-node"
      );
      const tooltip = new G6.Tooltip({
        offsetX: 50,
        offsetY: -30,
        getContent(e) {
          const outDiv = document.createElement("div");
          outDiv.style.width = "180px";
          outDiv.innerHTML = `
      <ul>
        <li>机构名称: ${e.item.getModel().orgname}</li>
      </ul>`;
          return outDiv;
        },
        itemTypes: ["node"],
      });
      const graph = new G6.Graph({
        container: "container",
        width: that.documentwidth,
        height: that.documentheight,
        plugins: [tooltip], // 配置 Tooltip 插件
        layout: {
          rankdir: "LR",
          type: "dagre",
          ranksep: 70,// rankdir: "LR"时,节点的水平间距
          nodesep: 30,// rankdir: "LR"时,节点的竖直间距
          // controlPoints: true,
        },
        defaultNode: {
          type: "sql", //连接点的位置
          anchorPoints: [
            [0, 0.5], //左边的中间
            [1, 0.5], //右边的中间
          ],
        },
        defaultEdge: {
          shape: "polyline", //边的样式是折先
          style: {
            // endArrow: true,
            lineWidth: 2,
            stroke: "#D9D9D9",
            // lineDash:[5,5]//边的虚线
          },
        },
        nodeStateStyles: {
          selected: {
            // stroke: "#d60002",
            // fill: "#d60002",
            stroke: color,
            fill: color,
            "text-shape": {
              // 这里定义的是 name 属性为 text-shape 的元素的状态样式，默认的 label name 属性为 text-shape
              fill: "white",
            },
            //阴影
            // shadowColor: "#000000",
            // shadowBlur: 6,
          },
        },
        modes: {
          default: [
            //点击
            "click-select",
          ],
        },
        //  fitView: true,
        // fitCenter: true,
        // autoPaint: true,
      });
      // 点击节点
      graph.on("node:click", (e) => {
        // 通过 ID 查询节点实例,设置默认选中项样式
        const itemId = graph.findById(that.G6dataid);
        graph.updateItem(itemId, {
          style: {
            // stroke: "#d60002",
            stroke: color,
            fill: "white",
            "text-shape": {
              // 这里定义的是 name 属性为 text-shape 的元素的状态样式，默认的 label name 属性为 text-shape
              // fill: "#d60002",
              fill: color,
            },
          },
        });
        this.orgtitle = e.item._cfg.model.orgname;
        let data = {
          evolutiontime: e.item._cfg.model.evolutiontime,
          orgid: e.item._cfg.model.orgid,
        };
        that.getmodeldata(data);
      });
      graph.on("afterrender", (e) => {
        let nodes = graph.cfg.nodes;
        let maxWidth = 0;
        if (nodes && nodes.length > 0) {
          nodes.forEach((node) => {
            if (node._cfg.bboxCache) {
              let width = node._cfg.bboxCache.y;
              if (width > maxWidth) {
                maxWidth = width;
              }
            } else {
              maxWidth = 44;
            }
          });
          if (that.documentwidth > 400) {
            graph.changeSize(that.documentwidth, maxWidth + 94);
          } else {
            graph.changeSize(370, maxWidth + 94);
          }
        }
        graph.paint();
      });
      graph.data(that.G6data);
      graph.render();
    },
    async getOrgdistr(data) {
      await orgdistr({
        category: data.category,
        docid: data.docid,
        orgid: data.toorgid,
      })
        .then((res) => {
          if (data.category === "staff") {
            this.bzzjcount = 0;
            res.result.items.forEach((item) => {
              if (item.field === "bzzj") {
                this.bzzjcount = item.count;
                let datas = {};
                datas.category = "post";
                datas.docid = data.docid;
                datas.toorgid = data.toorgid;
                //查询核定职数
                this.getOrgdistr(datas);
              }
            });
          } else if (data.category === "post") {
            this.bmldzzcount = "";
            this.bznscount = 0;
            let othercount = 0;
            res.result.items[0].children[0].children.forEach((item) => {
              if (item.field === "bmldzz") {
                this.bmldzzcount += item.count + "正";
              } else if (item.field === "bmldfz") {
                this.bmldzzcount += item.count + "副";
              } else if (item.field === "szs") {
                if (item.count !== 0) {
                  othercount += item.count;
                }
              } else if (item.field === "bmqtld") {
                if (item.count !== 0) {
                  othercount += item.count;
                }
              } else if (item.field === "nsjgldfz") {
                this.bznscount += item.count;
              }
            });
            this.bmldzzcount += othercount + "其他";
          }
        })
        .catch((err) => {
          this.bzzjcount = 0;
          this.bmldzzcount = "";
          this.bznscount = 0;
          showError(err);
        });
    },
    async getmodeldata(data) {
      await postevolution(data)
        .then((res) => {
          this.reason = res.result.reason;
          res.result.category = "staff";
          //查询核定编制数
          this.getOrgdistr(res.result);
          if (res.result.doc) {
            this.fileuri = res.result.doc.fileuri;
          }
        })
        .catch((err) => {
          showError(err);
        });
    },
  },
};
</script>
<style scoped lang="less">
.content {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}
.g6-wrapper {
  margin: 10px;
  display: flex;
  flex-direction: column;
  flex: 1;
  height: 100%;
  background-color: #fff;
  .header {
    padding: @layout-space-base @content-padding-h;
    height: 50px;
    border-bottom: 1px solid #ededed;
    align-items: center;
    .tabs {
      font-size: 18px;
      font-weight: 800;
      color: #666666;
    }
  }
  .mechanism-div {
    padding: @layout-space-base @content-padding-h;
    display: flex;
    align-items: center;
    .small-div {
      width: 5px;
      height: 20px;
      background: @primary-color;
    }
    .small-p {
      font-size: 20px;
      margin-left: 5px;
    }
  }
  .container-main {
    position: relative;
    #container {
      // position: relative;
    }
    .container-box {
      width: 100%;
      height: 100%;
      overflow-x: auto;
      // white-space: nowrap;
      .timeline {
        width: 100%;
        height: 60px;
        padding: 10px;
        .track-rcol {
          width: 100%;
        }
        .track-list ul {
          display: flex;
        }
        .track-list li {
          position: relative;
          line-height: 16px;
          border-bottom: 2px solid @primary-color;
          color: @primary-color;
          width: 250px;
        }
        li:last-child {
          width: 200px;
        }
        .track-list li .node-icon {
          position: absolute;
          color: @primary-color;
          left: 50px;
          top: 50%;
          width: 10px;
          height: 10px;
          i.anticon.anticon-clock-circle {
            background: white;
          }
        }
        .last {
          color: @primary-color;
          position: relative;
          top: 9px;
          left: 165px;
        }
        .track-list li .time {
          position: relative;
          top: 26px;
          left: 42px;
        }
      }
    }
  }
  .container-reason.basic {
    flex: 1;
    background-color: #fff;
    margin-bottom: 10px;
    border-bottom: 0;
  }
  .container-reason {
    border-bottom: 1px solid #ededed;
    .reason-div {
      padding: 0 @layout-space-base @layout-space-base @content-padding-h;
    }
  }
}
</style>