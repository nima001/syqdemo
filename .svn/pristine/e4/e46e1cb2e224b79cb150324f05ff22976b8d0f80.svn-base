<template>
  <div>
    <a-form :form="form" :label-col="{ span: 4 }" :wrapper-col="{ span: 19 }">
    <a-form-item label="批准文号">
        <a-input-group :class="['pzwh', { disablepzwh: record.id }]" compact>
        <a-input
            type="text"
            :disabled="record.id ? true : false"
            v-decorator="[ 'zihao', { initialValue: zihao, rules: [{ required: true, message: '请输入正确批准文号' }], }, ]"
            style="width: 30%"
        />
        <a-input
            addonBefore="〔"
            addonAfter="〕"
            :disabled="record.id ? true : false"
            v-decorator="[ 'year', { initialValue: year, rules: [{ required: true, message: '请输入正确批准文号' }], }, ]"
            type="text"
            style="width: 40%; top: 0"
        />
        <a-input
            addonAfter="号"
            type="text"
            :disabled="record.id ? true : false"
            v-decorator="[ 'ordinal', { initialValue: ordinal, rules: [{ required: true, message: '请输入正确批准文号' }], }, ]"
            style="width: 30%; top: 0"
        />
        </a-input-group>
    </a-form-item>
    <a-form-item label="文件标题">
        <a-input
        allow-clear
        v-decorator="[ 'title', { initialValue: record.title, rules: [{ required: true, message: '请输入文件标题!' }], }, ]"
        placeholder="请输入文件标题"
        />
    </a-form-item>
    <a-form-item label="发文时间">
        <a-date-picker
        :disabled="record.id ? true : false"
        allow-clear
        style="width: 100%"
        v-decorator="[ 'dispatchdate', { initialValue: record.id ? moment(record.dispatchdate) : undefined, rules: [{ required: true, message: '请选择发文时间!' }], }, ]"
        placeholder="请选择发文时间"
        />
    </a-form-item>
    <a-form-item label="发文单位" :wrapper-col="{ span: 10 }">
        <a-input
        @click="showModal(1)"
        read-only
        v-decorator="['orgid']"
        placeholder="请选择相关单位"
        >
        <a-icon
            style="color: #666; font-size: 12px"
            @click.stop="deleteorgid"
            slot="suffix"
            v-if="orgid[0].orgname"
            type="close-circle"
            theme="filled"
        />
        </a-input>
    </a-form-item>
    <a-form-item label="文件归类" :wrapper-col="{ span: 10 }">
        <a-select
          allow-clear
          label-in-value
          @change="handledoctypeChange"
          placeholder="请选择文件归类"
          v-decorator="[ 'type', { initialValue: record.id && record.type ? { key: record.type } : undefined, rules: [{ required: true, message: '请选择文件归类!' }], }, ]"
        >
          <a-select-option v-for="item in doctype" :key="item.value">
            {{ item.text }}
          </a-select-option>
        </a-select>
    </a-form-item>
    <a-form-item
      label="文件类型"
      v-if="form.getFieldValue('type') ? ![10].includes(form.getFieldValue('type').key) : true"
      :wrapper-col="{ span: 10 }"
    >
      <a-select
        allow-clear
        v-decorator="[ 'subtype', { initialValue: docsubtype.length ? record.subtype : undefined, rules: [{ required: true, message: '请选择文件类型!' }], }, ]"
        placeholder="请选择文件类型"
      >
        <a-select-option v-for="item in docsubtype" :key="item.value">
          {{ item.text }}
        </a-select-option>
      </a-select>
    </a-form-item>
    <a-form-item
        v-if="
        form.getFieldValue('type')
            ? [1, 3].includes(form.getFieldValue('type').key)
            : true
        "
        label="文件归属单位"
        v-decorator="['']"
        :wrapper-col="{ span: 10 }"
        style="display: flex; align-items: center"
    >
        <div class="mechanism" @click="showModal(100)">
        <ul>
            <li class="placehold" v-if="!orgs.length">请选择单位</li>
            <li v-for="(item, index) in orgs" :key="item.orgid">
            {{ item.orgname }}
            <span @click.stop="deleteItem(index)" class="delete">
                <a-icon type="close" />
            </span>
            </li>
        </ul>
        <span class="clear" v-if="orgs.length" @click.stop="resetRange">
            <a-icon
            type="close-circle"
            theme="filled"
            :style="{ fontSize: '12px', color: '#666' }"
            />
        </span>
        </div>
    </a-form-item>
    </a-form>
    <div class="right">
      <a-button @click="handleCancel()">取消</a-button>
      <a-button type="primary" @click="handleOk()">确认</a-button>
    </div>
    <a-modal
      v-model="orgVisible"
      :destroyOnClose="true"
      title="选择单位"
      :width="800"
      :bodyStyle="{ height: '600px', padding: '0' }"
      :footer="null"
    >
      <org-user-select
        :mode="maxSelect === 1 ? 'orgtree' : 'org'"
        :max-select="this.maxSelect"
        :root-selectable="true"
        :selected.sync="selected"
        @finish="selectOrg"
      />
    </a-modal>
  </div>
</template>

<script>
import {
  Form,
  Input,
  DatePicker,
  Button,
  Select,
  Icon,
  Modal,
  Divider,
} from "ant-design-vue";
import moment from "moment";
import DictSelect from "@/framework/components/DictSelect";
import OrgUserSelect from "@/framework/components/OrgUserSelect";
import includes from "lodash/includes";
import trim from "lodash/trim";
import { document, documentupdate } from "@/person-shaoxing/api/information";
import { uploadV2 } from "@/framework/api/file";
import { showError } from "@/framework/utils";
export default {
  props: {
    record: {
      type: Object,
    },
    visible: {
      type: Boolean,
    },
    documentsubtype: {
      type: Array,
    },
    doctype: {
      type: Array,
    }
  },
  components: {
    AForm: Form,
    AFormItem: Form.Item,
    AInput: Input,
    AInputGroup: Input.Group,
    ADatePicker: DatePicker,
    ARangePicker: DatePicker.RangePicker,
    DictSelect,
    ASelect: Select,
    ASelectOption: Select.Option,
    AButton: Button,
    AIcon: Icon,
    AModal: Modal,
    ADivider: Divider,
    OrgUserSelect,
  },
  data() {
    return {
      moment,
      orgid: [
        {
          orgid: "",
          id: "",
          orgname: "",
        },
      ],
      orgs: [],
      selected: [],
      maxSelect: 1,
      orgVisible: false,
      docsubtype: [],
      form: this.$form.createForm(this, { name: "updateform" }),
    };
  },
  computed: {
    zihao() {
      return (this.record.num || "").split("〔")[0];
    },
    year() {
      let year = this.record.num || "";
      if (year) {
        let start = year.indexOf("〔");
        let end = year.indexOf("〕");
        let yearstring = year.substring(start + 1, end);
        return yearstring;
      }
    },
    ordinal() {
      let ordinal = this.record.num || "";
      if (ordinal) {
        let start = ordinal.indexOf("〕");
        let end = ordinal.indexOf("号");
        let ordinalstring = ordinal.substring(start + 1, end);
        return ordinalstring;
      }
    },
  },
  watch: {
    //实现每次点击修改都重新加载显示数据
    record(val) {
      if (val.id && val.type) {
        this.loaddocsubtype(val);
      }
    },
  },
  mounted() {
    if(this.record&&this.visible){
       this.loaddocsubtype(this.record);
    }
  },
  methods: {
    //点击编辑后，如果record有值，自动加载文件类型下拉数据
    loaddocsubtype(val){
      if(this.doctype){
        let type = this.doctype.filter((item) => item.value === val.type);
        this.docsubtype = this.documentsubtype.filter((item) =>
          includes(item.group, trim(type[0].text))
        );
      }
    },
    handleCancel() {
      this.orgid = [
        {
          orgid: undefined,
          id: undefined,
          orgname: undefined,
        },
      ];
      this.orgs = [];
      this.$emit("update:visible", false);
    },
    dateformate(s) {
      return s < 10 ? "0" + s : s;
    },
    handleOk(e) {
      this.form.validateFields((err, values) => {
        if (!err) {
          let date = new Date(this.form.getFieldValue("dispatchdate")._d);
          let dispatchdate = date.getFullYear() + "-" + this.dateformate(date.getMonth() + 1) + "-" + this.dateformate(date.getDate());
          let params = {
            id: undefined,
            num: `${values.zihao}〔${values.year}〕${values.ordinal}号`,
            title: values.title,
            dispatchdate: dispatchdate,
            orgid: this.orgid[0].orgid,
            orgs: this.orgs.length ? this.orgs : undefined,
            type: values.type.key,
            subtype: values.subtype,
          };
          params.id = this.record.id;
          this.updatedocument(params);
          this.handleCancel();
        }
      });
    },
    //文件归档change事件
    handledoctypeChange(value) {
      if (value) {
        //选择新的选项
        if (this.documentsubtype) {
          this.docsubtype = this.documentsubtype.filter((item) =>
            includes(item.group, trim(value.label))
          );
          this.$nextTick(() => {
            if (this.docsubtype.length) {
              this.form.setFieldsValue({ subtype: this.docsubtype[0].value });
            } else {
              this.form.setFieldsValue({ subtype: undefined });
            }
          });
        }
      } else {
        //点击清空选择,需要将级联菜单也清空
        this.form.setFieldsValue({ subtype: undefined });
        this.form.validateFields(["subtype"], (err) => {
          if (err) {
            this.docsubtype = [];
          }
        });
      }
    },
    //发文单位清空
    deleteorgid() {
      this.orgid[0].orgid = undefined;
      this.orgid[0].orgname = undefined;
      this.form.setFieldsValue({ orgid: "" });
    },
    //文件归属单位清空
    resetRange() {
      this.selected = [];
      this.orgs = [];
    },
    showModal(maxselect) {
      this.orgVisible = true;
      this.maxSelect = maxselect;
      if (maxselect === 1) {
        this.selected = this.orgid;
      } else {
        this.selected = this.orgs;
      }
    },
    //单个删除
    deleteItem(index) {
      this.orgs.splice(index, 1);
    },
    //确定选择的单位
    selectOrg(type, list) {
      this.orgVisible = false;
      if (type == "ok" && list.length) {
        if (this.maxSelect === 1) {
          let org = list[0];
          this.orgid[0].orgid = org.data._id;
          this.orgid[0].id = org.id;
          this.form.setFieldsValue({ orgid: org.name });
          this.orgid[0].orgname = org.name;
        } else {
          let orgarr = [];
          list.forEach(function (item) {
            orgarr.push({
              orgid: item._id || item.orgid,
              orgname: item.name,
            });
          });
          this.orgs = orgarr;
        }
      }
    },
    updatedocument(data) {
      documentupdate(data)
        .then((res) => {
          if (res.code === "success") {
            this.$notification.success({
              title: "提示",
              message: "更新成功！",
              duration: 3,
            });
            this.$emit("documentList");
          } else {
            that.$notification.warning({
              message: "提示",
              description: "更新失败！",
              duration: 3,
            });
          }
        })
        .catch((err) => {
          showError(err);
        });
    },
  },
};
</script>
<style scoped lang="less">
/deep/.ant-upload-list {
  display: inline-block;
  position: relative;
  top: 5px;
  width: 34%;
  & .ant-upload-list-item {
    margin-top: 0;
  }
}
.ant-modal-body {
  & .mechanism {
    position: relative;
    padding: 1px 30px 1px 11px;
    border: 1px solid #d9d9d9;
    border-radius: @border-radius-base;
    line-height: 2;

    & ul {
      margin-bottom: 0;
      display: flex;
      overflow-y: hidden;
      overflow-x: auto;
      li.placehold {
        color: rgba(176, 176, 176, 0.8);
        background: transparent;
      }
      li:not(.placehold) {
        background: #e8e8e8;
        border-radius: 4px;
        padding: 0 4px;
        margin: 0 8px 0 0;
        white-space: nowrap;
        & span.delete {
          cursor: pointer;
        }
      }
    }
    & .clear {
      position: absolute;
      top: 50%;
      right: 12px;
      -webkit-transform: translateY(-50%);
      transform: translateY(-50%);
      display: flex;
      z-index: 2;
      cursor: pointer;
    }
  }
  & span.pzwh.ant-input-group {
    border: 1px solid #d9d9d9;
    border-radius: 4px;
  }
 .right {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 10px 20px;
    text-align: right;
    border-top: 1px solid #e8e8e8;
    & .ant-btn {
      margin-left: 12px;
    }
  }
}
.disablepzwh {
  background: #f5f5f5;
}
/deep/ .pzwh .ant-input {
  border: none;
  height: 30px;
}
/deep/span.ant-input-group-addon {
  border: none;
  background: none;
  padding: 0 4px;
}
</style>
