<template>
  <div ref="content" :class="['radar-chart', {'border': isDrag}]" @mousedown.prevent="allowMove?move():false">
    <h2 v-if="settings.titleVisible!==false" :style="{ textAlign: settings.titlePosition||'center' }">{{ title }}</h2>
    <h3 v-if="settings.subtitleVisible!==false" :style="{ margin: 0, textAlign: settings.titlePosition||'center' }">{{subtitle}}</h3>
    <div ref="chart" class="chart"></div>
    <div class="tag" v-if="allowDrag" @mousedown.stop.prevent="drag()"/>
  </div>
</template>

<script>
import * as G2 from "@antv/g2";
import BaseMixin from "./BaseMixin";
import { get } from 'lodash';
export default {
  icon: 'chart-radar',
  title: "雷达图",
  name: "BarChart",
  mixins: [BaseMixin],
  watch: {
    data: {
      handler(v) {
        this.draw(v);
      },
      deep: true,
    },
    'settings': {
      deep:true,
      handler(val,old) {console.log(val,old)
        if(val!=old) {
          this.draw(this.data)
        }
      }
    },
    // colors: {
    //   deep: true,
    //   handler(val,old) {
    //     if(val!=old) {
    //       this.draw(this.data);
    //     }
    //   }
    // }
  },
  data() {
    return {
      currentMoveX: 0,
      currentMoveY: 0,
      isDrag: false,
      isMove: false,
      plot: undefined
    };
  },
  computed: {
    colors() {
      if (this.settings.color&&(this.settings.color.length||typeof this.settings.color==='string')) {
        if(typeof this.settings.color==='string') {
          return this.settings.color.split(',');
        }
        return this.settings.color;
      } else {
        let colors = this.$store.getters.getConfig("chart.colors");
        if (colors) {
          try {
            colors = JSON.parse(colors);
            if (colors && colors.length) {
              return colors;
            }
          } catch (err) {}
        }
      }
      return ["#D15456", "#5488D1", "#EDBA55", "#D48265", "#91C7AE", "#749F83", "#BDA29A", "#6E7074", "#585470", "#706254"];
    },
  },
  mounted() {
    const e = document.createEvent('Event')
    e.initEvent('resize', true, true)
    window.dispatchEvent(e)
    this.draw(this.data);
  },
  methods: {
    move() {
      let that = this;
      //获取x坐标和y坐标
      let startX = event.clientX;
      let startY = event.clientY;
      //获取左部和顶部的偏移量
      let left = that.$refs.content.offsetLeft;
      let top = that.$refs.content.offsetTop;
      this.isMove = true;
      document.onmousemove = function (e) {
        let endX = e.clientX;
        let endY = e.clientY;
        if(endX!=startX) {
          that.$refs.content.style.left = endX-(startX-left)+'px';
        }
        if(endY!=startY) {
          that.$refs.content.style.top =  endY-(startY-top)+'px';
        }
      }
      document.onmouseup = function () {
        this.isMove = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    drag() {
      let that = this;
      let startX = event.x;
      let startY = event.y;
      let width = that.$refs.content.offsetWidth;
      let height = that.$refs.content.offsetHeight;
      that.isDrag = true;
      document.onmousemove = function (e) {console.log('2')
        let moveX = e.pageX - startX;
        let moveY = e.pageY - startY;
        if(that.currentMoveX!=event.x&&moveX!=0) {
          that.$refs.content.style.width = Math.min(1400, Math.max(300, moveX+width))+'px';
          that.currentMoveX = event.x;
        }
        if(that.currentMoveY!=event.y&&moveY!=0) {
          that.$refs.content.style.height = Math.min(1400, Math.max(200, moveY+height))+'px';
          that.currentMoveY = event.y;
        }
      };
      document.onmouseup = function () {
        that.draw(that.data)
        that.isDrag = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    changeColor() {
      if(this.muitl){
        //线
        this.geometry.color("type", this.colors);
      }else{
        //线
        this.geometry.color(this.colors[0]);
      }
    },
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = this.transform(dataTable);
      return rows.map(item => {
        let key, type;
        if(keyCols.length > 1){
          let keys = keyCols.map(k => item[k.column]);
          type = keys.pop();
          key = keys.join("-")
        }else{
          key = item[keyCols[0].column]
        }
        return {
          key, type,
          value: item[valueCols[0].column] || 0
        };
      });
    },
    draw(dataTable) {
        let data = this.createData(dataTable);
        if (!data) {
          return false;
        }
        if (this.plot) {
          this.plot.destroy();
        }
        const chart = new G2.Chart({
          container: this.$refs.chart,
          // width: this.settings.canvas?this.settings.canvas.width:undefined,
          // height: this.settings.canvas?this.settings.canvas.height:undefined,
          autoFit: true,
          appendPadding: this.settings.padding || [0, 0, 0, 0],
        });
        chart.data(data);
        
        chart.coordinate('polar', {
          radius: 0.9,
        });
        chart.axis('key', {
          line: null,
          tickLine: null,
          grid: {
            line: {
              style: {
                lineDash: null,
              },
            },
          },
        });
        chart.axis('value', {
          line: null,
          tickLine: null,
          grid: {
            line: {
              style: {
                lineDash: null,
              },
            },
          },
        });
        //是否显示lebal
        // if(this.settings.label) {
        //   chart.point().tooltip(false).position("key*value").label("value", {
        //     layout: [
        //     { type: 'overlap' },
        //     { type: 'limit-in-plot', cfg: { action: 'hide' } },
        //   ]}
        //   );
        // }else{
        //   chart.point().tooltip(false).position("key*value").label(false);//FIXME 值太多默认不显示
        // }
        // 配置图例
        chart.legend(false);
        if(this.settings.legend) {
          if(this.settings.legend.visible) {
            chart.legend({
              position: this.settings.legend.position,
              flipPage: this.settings.legend.flipPage,
              itemHeight: 15,
              marker: {
                symbol: this.settings.legend.marker
              },
            });
          }
        }
        //滑块
        if(this.settings.slider) {
          chart.option('slider', {
            backgroundStyle: {
              fill: this.colors[0],
            }
          });
        }
        chart
          .line()
          .tooltip(false)
          .position('key*value')
          .color(this.muitl?'type':'key')
          .size(2);
        chart
          .point()
          .position('key*value')
          .color(this.muitl?'type':'key')
          .shape('circle')
          .size(4)
          .style({
              stroke: '#fff',
              lineWidth: 1,
              fillOpacity: 1,
          });
        chart
          .area()
          .tooltip(false)
          .position('key*value')
          .color(this.muitl?'type':'key');
          //提示
        if(this.settings.tooltip) {
          if(this.settings.tooltip.visible) {
            chart.tooltip({
              showTitle: this.muitl,
              shared: true,
              crosshairs: {
                line: {
                  style: {
                    lineDash: [4, 4],
                    stroke: '#333'
                  }
                }
              }
            })
          }else{
            chart.tooltip(false);
          }
        }
        chart.changeData(data);
        this.plot = chart;
    },
  }
};
</script>
<style lang="less" scoped>
.radar-chart {
  width: 100%;
  height: 400px;
  display: flex;
  flex-direction: column;
  position: relative;
  &.border {
    border: 1px dashed #000;
  }
  /deep/.chart {
    display: flex;
    div {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }
  .tag {
    position: absolute;
    right: -10px;
    bottom: -10px;
    border-right: 5px solid #979797;
    height: 14px;
    border-bottom: 5px solid #979797;
    width: 14px;
    cursor: nw-resize;
  }
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>
