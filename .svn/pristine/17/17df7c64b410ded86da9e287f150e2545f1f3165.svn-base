<template>
  <div class="wrap" :id="id">
    <a-spin :spinning="loading" v-if="loading"></a-spin>
  </div>
</template>

<script>
import { Chart } from "@antv/g2";
import { orgRetireReport } from "@/person-shaoxing/api/orgStaffReport";
import { showError } from "@framework/utils";
import { Spin } from "ant-design-vue";
// 折线图
export default {
  data() {
    return {
      id: Math.random()
        .toString(32)
        .substr(2),
      color: [
        "#D15456",
        "#5488D1",
        "#EDBA55",
        "#D48265",
        "#91C7AE",
        "#749F83",
        "#BDA29A",
        "#6E7074",
        "#585470",
        "#706254"
      ],
      list: [],
      plot: undefined,
      loading: false
    };
  },
  props: {
    unittype: {
      required: true
    }
  },
  components: {
    ASpin: Spin
  },
  watch: {
    unittype(v) {
      if (this.plot) {
        this.plot.destroy();
      }
      this.getData(v, "");
    }
  },
  mounted() {
    this.getData(this.unittype, "");
  },
  methods: {
    getData(unittype, district) {
      this.loading = true;
      orgRetireReport(unittype, district)
        .then(res => {
          this.createData(res.result, () => {
            this.draw();
          });
        })
        .catch(err => {
          showError(err);
        })
        .finally(() => {
          this.loading = false;
        });
    },
    createData(dataTable, fn) {
      let { keyCols, rows, valueCols } = dataTable;
      let arr = [];
      let key = keyCols[0]["column"];
      for (let i = 0; i < valueCols.length; i++) {
        let vCol = valueCols[i];
        for (let j = 0; j < rows.length; j++) {
          let row = rows[j];
          let obj = {
            key: row[key],
            value: row[vCol["column"]],
            showname: vCol.showname
          };
          arr.push(obj);
        }
      }
      this.list = arr;
      fn();
    },
    draw() {
      const chart = new Chart({
        container: this.id,
        autoFit: true,
        height: 500
      });
      chart.data(this.list);
      chart.scale({
        key: {
          range: [0, 1]
        },
        value: {
          nice: true
        }
      });
      chart.tooltip({
        showCrosshairs: true,
        shared: true
      });
      chart
        .line()
        .position("key*value")
        .color("showname", this.color)
        .shape("smooth");
      chart.legend({ position: "top" });
      chart
        .point()
        .position("key*value")
        .color("showname", this.color)
        .shape("circle")
        .label("value", {
          offset: 12
        });
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 100%;
  position: relative;
  .ant-spin {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}
</style>