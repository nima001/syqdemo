<template>
  <div class="form-design-display">
    <div class="form-body" ref="formBody">
      <a-form :class="{anchorForm: showAnchor}" :form='form'>
         <a-spin :spinning='loading'>
          <template v-for="(item,index) in formConfig">
            <template v-if="show(item)">
              <slot v-if="isSlotComp(item)" :name="item.type" v-bind="item" />
              <component v-else :is="item.type" :key="index" v-bind="item" />
            </template>
          </template>
          <slot></slot>
        </a-spin>
      </a-form>
    </div>
    <a-anchor v-if="showAnchor" wrapperClass="form-anchor" :getContainer="() => $refs.formBody">
      <a-anchor-link v-for="(item,index) in titleBars" :href="`#${item.code}`" :title="item.name" :key="index"/>
    </a-anchor>
  </div>
</template>
<script>
import { Form, Anchor ,Spin} from "ant-design-vue";
import { components, initDataProps, mixin } from "./common.js";
import cloneDeep from 'lodash/cloneDeep';
import Bus from "@/framework/utils/EventBus";
import Vue from "vue";
export default {
  name: "form-design-display",
  components: {
    AForm: Form,
    AAnchor: Anchor,
    AAnchorLink: Anchor.Link,
    ASpin:Spin,
    ...components
  },
  mixins: [mixin],
  props: {
    // 表单配置项
    formConfig: {
      type: Array
    },
    // 表单初始化数据
    formData: {
      type: Object,
      default: () => {}
    },
    showAnchor: {
    //是否显示锚点
      type: Boolean,
      default: true
    },
    // 是否可操作页面(默认可以操作/true)
    editor:{
      type:Boolean,
      default: true
    }
  },
  data() {
    return {
      loading:true,
			form: this.$form.createForm(this, { name: 'formRender' }),
      initFormData: initDataProps(cloneDeep(this.formData), this.formConfig)
    };
  },  
  watch:{
    formData:{
      handler(v){
        this._provided.formData.data = initDataProps(v, this.formConfig)
      },
      deep:true
    },
    formConfig:{
      handler(v1,v2){
        this._provided.formData.data = initDataProps(cloneDeep(this.formData), v1)
      },
      deep:true
    },
    editor(v){
      this._provided.formData.editor = v;
      if(v){
         this._provided.formData.data = cloneDeep(this._provided.formData.copyData)
      }else{
        this._provided.formData.copyData = cloneDeep(this._provided.formData.data)
        this._provided.formData.data = initDataProps(cloneDeep(this.formData), this.formConfig)
      }
    }
  },
  provide() {
    /**
     * provide/inject绑定是不可响应的，
     * 如果传入一个可监听对象，对象属性是可响应的
     * 
     * formData  : 表单数据
     */
    const _this = this;
    return {
      formData: new Vue({
        data() {
          return { 
            // 初始化表单数据
            data:cloneDeep( _this.initFormData),
            copyData:cloneDeep( _this.initFormData),
            // 收集表单元素
            formItem:[],
            // 表单页面是否可编辑
            editor:_this.editor
          };
        }
			}),
			form:this.form,
      createCmpt(cmpt, elementBuilder) {
        return _this.createComponent(cmpt, elementBuilder);
      }
    };
  },
  computed: {
    titleBars() {
      //获取表单的title
      let bars = [];
      (function findBar(cmpts) {
        (cmpts || []).forEach(c => {
          if (c.type == "titleBar") {
            bars.push(c);
          } else if (c.children) {
            c.children.forEach(ele => findBar(ele.components));
          }
        });
      })(this.formConfig);
      return bars;
    }
  },
  mounted(){
    this.initFn();
  },
  methods: {
    initFn(){
      let _this = this;
      setTimeout(()=>{
        _this.loading = false;
      },800);
    },
    // 表单提交
    submit() {
      // console.log(this._provided.formData.data)
      return new Promise((resolve,reject)=>{
        this.collectValidateMsg().then(res=>{
          // 返回表单数据
          let data = this._provided.formData.data;
          resolve(data)
        }).catch(err=>{
          // reject表单验证错误(第一个)
          reject(err)
        });
      });
    },
    // 收集表单验证信息
    collectValidateMsg(){
      // 表单项目
      let formList = this._provided.formData.formItem;
      return Promise.all((formList || []).map(ele => {
        return ele.validateField && ele.validateField();
      }));
    },
  }
};
</script>
<style lang="less" scoped>
.form-design-display {
  position: relative;
  height: 100%;
  background: @white;
  .form-body {
    height: 100%;
    padding: 0 @content-padding-h;
    overflow-y: auto;
    .anchorForm.ant-form {
      padding-right: 200px;
      .ant-spin{
        width: 100%;
      }
    }
  }
  /deep/.form-anchor {
    position: absolute;
    top: 50px;
    right: @content-padding-h;
    width: 180px;
    padding-left: 5px;
    z-index: 4;
  }
}
</style>