<template>
  <div class="home-body">
    <div class="top">
      <!--顶部置顶项开始-->
      <div v-for="w in this.upTop" :key="w.id">
          <dragCard :draging="draging" :isiframe="isiframe" :data="w" :stickyTop="true"/>
      </div>
      <!--顶部置顶项结束-->
       <draggable
          :class="[{'dragTop':!this.topWidgets.length}]"
          :disabled="this.draggable"
          :force-fallback="true"
          :animation="200"
          v-model="topWidgets"
          :move="topmoveEnd"
          @end="dragEnd"
          @start="dragStart"
          filter=".resize-handle"
          ghostClass="ghostClass"
          :group="{ name: 'menu', put: true }"
        >
        <!--顶部非置顶项开始-->
        <div v-for="w in topWidgets" :key="w.id" :class="{ 'retain': topWidgets.length === 1 && w.display === 2 }">
          <dragCard :draging="draging" :isiframe="isiframe" :data="w"/>
        </div>
        <!--顶部非置顶项结束-->
      </draggable>
    </div>
    <div class="content" ref="content">
      <div class="left" :style="{ width: `${weightWidth}%` }">
        <!--左边置顶项开始-->
        <div v-for="w in this.leftTop" :key="w.id">
          <dragCard :draging="draging" :isiframe="isiframe" :data="w" :stickyTop="true"/>
        </div> 
        <!--左边置顶项结束-->
        <draggable
          :class="[{'dragLeft':!this.leftWidgets.length}]"
          :disabled="this.draggable"
          :force-fallback="true"
          :animation="200"
          v-model="leftWidgets"
          :move="leftmoveEnd"
          @end="dragEnd"
          @start="dragStart"
          filter=".resize-handle"
          ghostClass="ghostClass"
          :group="{ name: 'menu', put: true }"
        >
          <!--左边非置顶项开始-->
          <div v-for="w in leftWidgets" :key="w.id" :class="{ 'retain': leftWidgets.length === 1 && w.display === 2 }">
            <dragCard :draging="draging" :isiframe="isiframe" :data="w" @onDel="onClick(arguments)"/>
          </div>
          <!--左边非置顶项结束-->
        </draggable>
        <div class="move-handle" @mousedown.prevent="drag()"></div>
      </div>
      <div class="right" :style="{ width: `${100 - weightWidth}%` }">
        <!--右边置顶项开始-->
        <div v-for="w in this.rightTop" :key="w.id">
          <dragCard :draging="draging" :isiframe="isiframe" :data="w" :stickyTop="true"/>
        </div>
        <!--右边置顶项结束-->
        <draggable
          :class="[{'dragRight':!this.rightWidgets.length}]"
          :disabled="this.draggable"
          :force-fallback="true"
          :animation="200"
          v-model="rightWidgets"
          :move="rightmoveEnd"
          @end="dragEnd"
          @start="dragStart"
          filter=".resize-handle"
          ghostClass="ghostClass"
          :group="{ name: 'menu', put: true }"
        >
          <!--右边非置顶项开始-->
          <div v-for="w in rightWidgets" :key="w.id" :class="{ 'retain': rightWidgets.length === 1 && w.display === 2 }">
            <dragCard :draging="draging" :isiframe="isiframe" :data="w" @changeRowcount="changeRow()" @onDel="onClick(arguments)"/>
          </div>
          <!--右边非置顶项结束-->
        </draggable>
      </div>
    </div>
  </div>
</template>
<script>
import { Card, Icon, Dropdown, Menu } from "ant-design-vue";
import draggable from "vuedraggable";
import { showError } from "../../utils/index";
import { getLayout, getWidgets, updateLayout } from "../../api/menu";
import widgets from "../../widgets";
import dragCard from "./components/DragCard"

export default {
  components: {
    ACard: Card,
    AIcon: Icon,
    ADropdown: Dropdown,
    AMenu: Menu,
    AMenuItem: Menu.Item,
    ...widgets,
    draggable,
    dragCard,
  },
  data() {
    return {
      layout: {
        weight: undefined,
        widgets: undefined,
      },
      topWidgets: [],
      leftWidgets: [],
      rightWidgets: [],
      leftTop: [], //左边单独置顶项
      rightTop: [], //右边单独置顶项
      upTop: [], //顶部置顶项
      draggable: false,
      isiframe: false,
      draging: false,
    };
  },
  computed: {
    weightWidth() {
      if (this.layout.weight) {
        return Math.max(Math.min(this.layout.weight * 100, 70), 30);
      } else {
        return 50;
      }
    },
  },
  created() {
    this.loadLayout();
    // this.loadWidgets();
  },
  methods: {
    //获取首页需要展示的组件
    loadLayout() {
      getLayout()
        .then(({ result }) => {
          this.layout = result;
          this.rightWidgets = this.layout.widgets.filter(
            (item) => item.layout === 0
          );
          //寻找右侧置顶项
          this.rightWidgets.forEach((item, index) => {
            if (item.display === 2) {
              this.rightTop = [];
              this.rightTop.unshift(item);
              return;
            }
          });
          this.leftWidgets = this.layout.widgets.filter(
            (item) => item.layout === 1
          );
          //寻找左侧置顶项
          this.leftWidgets.forEach((item, index) => {
            if (item.display === 2) {
              this.leftTop = [];
              this.leftTop.unshift(item);
              return;
            }
          });
          this.topWidgets = this.layout.widgets.filter(
            (item) => item.layout === 2
          );
          //寻找顶部置顶项目
          this.topWidgets.forEach((item, index) => {
            if (item.display === 2) {
              this.upTop = [];
              this.upTop.unshift(item);
            }
          });
        })
        .catch((error) => {
          showError(error);
        });
    },
    dragStart(evt){
      this.draging = true;
    },
    topmoveEnd(evt) {
      this.isiframe = true;//移动打开遮罩层
      if(evt.to.classList[0]==='dragRight'&&!this.rightWidgets.length){
        evt.draggedContext.element.layout = 0;
      }else if(evt.to.classList[0]==='dragLeft'&&!this.leftWidgets.length){
        evt.draggedContext.element.layout = 1;
      }else{
        evt.draggedContext.element.layout = evt.relatedContext.element.layout;
      }
      return true;
    },
    leftmoveEnd(evt) {
      this.isiframe = true;//移动打开遮罩层
      if(evt.to.classList[0]==='dragRight'&&!this.rightWidgets.length){
        evt.draggedContext.element.layout = 0;
      }else if(evt.to.classList[0]==='dragTop'&&!this.topWidgets.length){
        evt.draggedContext.element.layout = 2;
      }else{
        evt.draggedContext.element.layout = evt.relatedContext.element.layout;
      }
      return true;
    },
    rightmoveEnd(evt) {
      this.isiframe = true;//移动打开遮罩层
      if(evt.to.classList[0]==='dragLeft'&&!this.leftWidgets.length){
        evt.draggedContext.element.layout = 1;
      }
      else if(evt.to.classList[0]==='dragTop'&&!this.topWidgets.length){
        evt.draggedContext.element.layout = 2;
      }else{
        evt.draggedContext.element.layout = evt.relatedContext.element.layout;
      }
      return true;
    },
    drag() {
      let that = this;
      let startX = event.x;
      let sw = this.layout.weight; //获取左边区域占领比例
      this.draging = true;
      document.onmousemove = function () {
        that.isiframe = true; //添加iframe遮罩层
        that.draggable = true; //禁用排序拖动
        let moveX = event.x - startX;
        //左边占比加上移动占比等于左边总占比
        that.layout.weight = Math.max(Math.min( 0.7,sw + (moveX / that.$refs.content.offsetWidth)),0.3);
      };
      document.onmouseup = function () {
        that.draging = false;
        that.isiframe = false; //取消遮罩层
        that.draggable = false; //启用排序拖动
        document.onmousemove = null;
        document.onmouseup = null;
        let data = that.layout;
        updateLayout(data)
        .then((res) => {})
        .catch((error) => {
          showError(error);
        });
      };
      return false;
    },
    dragEnd(evt) {
      this.draging = false;
      this.isiframe = false;//移动结束取消遮罩层
      this.layout.widgets = [...this.topWidgets,...this.leftWidgets,...this.rightWidgets,];
      this.layout.widgets.forEach((item, index) => {
        item.orderby = index + 1;
      });
      this.update(this.layout);
    },
    //获取全部的组件
    // loadWidgets(){
    //   getWidgets().then(res=>{
    //   })
    // }
    changeRow(){
      this.update(this.layout);
    },
    update(layout){
     let data = layout;
     updateLayout(data)
        .then((res) => {})
        .catch((error) => {
          showError(error);
        });
    },
    onClick(e) {
      if (e[0].key == 1) {
        this.layout.widgets.splice(e[1].orderby - 1, 1);
        this.layout.widgets.forEach((item, index) => {
          item.orderby = index + 1;
        });
        let data = this.layout;
        updateLayout(data)
          .then((res) => {
            if (e[1].layout === 0) {
              this.rightTop = [];
            } else if (e[1].layout === 1) {
              this.leftTop = [];
            } else if (e[1].layout === 2) {
              this.upTop = [];
            }
            this.$message.success("删除成功");
            this.loadLayout();
          })
          .catch((error) => {
            showError(error);
          });
      }
    },
  },
};
</script>
<style lang="less" scoped>
.home-body {
  padding: @layout-space-base;
  .content {
    display: flex;
    .left {
      position: relative;
      width: 50%;
      padding-right: @layout-space-base / 2;
      & .move-handle {
        position: absolute;
        width: @layout-space-base;
        height: 100%;
        top: 0;
        right: -@layout-space-base / 2;
        z-index: 999;
      }
      & .move-handle:hover{
        cursor: w-resize;
      }
    }
    .right {
      position: relative;
      padding-left: @layout-space-base / 2;
      width: 50%;
    }
  }
  .dragLeft,.dragRight{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  .retain {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }
  /deep/.ant-card-head {
    height: 41px;
    min-height: 41px;
  }
  /deep/.widget:not(.forbid):hover {
    cursor: move;
  }
  /deep/.container,
  .work,
  .search-center,
  .doc-enter,
  .my-state {
    transition: height 0.2s;
  }
  .isiframe::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 999;
  }
  .ghostClass {
    opacity: 0 !important;
  }
  .addButton,.reduceButton{
    opacity: 1;
  }
}
</style>
