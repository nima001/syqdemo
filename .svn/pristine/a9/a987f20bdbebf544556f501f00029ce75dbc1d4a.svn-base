
<template>
  <div class="g6-wrapper">
    <div class="header">
      <div class="tabs">市人力资源和社会保障局</div>
    </div>
    <div class="container-main">
      <div>
        <div class="mechanism-div">
          <div class="small-div"></div>
          <div class="small-p">变革沿革</div>
        </div>
      </div>
      <div
        style="width: 100%; height: 100%; overflow-x: auto; white-space: nowrap"
      >
        <div id="container"></div>
        <div class="timeline">
          <div class="track-list">
            <ul>
              <li v-for="(item, index) in g6timedata" :key="index">
                <i class="node-icon"><a-icon type="clock-circle" /></i>
                <span class="time">{{ item }}</span>
                <i class="last" v-if="index === g6timedata.length - 1">
                  <a-icon type="arrow-right"
                /></i>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <div class="container-reason">
      <div class="mechanism-div">
        <div class="small-div"></div>
        <div class="small-p">变更原因及依据</div>
      </div>
      <div class="reason-div">
        <p class="reason-p">
          变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因
        </p>
        <a-button>下载文件</a-button>
      </div>
    </div>
    <div class="container-footer">
      <div class="mechanism-div">
        <div class="small-div"></div>
        <div class="small-p">基本情况</div>
      </div>
    </div>
  </div>
</template>
<script>
import G6 from "@antv/g6";
import dagre from "dagre";
import { postevolution } from "@/person-shaoxing/api/analysis";
import { showError } from "@/framework/utils/index";
import { Button, Steps, Icon } from "ant-design-vue";
export default {
  components: {
    AButton: Button,
    ASteps: Steps,
    AIcon: Icon,
    AStep: Steps.Step,
  },
  data() {
    return {
      documentwidth: "",
      documentheight: "",
      g6timedata: [],
      G6data: {},
      G6dataid: null,
      maxNum: null,
    };
  },
  created() {
    this.G6data = this.$route.params.G6data;
    this.g6timedata = this.$route.params.g6timedata;
    this.G6dataid = this.$route.params.G6dataid;
    this.findMost(this.G6data.nodes);
  },
  mounted() {
    this.documentwidth =
      this.g6timedata.length * 120 + (this.g6timedata.length - 1) * 130 + 23;
    this.documentheight = this.maxNum * 60 + (this.maxNum - 1) * 130 + 60;
    this.init();
  },
  methods: {
    findMost(arr) {
      if (!arr.length) return;
      if (arr.length === 1) return 1;
      let res = {};
      let maxName,
        maxNum = 0;
      // 遍历数组
      arr.forEach((item) => {
        res[item.evolutiontime]
          ? (res[item.evolutiontime] += 1)
          : (res[item.evolutiontime] = 1);
      });
      // 遍历 res
      for (let r in res) {
        if (res[r] > maxNum) {
          maxNum = res[r];
        }
      }
      this.maxNum = maxNum;
    },
    init() {
      let that = this;
      G6.registerNode(
        "sql",
        {
          drawShape(cfg, group) {
            //边框
            const rect = group.addShape("rect", {
              attrs: {
                x: -75,
                y: -25,
                width: 120,
                height: 60,
                radius: 8,
                fill: "white",
                stroke: "#D9D9D9",
                lineWidth: 2,
                cursor: "pointer",
              },
              name: "rect-shape",
            });
            //字体
            if (cfg.orgname) {
              group.addShape("text", {
                attrs: {
                  text:
                    cfg.orgname.length > 6
                      ? cfg.orgname.slice(0, 6) + "..."
                      : cfg.orgname,
                  x: -15,
                  y: 5,
                  fill: "#E39FA0",
                  fontSize: 14,
                  textAlign: "center",
                  textBaseline: "middle",
                },
                name: "text-shape",
              });
            }
            return rect;
          },
        },
        "single-node"
      );
      const tooltip = new G6.Tooltip({
        offsetX: 10,
        offsetY: 0,
        getContent(e) {
          const outDiv = document.createElement("div");
          outDiv.style.width = "180px";
          outDiv.innerHTML = `
      <h4>tooltip</h4>
      <ul>
        <li>机构名称: ${e.item.getModel().orgname}</li>
      </ul>`;
          return outDiv;
        },
        itemTypes: ["node"],
      });
      const graph = new G6.Graph({
        container: "container",
        width: that.documentwidth,
        height: that.documentheight,
        plugins: [tooltip], // 配置 Tooltip 插件
        layout: {
          rankdir: "LR",
          type: "dagre",
          ranksep: 70,
          controlPoints: true,
        },
        defaultNode: {
          type: "sql",
        },
        defaultEdge: {
          style: {
            endArrow: true,
            lineWidth: 2,
            stroke: "#D9D9D9",
          },
        },
        nodeStateStyles: {
          selected: {
            stroke: "#d60002",
            fill: "#d60002",
            //阴影
            // shadowColor: "#000000",
            // shadowBlur: 6,
          },
        },
        modes: {
          default: [
            //点击
            "click-select",
          ],
        },
        fitView: true,
        autoPaint: true,
      });
      // 当 click-select 选中的元素集合发生变化时将会触发下面时机事件，e 中包含相关信息
      graph.on("nodeselectchange", (e) => {
        // 当前操作的 item
        if (e.select) {
          let data = {
            evolutiontime: e.target._cfg.model.evolutiontime,
            orgid: e.target._cfg.model.orgid,
          };
          postevolution(data)
            .then((res) => {
              console.log(res);
            })
            .catch((err) => {
              showError(err);
            });
        }
      });
      graph.data(that.G6data);
      graph.render();
    },
  },
};
</script>
<style scoped lang="less">
.g6-wrapper {
  margin: 10px;
  display: flex;
  flex-direction: column;
  background: #ffffff;
  .header {
    padding: @layout-space-base @content-padding-h;
    height: 50px;
    border-bottom: 1px solid #ededed;
    align-items: center;
    display: flex;
    .tabs {
      font-size: 18px;
      font-weight: 800;
      color: #666666;
    }
  }
  .mechanism-div {
    padding: @layout-space-base @content-padding-h;
    display: flex;
    align-items: center;
    .small-div {
      width: 5px;
      height: 20px;
      background: @primary-color;
    }
    .small-p {
      font-size: 20px;
      margin-left: 5px;
    }
  }
  .container-main {
    #container {
      width: 100%;
    }
    .timeline {
      width: 100%;
      height: 60px;
      padding: 10px;
      .track-rcol {
        width: 100%;
      }
      .track-list ul {
        display: flex;
      }
      .track-list li {
        position: relative;
        line-height: 16px;
        border-bottom: 2px solid #d60002;
        color: #d60002;
        width: 250px;
      }
      li:last-child {
        width: 200px;
      }
      .track-list li .node-icon {
        position: absolute;
        color: #d60002;
        left: 50px;
        top: 50%;
        width: 10px;
        height: 10px;
        svg {
          background: white;
        }
      }
      .last {
        color: #d60002;
        position: relative;
        top: 9px;
        left: 165px;
      }
      .track-list li .time {
        position: relative;
        top: 26px;
        left: 42px;
      }
    }
  }
  .container-reason {
    border-bottom: 1px solid #ededed;
    .reason-div {
      padding: 0 @layout-space-base @layout-space-base @content-padding-h;
      .reason-p {
      }
    }
  }
  .container-footer {
  }
}
</style>