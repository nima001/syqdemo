<template>
  <div class="workflow">
    <a-form-item :label="property.showName?property.name:''" :required="property.require">
      <a-input-number
        :style="property.showName?'':'margin-top:29px;'"
        style="width:100%"
        :placeholder="property.placehold"
        :disabled="property.editable?false:true"
        @change="changeHandler"
        @blur="blur"
        v-decorator="[
          `${property.code}`,
          {
            rules: [{required: property.require, validator:validateRules}],
            initialValue: $store.getters.formData[property.code]||$store.getters.formData[property.code]==0?$store.getters.formData[property.code]:''
          }
        ]"
      ></a-input-number>
    </a-form-item>
    <stamp
      :property="property"
      @imgUrl="getStamp"
      v-if="property.signcomponent.signcode && property.signcomponent.editable"
    ></stamp>
    <a-form-item class="stampNotice" v-if="!imgUrl && property.signcomponent.signcode">
      <a-input
        type="hidden"
        v-decorator="[
          `${property.signcomponent.code}`,
          {
            rules: [{required: property.signcomponent.require, message: `请选择签章!`}],
            initialValue: stamp
          }
        ]"
      ></a-input>
    </a-form-item>
    <div class="seal" v-if="imgUrl">
      <img :src="imgUrl" />
    </div>
  </div>
</template>
<script>
import Stamp from "./stampComponent/Stamp";
import { getStampInfo } from "@/workflow/api/stamplist";
import { uiConfigsCookies } from "@/framework/utils/auth";
import { getUserInfo } from "@/workflow/api/workflow";
import { showError } from "@/framework/utils/index";
import "@/workflow/style/workflow.css";
import { Form, Input, InputNumber } from "ant-design-vue";
export default {
  name: "NumberBox",
  data() {
    return {
      uiConfigs: uiConfigsCookies(),
      code: this.property["code"],
      formData: this.$store.getters.formData,
      imgUrl: null,
      stamp: null
    };
  },
  props: {
    property: {
      type: Object,
      required: true
    },
    bindform: {
      type: Object,
      required: true
    },
    typecode: {
      type: Object
    },
    relateControls: {
      type: Array
    },
    resourceId: {
      type: String
    }
  },
  components: {
    AFormItem: Form.Item,
    AInput: Input,
    AInputNumber: InputNumber,
    Stamp
  },
  created() {
    if (!this.formData[this.code] && this.formData[this.code] !== 0) {
      if (!this.property.require) {
        this.formData[this.code] = null;
        this.$store.commit({
          type: "SET_FORM_DATA",
          data: this.formData
        });
      }
      if (this.property.defaultType == 2) {
        this.changeHandler(this.property.defaultContent);
        this.relateControl(this.property.defaultContent);
      }
    } else {
      this.relateControl(this.formData[this.code]);
    }
    if (this.formData[this.property.signcomponent.code]) {
      //获取签章图片
      getStampInfo(this.formData[this.property.signcomponent.code])
        .then(res => {
          if (res.code == "success") {
            this.imgUrl =
              this.uiConfigs["api.url"] +
              "/file/v1/download" +
              "?uri=" +
              encodeURIComponent(res.result.pictureurl);
          }
        })
        .catch(err => {
          showError(err);
        });
    }
  },
  methods: {
    //校验
    validateRules(rule, value, callback) {
      if (rule.required) {
        if (value || value == 0) {
          if (this.property.validate && this.property.validate !== "range") {
            let range = this.property.validate
              .slice(6, this.property.validate.length - 1)
              .split(",");
            let min = parseInt(range[0]);
            let max = parseInt(range[1]);
            if (min <= value && value <= max) {
              callback();
            } else {
              callback(
                "输入数字大小为" + min + "~" + max + "之间，请检查后重新输入！"
              );
            }
          } else {
            callback();
          }
        } else {
          callback("请输入" + this.property.name + "！");
        }
      } else {
        callback();
      }
    },
    changeHandler(e) {
      this.$store.getters.formData[this.code] = e;
      this.$store.commit({
        type: "SET_FORM_DATA",
        data: this.$store.getters.formData
      });
      this.relateControl(e);
    },
    //关联控件变化
    relateControl(e) {
      let formData = {};
      let flag = false;
      this.relateControls.forEach(item => {
        if (item.relate == this.code) {
          flag = true;
          if (item.pcode) {
            if (this.$store.getters.formData[item.pcode]) {
              this.$set(
                this.$store.getters.formData[item.pcode],
                item.code,
                item.type == "plus" ? e + item.num : e - item.type
              );
            } else {
              let obj = {};
              obj[item.code] =
                item.type == "plus" ? e + item.num : e - item.type;
              this.$store.getters.formData[item.pcode] = obj;
            }
          } else {
            this.$store.getters.formData[item.code] =
              item.type == "plus" ? e + item.num : e - item.type;
          }
        }
      });
      if (flag) {
        this.bindform.resetFields();
        formData = Object.assign({}, this.$store.getters.formData);
        this.$store.commit({
          type: "SET_FORM_DATA",
          data: formData
        });
      }
    },
    //失去焦点请求数据来源
    blur() {
      if (this.typecode) {
        let flag = false;
        for (var id in this.typecode) {
          let orgUserVo = {};
          this.typecode[id].forEach(code => {
            if (code == this.property.code) {
              flag = true;
              orgUserVo.resourceid = this.resourceId;
              orgUserVo.formatCfgId = parseInt(id);
              orgUserVo.modelinstanceid = parseInt(
                this.$route.query.modelinstanceid
              );
              orgUserVo.objectMap = {};
              this.typecode[id].forEach(code => {
                if (this.$store.getters.formData[code]) {
                  orgUserVo.objectMap[code] = this.$store.getters.formData[
                    code
                  ];
                }
              });
            }
          });
          if (JSON.stringify(orgUserVo.objectMap) == "{}") flag = false;
          if (flag) {
            getUserInfo(orgUserVo)
              .then(res => {
                if (res.code == "success") {
                  if (JSON.stringify(res.result) !== "{}") {
                    this.bindform.resetFields();
                    let obj = {};
                    for (var a in res.result) {
                      if (res.result[a] || res.result[a] == 0) {
                        obj[a] = res.result[a];
                      }
                    }
                    this.formData = Object.assign(
                      {},
                      this.$store.getters.formData,
                      // obj
                      // TOIDO 
                      res.result
                    );
                    this.$store.commit({
                      type: "SET_FORM_DATA",
                      data: this.formData
                    });
                  }
                }
              })
              .catch(err => {
                showError(err);
              });
            flag = false;
          }
        }
      }
    },
    //获取签章
    getStamp(img) {
      if (img) {
        this.imgUrl = img;
        this.stamp = img;
      }
    }
  }
};
</script>
