<template>
  <a-modal :visible="true" :footer="null" width="998px" @cancel="cancel">
    <p class="title">{{user.username}}的请假记录</p>
    <div class="total">
      <span>剩余年休假：</span>
      <span class="num">{{total.annual}}次</span>
      <span style="margin-left: 25px;">剩余调休假：</span>
      <span class="num">{{total.compensatory}}次</span>
    </div>
    <div class="content">
      <div class="table">
        <a-table rowKey="dutytime" :loading="loading"  :columns="columns" :data-source="dataSource"  :pagination="false"></a-table>
      </div>
      <div class="pagination">
        <a-pagination show-size-changer :total="pagination.total" :page-size="pagination.pagesize"
         :default-current="pagination.pagenum" :show-total="(total) => `共 ${total} 条`" 
         @change="onChange" @showSizeChange="onShowSizeChange">
        </a-pagination>
      </div>
    </div>
  </a-modal>
</template>

<script>
import { Modal, Table, Pagination } from "ant-design-vue";
import { assign, cloneDeep } from "lodash";
import {leaveQuery,holidays} from "@/hall/api/leave";
import { showError } from "@/framework/utils/index";
export default {
  components: {
    AModal: Modal,
    ATable: Table,
    APagination: Pagination
  },
  data() {
    return {
      total:{ annual:0, compensatory:0},
      loading: false,
      dataSource: [],
      columns: [
        {
          title: "请假类型",
          dataIndex: "leavetype",
          customRender: this.dictRender("usermanage.user.leavetype"),
        },
        {
          title: "开始时间",
          dataIndex: "start",
        },
        {
          title: "结束时间",
          dataIndex: "end",
        },
        {
          title: "请假时长",
          dataIndex: "leavedays",
          scopedSlots: { customRender: "leavedays" },
        },
      ],
      pagination: {
        pagesize: 10,
        pagenum: 1,
        total: 0,
        needtotal: true
      }
    };
  },
  props:{
    user:{
      type:Object,
      required:true
    }
  },
  mounted(){
    this.getData();
    this.getTotal();
  },
  methods: {
    getTotal(){
      holidays(this.user.userid)
        .then(res=>{
          this.total=res.result
        })
        .catch(err => {
          showError(err);
        })
        .finally(() => {
          this.loading = false;
        });
    },
    getData() {
      this.loading = true;
      let query = {
        userid: this.user.userid,
        ...this.pagination
      };
      leaveQuery(query)
        .then(({result:{ pagesize, pagenum, total, rows=[]}}) => {
          assign(this.pagination, { pagesize, pagenum, total });
          rows.forEach((item) => {
            if (item.starttimes == 1) {
              item.start=item.startdate.slice(0, 11)+'上午'
            } else {
              item.start=item.startdate.slice(0, 11)+'下午'
            }
            if (item.endtimes == 1) {
              item.end=item.enddate.slice(0, 11)+'上午'
            } else {
              item.end=item.enddate.slice(0, 11)+'下午'
            }
          });
          this.dataSource = rows;
        })
        .catch(err => {
          showError(err);
        })
        .finally(() => {
          this.loading = false;
        });
    },
    cancel() {
      this.$emit("input", false);
    },
    onChange(pagenum, pagesize) {
      assign(this.pagination, { pagesize, pagenum });
    },
    onShowSizeChange(current, pagesize) {
      assign(this.pagination, { pagenum: 1, pagesize });
    },
    dictRender(key, attr) {
      return (text, row, index) => {
        let v = this.$store.getters.dictKey(key || row[attr], text);
        text = (v && v.text) || "";
        return <span title={text}>{text}</span>;
      };
    }
  }
};
</script>
<style lang='less' scoped>
.title {
  font-size: 18px;
  color: @black;
  font-weight: bold;
  text-align: center;
  margin: 0px;
  padding: @content-padding-v 0px;
}
.total {
  padding: @content-padding-v 0px;
  display: flex;
  .num {
    color: @primary-color;
  }
}
.content {
  max-height: 600px;
  display: flex;
  flex-direction: column;
  .table {
    flex-shrink: 1;
    overflow-y: auto;
    padding: @content-padding-v 0px;
  }
  .pagination {
    text-align: right;
    padding: @content-padding-v 0px;
  }
}
</style>