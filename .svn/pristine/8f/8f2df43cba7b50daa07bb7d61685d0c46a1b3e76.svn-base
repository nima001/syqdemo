<!-- 接口管理>用户服务申请 -->
<template>
  <a-layout class="open-layout">
    <div class="body">
      <div>
        <a-steps :current="current">
          <a-step title="选择接口" description />
          <a-step title="填写资料" description />
          <a-step title="完成" description />
        </a-steps>
        <a-divider />
      </div>
      <a-alert
        type="error"
        :message="faildesc"
        banner
        v-if="hasPermit('InterfaceApply') && $route.query.state == 4 && allow"
      />
      <div v-if="$route.query.state == 2 || $route.query.state == 3" class="succeed">
        <p>接口地址</p>
        <p>{{ $route.query.url }}</p>
      </div>
      <div v-show="current == 0">
        <div>
          <!-- <article>
            <a-divider type="vertical" />
            <h5>用户信息</h5>
          </article>-->

          <p class="applytext">请选择需要申请的接口：</p>
          <div class="tools">
            <a-select
              v-model="actionstate"
              style="width: 120px"
              @change="getActionList"
              class="tsearch"
            >
              <a-select-option value="0">所有接口</a-select-option>
              <a-select-option value="1">选中接口</a-select-option>
              <a-select-option value="2">待审核接口</a-select-option>
            </a-select>
            <a-select
              v-model="actiontag"
              style="width: 120px"
              @change="getActionList"
              class="tsearch"
            >
              <a-select-option value>接口标签</a-select-option>
              <a-select-option
                :value="key"
                v-for="(value, key) in actiontagsMap"
                :key="key"
              >{{value}}</a-select-option>
            </a-select>
            <a-input
              v-model="namelike"
              placeholder="请输入接口名称"
              style="width: 350px"
              class="tsearch"
              @pressEnter="getActionList"
            />
            <a-button type="primary" @click="getActionList" class="tsearch">搜索</a-button>
            <a-button type="primary" @click="resetsearch" class="tsearch">重置</a-button>
          </div>
          <a-table
            :row-selection="{ selectedRowKeys: selectedRowKeys, onChange: onSelectChange }"
            :columns="columns"
            :data-source="data"
            rowKey="id"
          >
            <span slot="name" slot-scope="text, record">
              <p>
                <span class="actionname">{{text}}</span>
                <span @click="actionDetail(record)" class="actiondetil">详情</span>
              </p>
            </span>

            <span slot="acstate" slot-scope="text">
              <span>{{stateMap[text]}}</span>
            </span>
          </a-table>
          <!-- <a-spin tip="loading..." :spinning="spinning">
            <section class="UserService">
              <a-popover title="接口详情" placement="bottomLeft" v-for="item in data" :key="item.id">
                <template slot="content">
                  <ul class="apidetail">
                    <li>模块名称：{{ item.module }}</li>
                    <li>接口名称：{{ item.name }}</li>
                    <li>接口地址：{{ item.url }}</li>
                  </ul>
                </template>
                <a-checkbox
                  :class="{selected:item.selected == 1 && item.checked == true}"
                  :disabled="hasPermit('InterfaceAudit') || allow"
                  :value="item.code"
                  v-model="item.checked"
                  @change="handleChange"
                >{{ item.name }}</a-checkbox>
              </a-popover>
            </section>
          </a-spin>-->
          <div>
            <article>
              <!-- <a-divider type="vertical" /> -->
              <!-- <h5>申请说明</h5> -->
              <p class="applytext">用途说明：</p>
            </article>
            <a-form :form="form">
              <a-form-item>
                <a-textarea
                  :rows="4"
                  :readOnly="allow"
                  v-decorator="[
                'desc',
                {
                  rules: [{ required: true, message: '请输入用途说明' }],
                  initialValue: descform.desc,
                },
              ]"
                />
              </a-form-item>
            </a-form>
          </div>
        </div>
        <!-- <a-button @click="back">返回</a-button> -->
        <div class="nextstepdiv">
          <a-button type="primary" class="nextstep" @click="nextstep">下一步</a-button>
        </div>
      </div>

      <!-- <a-button @click="back">返回</a-button>
      <a-button type="primary" @click="submit" v-if="hasPermit('InterfaceApply') ">{{ bar }}</a-button>-->
      <a-button
        type="primary"
        class="agree"
        :disabled="$route.query.state == 2 || $route.query.state == 3"
        @click="agreedApply"
        v-if="hasPermit('InterfaceAudit')"
      >
        <a-icon type="check" />同意申请
      </a-button>
      <a-button
        type="danger"
        @click="refuseApply"
        :disabled="$route.query.state == 2 || $route.query.state == 3"
        v-if="hasPermit('InterfaceAudit')"
      >
        <a-icon type="close" />拒绝申请
      </a-button>
      <!-- 第二步 智能表单 -->
      <div v-show="current == 1">
        <h2>基本信息</h2>
        <a-form :form="step2form" layout="inline" labelAlign="left">
          <a-row :gutter="32">
            <a-col v-for="i in 4" :key="i" :span="12">
              <a-form-item
                :label="`参数 ${i}:`"
                :labelCol="{span: 5}"
                :wrapperCol="{span: 14}"
                style="width:100%"
              >
                <a-input
                  v-decorator="[
                `info${i}`,
                {
                  rules: [
                    {
                      required: true,
                      message: '请输入相关信息',
                    },
                    
                  ],
                  initialValue: formdata.info,
                },
              ]"
                  placeholder="请输入"
                />
              </a-form-item>
            </a-col>
          </a-row>
        </a-form>
        <a-form :form="otherinfoform" layout="inline" labelAlign="left">
          <h2 style="margin-top:10px">其他信息</h2>
          <a-row :gutter="32">
            <a-col :span="24">
              <a-form-item
                label="ip限制"
                :labelCol="{span: 5}"
                :wrapperCol="{span: 14}"
                style="width:50%"
              >
                <a-input
                  v-decorator="[
                `ip`,
                {
                  rules: [
                    {
                      required: true,
                      message: '请输入ip地址',
                    },
                  ],
                  initialValue: formdata.ip,
                },
              ]"
                  placeholder="请输入ip地址"
                />
              </a-form-item>
            </a-col>
            <span style="margin-left:10%">多个IP用小写的“;”分隔，如： 192.168.1.1；192.168.1.2</span>
            <a-col :span="24">
              <a-form-item
                label="附件"
                :labelCol="{span: 5}"
                :wrapperCol="{span: 14}"
                style="width:50%"
              >
                <a-upload
                  action="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                  :multiple="true"
                  :file-list="fileList"
                  @change="fileuploadChange"
                >
                  <a-button style="margin-top:10px">
                    <a-icon type="upload" />上传附件
                  </a-button>
                </a-upload>
              </a-form-item>
            </a-col>
          </a-row>
        </a-form>
        <div class="formstepdiv">
          <a-button type="primary" class="nextstep" @click="laststep">上一步</a-button>
          <a-button type="primary" class="nextstep" @click="submitstep">提交申请</a-button>
        </div>
      </div>
      <!-- 第三步 提交成功 -->
      <div v-show="current == 2">
        <div class="successInfo">
          <a-icon type="check-circle" class="tip-icon" theme="filled" />
          <h2>提交成功</h2>
          <h5>请等待审核</h5>
          <a-button type="primary" class="skiopstep" @click="goManage">{{skiptime}}秒后 进入应用服务中心</a-button>
        </div>
      </div>
    </div>
    <a-modal
      :centered="true"
      v-model="refuseVisible"
      :footer="null"
      :bodyStyle="{ padding: '15px' }"
    >
      <a-form :form="refusedForm">
        <a-form-item label="拒绝说明">
          <a-textarea
            :rows="4"
            v-decorator="[
              'faildesc',
              {
                rules: [{ required: true, message: '请输入拒绝说明' }],
              },
            ]"
          />
        </a-form-item>
        <div class="refused">
          <a-button type="danger" style="margin-right: 20px" @click="confirm">确认</a-button>
          <a-button type="danger" @click="cancel">取消</a-button>
        </div>
      </a-form>
    </a-modal>

    <a-modal
      :centered="true"
      title="接口详情"
      v-model="actionVisible"
      :footer="null"
      :bodyStyle="{ height: '500px', padding: '24px' }"
    >
      <p>
        <span>接口名称:</span>
        {{ actionData.name }}
      </p>
      <p>
        <span>模块名称:</span>
        {{ actionData.module }}
      </p>
      <p>
        <span>接口地址:</span>
        {{ actionData.url }}
      </p>
      <p>
        <span>接口权限类型:</span>
        {{ actionstateMap[actionData.permit]}}
      </p>
      <p>
        <span>接口标签:</span>
        {{ actionData.tags }}
      </p>
      <p>
        <span>接口版本号:</span>
        {{ actionData.version }}
      </p>
    </a-modal>
  </a-layout>
</template>

<script>
import {
  Layout,
  Button,
  Divider,
  Popover,
  Checkbox,
  Input,
  Form,
  Modal,
  Select,
  Icon,
  Spin,
  Alert,
  notification,
  Steps,
  Table,
  Row,
  Col,
  Upload
} from "ant-design-vue";
import {
  appliedList,
  apiModify,
  apiVerify,
  apiVerifyList,
  serviceDesc,
  serviceData
} from "../../api/service";
import { showError } from "../../../framework/utils";
export default {
  data() {
    return {
      bar: this.$route.query.state == 0 ? "申请" : "修改",
      form: this.$form.createForm(this),
      refusedForm: this.$form.createForm(this),
      data: [],
      desc: "",
      // 选中的选项集合
      checkList: [],
      // 是否允许修改禁用状态
      allow: false,
      // 勾选的列表
      apiIdList: [],
      // 拒绝申请时的弹框
      refuseVisible: false,
      spinning: true,
      // 失败原因
      faildesc: "",
      current: 0,
      columns: [
        {
          title: "接口名称",
          dataIndex: "name",
          width: "35%",
          scopedSlots: { customRender: "name" }
        },
        {
          title: "标签",
          dataIndex: "age",
          width: "15%"
        },
        {
          title: "接口地址",
          dataIndex: "address",
          width: "40%"
        },
        {
          title: "状态",
          dataIndex: "state",
          width: "10%",
          scopedSlots: { customRender: "acstate" },
          customCell: (record, rowIndex) => {
            //在此处可以修改单元格中的样式
            return { style: this.colors(record.state) }; //return 想要设置的样式
          }
        }
      ],
      //选择的keys
      selectedRowKeys: [],
      apiSelectKeys: [],
      actionstate: "0",
      actiontag: "",
      actiontagsMap: [],
      namelike: "",
      actionVisible: false,
      actionData: {},
      stateMap: {
        "0": "未开通",
        "1": "待审核",
        "2": "使用中",
        "4": "审核失败"
      },
      actionstateMap: {
        "0": "公开",
        "1": "登录",
        "2": "授权"
      },
      //智能表单
      step2form: this.$form.createForm(this),
      otherinfoform: this.$form.createForm(this),
      fileList: [
        {
          uid: "-1",
          name: "xxx.png",
          status: "done",
          url:
            "https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png"
        }
      ],
      skiptime: 10,
      timer: null,
      formdata: {},
      descform: {}
    };
  },
  activated() {
    this.current = 0;
    this.data = [];
    this.checkList = [];
    this.apiIdList = [];
    this.apiSelectKeys = [];
    this.form.resetFields();
    this.step2form.resetFields();
    this.otherinfoform.resetFields();
    this.getAppliedList(this.$route.query.code);
    this.getActionDesc();
  },
  methods: {
    // 调取已申请的api接口
    getAppliedList(code) {
      var data = {
        appid: this.$store.getters.appInfo.id,
        name: this.namelike,
        module: code,
        serviceId: this.$route.query.serviceId,
        tag: this.actiontag,
        type: this.actionstate
      };
      appliedList(data)
        .then(res => {
          this.spinning = false;
          let result = res.result;
          if (result) {
            // let type = result.some(function(item) {
            //   return item.selected != undefined;
            // });
            // if (type) {
            //   this.allow = true;
            // }
            let array = [];
            result.forEach(item => {
              if (item.state != 0) {
                array.push(item.id);
              }
            });
            this.apiSelectKeys = array;
            this.selectedRowKeys = [...this.apiSelectKeys];
          }
          // 审核人员
          if (this.hasPermit("InterfaceAudit")) {
            let arr = result.devApiVos || [];
            this.data = arr.filter(function(item) {
              return item.selected == 1;
            });
          } else {
            // 开发人员
            this.data = result;
          }
          // console.log(this.data);
          this.faildesc = result.faildesc;
          this.desc = result.desc;
        })
        .catch(err => {
          showError(err);
        });
    },
    // 状态
    handleChange(e) {
      this.apiIdList = [];
      this.checkList = this.data.filter(item => {
        return item.checked;
      });
      this.checkList.forEach(item => {
        this.apiIdList.push(item.id);
      });
    },
    // 同意申请
    agreedApply() {
      var data = {
        faildesc: "",
        appid: this.$store.getters.appInfo.id,
        serviceId: this.$route.query.serviceId,
        state: 1
      };
      apiVerify(data)
        .then(res => {
          this.$notification.success({
            message: "提示",
            description: "审核完成",
            duration: 1.5
          });
          setTimeout(() => {
            this.$router.push("/dev/manageapp");
          }, 2000);
        })
        .catch(err => {
          showError(err);
        });
    },
    // 拒绝申请弹框
    refuseApply() {
      this.refuseVisible = true;
    },
    // 拒绝确认
    confirm() {
      this.refusedForm.validateFields((err, values) => {
        if (!err) {
          var data = {
            faildesc: values.faildesc,
            appid: this.$store.getters.appInfo.id,
            serviceId: this.$route.query.serviceId,
            state: 0
          };
          apiVerify(data)
            .then(res => {
              this.$notification.success({
                message: "提示",
                description: "审核完成",
                duration: 1.5
              });
              this.refuseVisible = false;
              setTimeout(() => {
                this.$router.push("/dev/manageapp");
              }, 2000);
            })
            .catch(err => {
              showError(err);
            });
        }
      });
    },
    // 关闭拒绝弹框
    cancel() {
      this.refuseVisible = false;
    },
    // 申请/修改操作
    submit() {
      //this.$route.query.state == 0 ? "申请" : "修改",
      if (this.$route.query.state != 0) {
        if (this.allow == true) {
          this.allow = false;
          this.bar = "申请";
          return false;
        } else {
          this.handleChange();
        }
      }
      if (this.apiIdList.length < 1) {
        showError({ message: "请至少勾选一项接口" });
        return;
      }
      this.form.validateFields((err, values) => {
        if (!err) {
          var data = {
            apiIdList: this.apiIdList,
            appId: this.$store.getters.appInfo.id,
            serviceId: this.$route.query.serviceId,
            desc: values.desc
          };
          apiModify(data)
            .then(res => {
              let desc =
                this.$route.query.state == 0
                  ? "申请已提交，待审核"
                  : "修改成功";
              this.$notification.success({
                message: "提示",
                description: desc,
                duration: 1.5
              });
              setTimeout(() => {
                this.$router.push("/dev/manageapp");
              }, 2000);
            })
            .catch(err => {
              showError(err);
            });
        }
      });
    },
    // 返回
    back() {
      this.$router.push("/dev/manageapp");
    },
    //下一步操作
    nextstep() {
      if (
        this.selectedRowKeys.sort().toString() ==
        this.apiSelectKeys.sort().toString()
      ) {
        showError({ message: "申请接口未改变或未勾选" });
        return;
      }
      this.form.validateFields((err, values) => {
        if (!err) {
          this.desc = values.desc;
          this.getActionData();
          this.current += 1;
        }
      });
    },
    //选择修改
    onSelectChange(selectedRowKeys) {
      this.selectedRowKeys = selectedRowKeys;
    },
    //展示接口详细信息
    actionDetail(data) {
      console.log(data);
      this.actionData = data;
      this.actionVisible = true;
    },
    //获取action列表事件
    getActionList() {
      this.getAppliedList(this.$route.query.code);
    },
    //重置
    resetsearch() {
      this.namelike = "";
      (this.actiontag = ""),
        (this.actionstate = "0"),
        this.getAppliedList(this.$route.query.code);
    },
    // colors
    colors(state) {
      switch (state) {
        case 0:
          return "color:#999 !important";
        case 1:
          return "color:#faad14";
        case 2:
          return "color:#0dbc79";
        case 3:
          return "color:#0dbc79";
        case 4:
          return "color:#f5222d";
        default:
          return;
      }
    },
    //文件上傳改变
    fileuploadChange(info) {
      let fileList = [...info.fileList];

      // 1. Limit the number of uploaded files
      //    Only to show two recent uploaded files, and old ones will be replaced by the new
      fileList = fileList.slice(-2);

      // 2. read from response and show file link
      fileList = fileList.map(file => {
        if (file.response) {
          // Component will show file.url as link
          file.url = file.response.url;
        }
        return file;
      });

      this.fileList = fileList;
    },
    //上一步
    laststep() {
      this.current -= 1;
    },
    //提交
    submitstep() {
      //提交操作
      let infodata = "";
      this.step2form.validateFields((err, values) => {
        if (!err) {
          infodata = JSON.stringify(values);
        }
      });
      let ip = "";
      this.otherinfoform.validateFields((err, values) => {
        if (!err) {
          ip = values.ip;
        }
      });

      var data = {
        apiIdList: this.selectedRowKeys,
        appId: this.$store.getters.appInfo.id,
        serviceId: this.$route.query.serviceId,
        desc: this.desc,
        data: infodata,
        ip: ip
      };
      console.log(data);
      apiModify(data)
        .then(res => {
          this.skiptime = 10;
          clearInterval(this.interval);
          this.current += 1;
          this.interval = window.setInterval(createtime => {
            this.skiptime = this.skiptime - 1;
          }, 1000);
          this.timer = setTimeout(() => {
            this.$router.push({ path: "/dev/manageapp" });
          }, 10000);
        })
        .catch(err => {
          showError(err);
        });
    },
    goManage() {
      clearInterval(this.timer);
      window.clearInterval(this.interval);
      this.$router.push({ path: "/dev/manageapp" });
    },
    //获取状态信息
    getActionDesc() {
      let data = {
        appid: this.$store.getters.appInfo.id,
        serviceid: this.$route.query.serviceId
      };
      serviceDesc(data)
        .then(res => {
          this.descform = res.result;
        })
        .catch(err => {
          showError(err);
        });
    },
    //获取智能表单数据及ip数据
    getActionData() {
      let data = {
        appid: this.$store.getters.appInfo.id,
        serviceid: this.$route.query.serviceId
      };
      serviceData(data)
        .then(res => {
          this.formdata = res.result;
        })
        .catch(err => {
          showError(err);
        });
    }
  },

  components: {
    ALayout: Layout,
    ADivider: Divider,
    AButton: Button,
    ACheckbox: Checkbox,
    AInput: Input,
    ATextarea: Input.TextArea,
    ASelect: Select,
    ASelectOption: Select.Option,
    AIcon: Icon,
    APopover: Popover,
    AForm: Form,
    AFormItem: Form.Item,
    AModal: Modal,
    ASpin: Spin,
    AAlert: Alert,
    ASteps: Steps,
    AStep: Steps.Step,
    ATable: Table,
    ARow: Row,
    ACol: Col,
    AUpload: Upload
  }
};
</script>
<style lang="less" scoped>
.open-layout {
  padding: 10px;
  height: 100%;
  .body {
    width: 100%;
    height: 100%;
    padding: 8px 10%;
    margin: 0 auto;
    overflow-y: auto;
    background: #fff;
    .tools {
      display: flex;
      justify-content: flex-end;
      // margin-right: 100px;
      margin-bottom: 10px;
      .tsearch {
        margin: 0 3px;
      }
    }
    .faildesc {
      margin: 10px 0;
      color: red;
    }
    .succeed {
      padding: 15px 10px;
      margin: 5px 0;
      background-color: #f6f6f6;
      color: #171717;
    }
    p {
      margin-bottom: 0;
      .actionname {
        font-size: 15px;
      }
      .actiondetil {
        font-size: 10px;
        padding-top: 10px;
        color: @primary-color;
        cursor: pointer;
        margin-left: 10px;
      }
    }
    .apidetail {
      li {
        line-height: 1.5;
        font-size: 14px;
        color: #666;
      }
    }
    .applytext {
      font-size: 16px;
      margin-bottom: 5px;
      margin-left: 5px;
    }
    .nextstepdiv {
      width: 400px;
      margin: 0 auto;
      .nextstep {
        margin-top: 5px;
        width: 400px;
      }
    }
    .formstepdiv {
      width: 900px;
      margin: 25px auto;
      .nextstep {
        margin-top: 5px;
        width: 400px;
      }
    }
    .successInfo {
      margin: 0 auto;
      width: 200px;
      text-align: center;
      .tip-icon {
        font-size: 100px;
        color: #80c342;
      }
      .skiopstep {
        margin-right: 0px;
      }
    }
    > div {
      margin-top: 30px;
      section {
        min-height: 10vh;
        max-height: 30vh;
        overflow-y: auto;
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        .selected {
          /deep/.ant-checkbox-checked .ant-checkbox-inner {
            background: #0dbc79;
            border-color: #0dbc79;
          }
        }
      }
      .inquire {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        height: 60px;
        margin-bottom: 14px;
        .ant-btn {
          margin-top: 0;
          width: 60px;
          height: 32px;
          margin-right: 13px;
        }
        .inps {
          display: flex;
          justify-content: flex-end;
          width: 100%;
        }
      }
    }
    .ant-btn {
      margin-top: 30px;
      margin-right: 30px;
    }
    article {
      display: flex;
      h5 {
        color: @primary-color;
        font-size: 18px;
        margin-bottom: 30px;
      }
      .ant-divider {
        width: 3px;
        height: 20px;
        background-color: @primary-color;
        margin-top: 5px;
      }
    }
    /deep/ .ant-table-pagination.ant-pagination {
      margin: 10px 0;
    }
    .ant-checkbox-wrapper {
      padding: 10px;
      margin: 0 15px 15px 0;
      width: 190px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      background-color: #f6f6f6;
    }
    .ant-row,
    .ant-form-item {
      margin-bottom: 10px;
    }
    .agree {
      color: #0dbc79;
      background: #f5f5f5;
      border: 1px solid #f5f5f5;
      &:hover {
        color: #fff;
        background: #0dbc79;
        border: 1px solid #0dbc79;
      }
    }
  }
}
</style>
