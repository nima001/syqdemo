<template>
  <div class="org-staffcase">
    <a-row :gutter="20">
      <a-col :span="24">
        <a-table 
          :rowKey="generateRowKey"
          :columns="columns" 
          :dataSource="tableData" 
          :pagination="false"
          :bordered="true"
          >
        </a-table>
      </a-col>
    </a-row>
  </div>
</template>

<script>
/*
**不同地区同类机构编制情况对比
*/
import { Row, Col, Table } from "ant-design-vue";
import { createReportItem } from "@/person-shaoxing/utils/index";
export default {
  props: {
    data: Array
  },
  components: {
    ARow: Row,
    ACol: Col,
    ATable: Table
  },
  computed: {
    level(){
      return this.$store.getters.dict('usermanage.org.level');
    },
    businesstype(){
      return this.$store.getters.dict('usermanage.org.institutionssort');
    },
    politicallevel(){
      return this.$store.getters.dict('usermanage.org.politicallevel');
    }
  },
  watch: {
    level() {
      this.initData();
    },
    businesstype() {
      this.initData();
    },
    politicallevel(){
      this.initData();
    }
  },
  data() {
    return {
      columns: [],
      xzData: [
        {key: 'level', type: '机构级别', render: this.getDictRender('usermanage.org.politicallevel')},
        {key: 'internalorgnum', type: '内设机构数'},
        {key: 'publiccompile', type: '行政编制数'},
        {key: 'publicperson', type: '行政实有人员数'},
        {key: 'logisticscompile', type: '后勤编制数'},
        {key: 'logisticsperson', type: '后勤人员实有数'},
        {key: 'departmentleaderplan', type: '部门领导职数'},
        {key: 'departmentleadernum', type: '部门领导实配数'},
        {key: 'internalleaderplan', type: '内设机构领导职数'},
        {key: 'internalleadernum', type: '内设机构领导实有数量'},
        {key: 'employeeplan', type: '编外用工控制数'},
        {key: 'employeenum', type: '编外用工实有数'},
        {key: 'predictretire', type: '未来2年退休人员预测'},
        {key: 'compileproblem', type: '现有机构编制问题'},
      ],
      syData: [
        {key: 'level', type: '机构级别', render: this.getDictRender('usermanage.org.politicallevel')},
        {key: 'internalorgnum', type: '内设机构数'},
        {key: 'employeeplan', type: '编外用工控制数'},
        {key: 'employeenum', type: '编外用工实有数'},
        {key: 'predictretire', type: '未来2年退休人员预测'},
        {key: 'compileproblem', type: '现有机构编制问题'},
        {key: 'businesstype', type: '事业所属分类', render: this.getDictRender('usermanage.org.institutionssort')},
        {key: 'moneyform', type: '经费形式', render: this.getDictRender('usermanage.org.fundform') },
        {key: 'iscangong', type: '是否参公', render: (v) => {
          return v ? '是' : '否';
        } }, 
        {key: 'businesscompilenplan', type: '事业编制数'}, 
        {key: 'businesscompilennum', type: '事业人员实有数'},
        {key: 'businessleaderplan', type: '单位领导职数'},
        {key: 'businessleadernum', type: '单位领导实配数'},
      ],
      tableData: []
    };
  },
  created() {
    this.initData();
  },
  mounted() {},
  methods: {
    initData(){
      let rowKeys = this.data[0].orgType == 1 ? this.xzData : this.syData;
      let arr = [], columns = [];
      this.data.forEach(row => {
        columns.push({ title: row.orgname, dataIndex: row.orgname });
      })
      rowKeys.forEach(item => {
        let key = item.key, obj = {type: item.type};
        this.data.forEach(row => {
          let orgname = row.orgname, val = row[key];
          if(item.render){
            val = item.render(val);
          }
          obj[orgname] = val;
        })
        arr.push(obj)
      });
      this.columns = [{ title: '', dataIndex: 'type',  }, ...columns ];
      this.tableData = arr;
    },
    getHtml() {
      let thead = `<thead><tr>`
      let tbody = `<tbody>`
      let headArr = [{text: "", colspan: 1}];
      this.data.forEach(item => {
        let obj = {}
        obj.text = item.orgname
        obj.colspan = 1
        headArr.push(obj)
      })
      //  生成表头
      headArr.forEach(item => {
        thead += `<td colspan="${item.colspan}">${item.text}</td>` 
      })
      thead += '</tr></thead>'
      let copyData = JSON.parse(JSON.stringify(this.tableData));
      let width = Math.round(1/headArr.length * 10000) / 100 + '%';
      copyData.forEach(item => {
        delete item.key
      })
      //  生成内容
      copyData.forEach(item => {
        tbody += '<tr>'
        headArr.forEach((list, num) => {
          if (num == 0) {
            tbody += `<td style="width: ${width};">${item.type}</td>`
          } else {
            let attr = `org${num -1}`
            tbody += `<td style="width: ${width};">${item[attr]}</td>`
          }
        })
        tbody += '</tr>'
      })
      tbody += `</tbody>`
      let temp = `<table style="width: 100%;">${thead}${tbody}</table>`
      return createReportItem(temp, '关联情况分析')
    },
    generateRowKey() {
      return Number(Math.random().toString().substr(3, 3) + Date.now()).toString(36)
    },
    getDictRender(dict){
      return (value) => {
        let v = this.$store.getters.dictKey(dict, value);
        if(v){
          return v.group ? `${v.group}/${v.text}` :  v.text;
        }
        return "";
      }
    },
  },
};
</script>
<style lang="less" scoped>
.org-staffcase{  
  /deep/.ant-row{
    padding: @content-padding-v 0;
  }
}
</style>