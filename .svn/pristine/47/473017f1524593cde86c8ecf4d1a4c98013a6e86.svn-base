<template>
  <div class="layout">
    <div class="content">
      <div class="top">
        <a-month-picker :style="{width:'200px'}" v-model="query.date"  allowClear  @change="dateChange"></a-month-picker>
      </div>
      <div class="middle">
        <a-table rowKey="id" :loading="loading" :customRow="customRow" :columns="columns" :data-source="dataSource" :pagination="false">
          <template slot="operate" slot-scope="text,record">
            <a>处理</a>
          </template>
          <template slot="status" slot-scope="text,record">
            <span class="state">{{record.status | toStr}}</span>
          </template>
          <template slot="checktimes" slot-scope="text,record">
            <span class="state">{{record.checktimes | dayStr}}</span>
          </template>
        </a-table>
      </div>
      <div class="bottom">
        <a-pagination show-size-changer :total="pagination.total" :page-size="pagination.pagesize"
          v-model="pagination.pagenum" :show-total="(total) => `共 ${total} 条`"  @change="onChange"
          @showSizeChange="onShowSizeChange">
        </a-pagination>
      </div>
    </div>
  </div>
</template>
<script>
import { DatePicker, Input, Table, Pagination, Select } from "ant-design-vue";
import { assign, cloneDeep } from "lodash";
import { showError } from "@/framework/utils/index";
import { explainList } from "@/hall/api/attendance";
import moment from "moment";
export default {
  components: {
    ADatePicker: DatePicker,
    AMonthPicker: DatePicker.MonthPicker,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATable: Table,
    APagination: Pagination,
    AInputSearch: Input.Search
  },
  data() {
    return {
      loading: true,
      dataSource: [],
      query: {
        date: undefined
      },
      pagination: {
        pagesize: 10,
        pagenum: 1,
        total: 0,
        needtotal: true
      }
    };
  },
  computed: {
    columns() {
      return [
        {
          title: "人员姓名",
          dataIndex: "username"
        },
        {
          title: "所属组织",
          dataIndex: "org"
        },
        { title: "日期", dataIndex: "checkdate",customRender: (text, record, index) => moment(text).format("YYYY-MM-DD")},
        {
          title: "考勤时段",
          dataIndex: "checktimes",
          scopedSlots: { customRender: 'checktimes' }
        },
        {
          title: "说明理由",
          dataIndex: "memo"
        },
        { title: "状态", dataIndex: "status" ,scopedSlots: { customRender: 'status' }},
        {
          title: "操作",
          dataIndex: "operate",
          scopedSlots: { customRender: "operate" }
        }
      ];
    }
  },
  mounted() {
    this.getData();
  },
  filters:{
    toStr(v){
      let str = undefined;
      switch (v){
        case 0 :str = '审核中';break;
        case 1 :str = '审核通过';break;
        case 2 :str ='审核不通过';break;
        default:;break;
      }
      return str;
    },
    dayStr(v){
      let str = undefined;
      switch (v){
        case 1 :str = '上午';break;
        case 2 :str ='下午';break;
        case 3 :str ='全天';break;
        default:;break;
      }
      return str;
    },
  },
  methods: {
    getData() {
      this.loading = true;
      let query = {
        nodeid: null,
        starttime: this.query.date ?moment(this.query.date).startOf('month').format("YYYY-MM-DD") : undefined,
        endtime:this.query.date ? moment(this.query.date).endOf('month').format("YYYY-MM-DD"):undefined,
        ...this.pagination
      };
      explainList(query)
        .then(res => {
          let { pagenum, pagesize, total, rows } = res.result;
          assign(this.pagination, { pagenum, pagesize, total });
          this.dataSource = rows;
        })
        .catch(err => {
          showError(err);
        })
        .finally(() => {
          this.loading = false;
        });
    },
    customRow(row, index) {
      return {
        on: {
          click: () => {
          }
        }
      };
    },
    dateChange() {
      this.getData();
    },
    onChange(pagenum, pagesize) {
      assign(this.pagination, { pagesize, pagenum });
      this.getData();
    },
    onShowSizeChange(current, pagesize) {
      assign(this.pagination, { pagenum: 1, pagesize });
      this.getData();
    }
  }
};
</script>
<style lang='less' scoped>
.layout {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  .content {
    flex: 1;
    padding: @content-padding-v 0px;
    overflow-y: auto;
    min-height: 0px;
    background: @white;
    display: flex;
    flex-direction: column;
    border-radius: @border-radius-base;
    .top {
      display: flex;
      padding: @content-padding-v @content-padding-h;
      justify-content: flex-end;
    }
    .middle {
      flex-shrink: 1;
      padding: @content-padding-v @content-padding-h;
      overflow-y: auto;
      /deep/ tr {
        cursor: pointer;
      }
    }
    .bottom {
      text-align: right;
      padding: @content-padding-v 0px;
    }
  }
}
</style>