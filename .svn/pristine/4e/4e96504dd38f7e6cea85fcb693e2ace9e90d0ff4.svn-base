<template>
  <div class="workflow">
    <a-form-item :label="property.showName?property.name:''">
      <div class="optionsWrap">
        <div class="optionsTop">
          <template v-for="(item,index) in property.childs">
            <org
              v-if="item.componenttype=='org'"
              :key="index"
              :property="item"
              @getData="getData"
              :pcode="property.code"
              :bindform="bindform"
              :relateControls="relateControls"
            ></org>
            <user
              v-if="item.componenttype=='user'"
              :key="index"
              :property="item"
              :bindform="bindform"
              @getData="getData"
              :pcode="property.code"
              :relateControls="relateControls"
            ></user>
            <input-text
              v-if="item.componenttype=='inputtext'"
              :key="index"
              :bindform="bindform"
              :property="item"
              @getData="getData"
              :pcode="property.code"
              :relateControls="relateControls"
            ></input-text>
            <number-box
              v-if="item.componenttype=='numberbox'"
              :key="index"
              :bindform="bindform"
              :property="item"
              @getData="getData"
              :pcode="property.code"
              :relateControls="relateControls"
            ></number-box>
            <date-box
              v-if="item.componenttype=='datebox'"
              :key="index"
              :bindform="bindform"
              :property="item"
              @getData="getData"
              :pcode="property.code"
              :relateControls="relateControls"
            ></date-box>
            <fixed-text
              v-if="item.componenttype=='fixedtext'"
              :key="index"
              :index="index"
              :property="item"
              @getData="getData"
              :pcode="property.code"
            ></fixed-text>
          </template>
        </div>
        <div class="stampBottom">
          <a-form-item>
            <a-date-picker
              :disabled="property.editable?false:true"
              @change="changeDate"
              :getCalendarContainer="triggerNode => triggerNode.parentNode"
              placeholder="请选择日期"
              v-decorator="[
          `${property.datecomponent.code}`,
          {
            rules: [{required:property.require, message: `请选择时间!`}],
            initialValue:time
          }
        ]"
            />
          </a-form-item>
        </div>
      </div>
      <a-input
        v-if="!option"
        type="hidden"
        v-decorator="[
          `${property.code}`,
          {
            rules: [{required: property.require, message: `请填写${property.name}!`}],
            initialValue: option
          }
        ]"
      ></a-input>
    </a-form-item>
    <stamp
      :property="property"
      @imgUrl="getStamp"
      v-if="property.signcomponent.signcode && property.signcomponent.editable"
    ></stamp>
    <a-form-item class="stampNotice" v-if="!imgUrl && property.signcomponent.signcode">
      <a-input
        type="hidden"
        v-decorator="[
          `${property.signcomponent.code}`,
          {
            rules: [{required: property.signcomponent.require, message: `请选择签章!`}],
            initialValue: stamp
          }
        ]"
      ></a-input>
    </a-form-item>
    <div class="seal" v-if="imgUrl">
      <img :src="imgUrl" />
    </div>
  </div>
</template>
<script>
import Stamp from "./stampComponent/Stamp";
import { getStampInfo } from "@/workflow/api/stamplist";
import moment from "moment";
import Org from "./complexComponent/approvalOpinionsTwo/Org";
import User from "./complexComponent/approvalOpinionsTwo/User";
import InputText from "./complexComponent/approvalOpinionsTwo/InputText";
import NumberBox from "./complexComponent/approvalOpinionsTwo/NumberBox";
import DateBox from "./complexComponent/approvalOpinionsTwo/DateBox";
import FixedText from "./complexComponent/approvalOpinionsTwo/FixedText";
import { uiConfigsCookies } from "@/framework/utils/auth";
import "@/workflow/style/workflow.css";
import { Form, DatePicker, Input } from "ant-design-vue";
import { showError } from "@/framework/utils/index";
export default {
  name: "ApprovalOpinionsTwo",
  data() {
    return {
      code: this.property["code"],
      formData: this.$store.getters.formData,
      uiConfigs: uiConfigsCookies(),
      imgUrl: null,
      stamp: null,
      inputType: {
        width: "30%"
      },
      obj: {},
      checkAll: {},
      time: {},
      option: null
    };
  },
  props: {
    property: {
      type: Object,
      required: true
    },
    bindform: {
      type: Object,
      required: true
    },
    relateControls: {
      type: Array
    }
  },
  components: {
    Stamp,
    User,
    Org,
    InputText,
    NumberBox,
    DateBox,
    FixedText,
    AFormItem: Form.Item,
    ADatePicker: DatePicker,
    AInput: Input
  },
  computed: {
    data() {
      return this.$store.getters.formData[this.code];
    }
  },
  watch: {
    data(newVal) {
      this.time = this.data[this.property.datecomponent.code]
        ? moment(this.data[this.property.datecomponent.code])
        : undefined;
    }
  },
  created() {
    this.time = undefined;
    this.property.childs.forEach(item => {
      if (item.require) {
        this.$set(this.checkAll, item.code, undefined);
      }
    });
    if (
      this.formData[this.code] &&
      JSON.stringify(this.formData[this.code]) !== "{}"
    ) {
      this.obj = this.formData[this.code];
      for (var a in this.formData[this.code]) {
        if (a == this.property.datecomponent.code) {
          this.time = this.moment(this.formData[this.code][a]);
        }
      }
      this.option = 1;
    }
    if (this.property.datecomponent.defaultType) {
      if (!(this.formData[this.code] && this.formData[this.code][this.property.datecomponent.code])) {
        if (this.property.datecomponent.defaultType == 1) {
          this.time = undefined;
        } else if (this.property.datecomponent.defaultType == 2) {
          this.time = this.moment();
          this.obj[this.property.datecomponent.code] = this.time.format(
            "YYYY-MM-DD"
          );
          this.saveTime(this.obj[this.property.datecomponent.code]);
          this.relateControl(this.obj[this.property.datecomponent.code]);
        } else if (this.property.datecomponent.defaultType == 3) {
          this.time = moment(
            this.property.datecomponent.defaultContent,
            "YYYY-MM-DD"
          );
          this.obj[this.property.datecomponent.code] = this.time.format(
            "YYYY-MM-DD"
          );
          this.saveTime(this.obj[this.property.datecomponent.code]);
          this.relateControl(this.obj[this.property.datecomponent.code]);
        }
      }
    } else {
      this.time = undefined;
    }
    if (this.formData[this.property.signcomponent.code]) {
      //获取签章图片
      getStampInfo(this.formData[this.property.signcomponent.code])
        .then(res => {
          if (res.code == "success") {
            this.imgUrl =
              this.uiConfigs["api.url"] +
              "/file/v1/download/" +
              "?uri=" +
              encodeURIComponent(res.result.pictureurl);
          }
        })
        .catch(err => {
          showError(err);
        });
    }
  },
  methods: {
    //保存时间
    saveTime(time) {
      this.obj[this.property.datecomponent.code] = time;
      this.relateControl(time);
      this.$store.getters.formData[this.code] = this.obj;
      this.$store.commit({
        type: "SET_FORM_DATA",
        data: this.$store.getters.formData
      });
    },
    moment,
    //选择时间后给表单传值
    changeDate(date, dateString) {
      this.saveTime(dateString);
      this.relateControl(dateString);
    },
    //关联控件变化
    relateControl(e) {
      let formData = {};
      let flag = false;
      this.relateControls.forEach(item => {
        if (item.relate == this.property.datecomponent.code && e) {
          flag = true;
          if (item.type == "plus") {
            if (item.date == "days") {
              if (item.pcode) {
                if (this.$store.getters.formData[item.pcode]) {
                  this.$set(
                    this.$store.getters.formData[item.pcode],
                    item.code,
                    moment(e)
                      .add(item.num, "days")
                      .format(this.property.format)
                  );
                } else {
                  this.obj[item.code] = moment(e)
                    .add(item.num, "days")
                    .format(this.property.format);
                  this.$store.getters.formData[item.pcode] = this.obj;
                }
              } else {
                this.$store.getters.formData[item.code] = moment(e)
                  .add(item.num, "days")
                  .format(this.property.format);
              }
            } else {
              if (item.pcode) {
                if (this.$store.getters.formData[item.pcode]) {
                  this.$set(
                    this.$store.getters.formData[item.pcode],
                    item.code,
                    moment(e)
                      .add(item.num, "months")
                      .format(this.property.format)
                  );
                } else {
                  this.obj[item.code] = moment(e)
                    .add(item.num, "months")
                    .format("YYYY-MM");
                  this.$store.getters.formData[item.pcode] = this.obj;
                }
              } else {
                this.$store.getters.formData[item.code] = moment(e)
                  .add(item.num, "months")
                  .format("YYYY-MM");
              }
            }
          } else {
            if (item.date == "days") {
              if (item.pcode) {
                if (this.$store.getters.formData[item.pcode]) {
                  this.$set(
                    this.$store.getters.formData[item.pcode],
                    item.code,
                    moment(e)
                      .subtract(item.num, "days")
                      .format(this.property.format)
                  );
                } else {
                  this.obj[item.code] = moment(e)
                    .subtract(item.num, "days")
                    .format(this.property.format);
                  this.$store.getters.formData[item.pcode] = this.obj;
                }
              } else {
                this.$store.getters.formData[item.code] = moment(e)
                  .subtract(item.num, "days")
                  .format(this.property.format);
              }
            } else {
              if (item.pcode) {
                if (this.$store.getters.formData[item.pcode]) {
                  this.$set(
                    this.$store.getters.formData[item.pcode],
                    item.code,
                    moment(e)
                      .subtract(item.num, "months")
                      .format(this.property.format)
                  );
                } else {
                  this.obj[item.code] = moment(e)
                    .subtract(item.num, "months")
                    .format(this.property.format);
                  this.$store.getters.formData[item.pcode] = this.obj;
                }
              } else {
                this.$store.getters.formData[item.code] = moment(e)
                  .subtract(item.num, "months")
                  .format(this.property.format);
              }
            }
          }
        }
      });
      if (flag) {
        this.bindform.resetFields();
        formData = Object.assign({}, this.$store.getters.formData);
        this.$store.commit({
          type: "SET_FORM_DATA",
          data: formData
        });
      }
    },
    //获取子组件的值
    getData(val) {
      this.obj[val.code] = val.item;
      let submitFlag = true;
      for (var a in this.checkAll) {
        this.$set(this.checkAll, a, this.obj[a]);
        if (!this.checkAll[a]) {
          submitFlag = false;
          break;
        }
      }
      // if (!this.obj[this.property.datecomponent.code]) submitFlag = false;
      if (submitFlag) {
        this.option = 1;
        this.$store.getters.formData[this.code] = this.obj;
        this.$store.commit({
          type: "SET_FORM_DATA",
          data: this.$store.getters.formData
        });
      }
    },
    //获取签章
    getStamp(img) {
      if (img) {
        this.imgUrl = img;
        this.stamp = img;
      }
    }
  }
};
</script>
<style lang="less" scoped>
.optionsTop {
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 12px;
  margin-bottom: 4px;
  > div {
    display: inline-block;
    margin: 0 5px 10px 5px;
  }
}
</style>