<template>
  <div>
    <a-form-item v-if="edit" 
      :label="property.label"
      :required="!!property.require" 
      :validateStatus="validateStatus"
    >
      <a-input
        :value="propValue && propValue.username"
        :disabled="!!property.disable"
        :placeholder="property.hint"
        :read-only="true"
        :allowClear="!(property.disable || property.require || !propValue)"
        @click="showSelect"
        @change="onNameChange($event.target.value)"
      >
        <a-icon slot="addonAfter" type="select" @click="showSelect"/>
      </a-input>
    </a-form-item>
    <div v-else class="p-showname">
      <span>{{property.label}}：</span>
      <span>{{propValue && propValue.username}}</span>
    </div>
    <a-modal
      :footer="null"
      v-model="visible"
      :width="500"
      :title="`选择${property.label}`"
      :bodyStyle="{ height: '600px', padding: '0'}"
    >
      <org-user-select mode="user" :show-dept="true" @finish="finishSelect" />
    </a-modal>
  </div>
</template>
<script>
import { Form, Input, Modal,Icon } from "ant-design-vue";
import OrgUserSelect from "@/framework/components/OrgUserSelect";
import get from 'lodash/get';
import set from 'lodash/set';

export default {
  props: {
    property: {
      type: Object,
    },
    data:{
      type: Object,
    },
    edit:{
      type: Boolean,
      default: false,
    }
  },
  components: {
    AFormItem: Form.Item,
    AInput: Input,
    AModal: Modal,
    AIcon: Icon,
    OrgUserSelect
  },
  data() {
    return {
      code: this.property['code'],
      validateStatus: undefined,
      visible: false
    };
  },
  computed:{
    propValue:{
      get(){
        return get(this.data, this.code);
      },
      set(value){
        set(this.data, this.code, value)
      }
    },
  },
  methods: {
    validateField(obj){
      return new Promise((resolve, reject) => {
        this.validate((error) => {
          if(error){
            reject(error);
          }else{
            //值undefined时设置为null 才会序列化 需要传key 服务器识别情况数据
            set(obj, this.code, this.propValue === undefined ? null : this.propValue);
            resolve();
          }
        })
      });
    },
    validate(callback){
      let status = undefined;//error 验证失败 success成功
      let error;
      if(!this.property.disable){
        //TODO 数据格式校验
        if(this.property.require && !this.propValue){
          status = 'error';
          error = `请填写${this.property.label || this.code}`;
        }else{
          status = 'success';
        }
      }
      this.validateStatus = status;
      if(callback){
        callback(error);
      }
    },
     onNameChange(value){
      if(!value){
        this.propValue = undefined;
      }
    },
    showSelect(){
      if(!this.property.disable){
        this.visible = true;
      }
    },
    finishSelect(type, list) {
      this.visible = false;
      if (type == "ok" && list.length > 0) {
        let {_id, username} = list[0];
        this.propValue = {_id, username}
        // this.validate();
      }
    }
  }
};
</script>
<style lang="less" scoped>
.ant-form-item {
  margin-bottom: 0;
}
.p-showname {
  line-height: 30px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
</style>