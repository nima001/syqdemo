<template>
  <div class="container">
    <a-input-group compact>
      <a-select v-model="input.type" :showArrow="false">
        <a-select-option value="">值</a-select-option>
        <a-select-option value="$"><custom-icon type="fx"/></a-select-option>
        <a-select-option value="#"><custom-icon color="#f39c2b" type="fx"/></a-select-option>
      </a-select>
        <a-input :value="value" v-if="input.type" read-only @click="showExprEditor = true"/>
      <dict-select v-else
        v-model="input.value"
        @change="onchange"
        :dict="key" 
        :multiple="true"
        :allowClear="true"
      />
    </a-input-group>
    <equation-editor v-if="showExprEditor" :selfFields='context' :fnData="input.value" namespace="query" @finish="onEditExper"/>
  </div>
</template>
<script>
import DictSelect from "@/framework/components/DictSelect";
import { Input, Select } from "ant-design-vue";
import CustomIcon from "@/framework/components/CustomIcon";
import cloneDeep from "lodash/cloneDeep";
// 字段数组(in/nin)
export default {
  name:"DictArray",
  data() {
    return {
      input: this.initInput(this.defaultData.value),
      oldValue: undefined,
      showExprEditor: false,
    };
  },
  props: {
    position: {
      type: String,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    }
  },
  inject:['context'],
  components: {
    DictSelect,
    AInput: Input,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    CustomIcon,
    EquationEditor:() => import('@person/components/EquationEditor/index')
  },
  computed: {
    key() {
      return this.defaultData.field.datasource;
    },
    value(){
      let {type, value} = this.input;
      if(type && value){
        return type + '{' + value + '}';;
      }else{
        return value;
      }
    }
  },
  watch:{
    'input.type'(vt, ovt){
      if(!ovt != !vt){
        let v = this.oldValue;
        this.oldValue = this.input.value;
        this.input.value = v;
      }
    },
    value(value){
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    },
  },
  methods: {
    onchange(v) {
      let value = cloneDeep(v);
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    },
    initInput(v){
      if(typeof(v) == 'string'){
        if(v.startsWith('${') && v.endsWith('}')){
          return { type: '$', value: v.substring(2, v.length-1) };
        }else if(v.startsWith('#{') && v.endsWith('}')){
          return { type: '#', value: v.substring(2, v.length-1) };
        }
      }
      return { type: '', value: v};
    },
    onEditExper(type, data){
      this.showExprEditor = false;
      if (type == "ok") {
        this.input.value = data;
      }
    }
  }
};
</script>
<style lang="less" scoped>
.container {
  min-width: 300px;
  .ant-input-group-compact{
    display: flex;
  }
}
</style>