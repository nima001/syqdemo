<template>
  <div class="container">
    <a-input read-only class="code-one" :value="showname" @click.native="showSelect = true">
      <a-icon slot="suffix" type="select"/>
    </a-input>
    <a-select style="width:120px" :value="defaultData.op2" @change="opChange" >
      <a-select-option v-for="item in opList" :value="item.value" :key="item.value">{{item.text}}</a-select-option>
    </a-select>
    <div class="valueCell">
    <a-input-group compact>
      <a-select v-model="input.type" style="width:42px;" :showArrow="false">
        <a-select-option value="">值</a-select-option>
        <a-select-option value="$"><icon-font type="fx"/></a-select-option>
        <a-select-option value="#"><icon-font color="#f39c2b" type="fx"/></a-select-option>
      </a-select>
      <template v-if="input.type">
        <a-input :value="value"
          read-only
          @click="showExprEditor = true"
          style="width:calc(100% - 42px)"
        />
      </template>
      <a-input-number v-else
        v-model="input.value"
        placeholder="(空)"
        style="width:calc(100% - 42px)"
      />
    </a-input-group>      
    </div>

    <a-modal title="字段选择" 
      :visible="showSelect"
      :destroyOnClose="true" 
      :footer='null' 
      @cancel='showSelect=false'  
      width='500px' 
      :bodyStyle="{padding:'0px'}"
    >
      <select-field :targetid="targetid" :criteria="defaultData" @finish="finishHandle"/>
    </a-modal>
    <equation-editor v-if="showExprEditor" :fnData="input.value" namespace="query"  @finish="onFinish"/>
  </div>
</template>
<script>
import { Input, InputNumber, Select, Icon , Modal } from "ant-design-vue";
import SelectField from '../components/SelectField';
import { querylistop } from "@/person/api/integratedquery";
import { showError } from "@/framework/utils/index";
import IconFont from "@/framework/components/IconFont";
//数字算术运算(加减乘除)
export default {
  name: "NumberArith",
  props: {
    target: {
      type: Object,
    },
    position: {
      type: String,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    },
  },
  data(){
    return {
      showSelect : false,
      input: this.initInput(this.defaultData.value),
      oldValue: undefined,
      showExprEditor: false
    }
  },
  components: {
    AModal: Modal,
    AInput: Input,
    AInputNumber: InputNumber,
    ASelect: Select,
    ASelectOption: Select.Option,
    AIcon: Icon,
    SelectField,
    AInputGroup: Input.Group,
    IconFont,
    EquationEditor:() => import('@person/components/EquationEditor')
  },
  created() {
    if (this.defaultData.op && !this.defaultData.opListTwo) {
      this.getListop(this.defaultData.field.key);
    }
  },
  computed: {
    targetid(){
      if(this.target){
        return this.target.id;
      }
    },
    showname() {
      let field = this.defaultData.field2
      return field && field.showname;
    },
    opList(){
      return this.defaultData.opListTwo;
    },
    value(){
      let {type, value} = this.input;
      if(type && value){
        return type + '{' + value + '}';;
      }else{
        return value;
      }
    }
  },
  watch: {
    'input.type'(vt, ovt){
      if(!ovt != !vt){
        let v = this.oldValue;
        this.oldValue = this.input.value;
        this.input.value = v;
      }
    },
    value(value){
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    }
  },
  methods: {
    finishHandle(type,data){
      this.showSelect = false;
      if(type == 'ok'){
        this.$store.commit({
          type: "ADD_FIELD_TWO",
          position: this.position,
          field: data
        });
      }
    },
    getListop(key) {
      querylistop({
        targetid: this.targetid,
        key,
        op: this.defaultData.op
      }).then(res => {
        this.$store.commit({
          type: "SET_OP_LIST_TWO",
          position: this.position,
          data: res.result
        });
      }).catch(error => {
        showError(error);
      });
    },
    opChange(value) {
      this.$store.commit({
        type: "SET_OP_TWO",
        position: this.position,
        op2: value
      });
    },
    onFinish(type, data) {
      this.showExprEditor = false;
      if (type == "ok") {
        this.input.value = data;
      }
    },
    initInput(v){
      if(typeof(v) == 'string'){
        if(v.startsWith('${') && v.endsWith('}')){
          return { type: '$', value: v.substring(2, v.length-1) };
        }else if(v.startsWith('#{') && v.endsWith('}')){
          return { type: '#', value: v.substring(2, v.length-1) };
        }
      }
      return { type: '', value: v};
    }
  }
};
</script>
<style lang="less" scoped>
.container {
  display: flex;
  width: 600px;
  .code-one {
    flex: none;
    width: 250px;
    margin-right: 15px;
  }
  .ant-select {
    flex: none;
    width: 120px;
    margin-right: 15px;
  }
  .valueCell{
    flex: 1;
    .ant-input-number{
      border-left: 0px;
    }
    .ant-select{
      margin: 0px;
    }
  }
}
</style>