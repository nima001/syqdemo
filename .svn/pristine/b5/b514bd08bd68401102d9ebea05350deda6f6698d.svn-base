<template>
  <div class="Term-query">
    <div class="panel">
      <div class="toolbar">
        <a-form class="ant-advanced-search-form" :form="form">
          <div class="box">
            <ul class="in-box">
              <li class="li-content" style="width: 180px">
                <div>
                  <span class="name">用语查询:</span>
                  <a-select
                    v-model="pagination.category"
                    placeholder="请选择用语类型"
                    @change="typeChange"
                  >
                    <a-select-option
                      v-for="(item, index) in typeList"
                      :key="index"
                      :value="item.id"
                      >{{ item.category }}</a-select-option
                    >
                  </a-select>
                </div>
              </li>
              <li class="li-content">
                <div>
                  <span class="name">关键字:</span>
                  <a-input
                    placeholder="请输入关键字"
                    v-model="pagination.searchkey"
                  />
                </div>
              </li>
              <li class="li-button">
                <div>
                  <span class="name"></span>
                  <div>
                    <a-button
                      type="primary"
                      @click="onSearch"
                      style="margin-right: 10px"
                      >搜索</a-button
                    >
                    <a-button @click="onreset">重置</a-button>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </a-form>
      </div>
    </div>
    <div class="Term-main"></div>
    <div class="Term-list">
      <a-spin :spinning="spinning"/>
      <div class="Term-content" v-if="data.length">
        <h3 class="Term-h3">查询结果:</h3>
        <div class="list-content" v-for="(item,index) in data" :key="index">
          <span class="title-span" v-html="`【${item.category}】${item.name}`"/>
          <span class="content-span" v-html="item.desc"/>
        </div>
      </div>
      <div class="main-image" v-else>
        <empty-data :tips="warningtext" />
      </div>
      <a-pagination
        v-if="data.length"
        showSizeChanger
        :current="this.pagination.pagenum"
        :pageSize="this.pagination.pagesize"
        :total="this.pagination.total"
        :showTotal="(total)=>`总共：${total}条`"
        @change="onChange"
        @showSizeChange="onShowSizeChange"/>
    </div>
  </div>
</template>
<script>
import moment from "moment";
import { showError } from "@/framework/utils/index";
import EmptyData from "@/framework/components/EmptyData";
import { Form, Input, Button, Select, pagination, Pagination,Spin } from "ant-design-vue";
import { assign } from 'lodash';
import { orgtermcategory, orgtermsearch } from "@/person-shaoxing/api/information";
export default {
  name: "Termquery",
  components: {
    AForm: Form,
    AFormItem: Form.Item,
    AInput: Input,
    AInputGroup: Input.Group,
    AButton: Button,
    ASelect: Select,
    ASelectOption: Select.Option,
    APagination: Pagination,
    ASpin: Spin,
    EmptyData,
  },
  data() {
    return {
      spinning: false,
      warningtext: "请选择机构或进行关键字搜索",
      data: [],
      pagination: {
        needtotal: true,
        category: undefined,
        pagenum:1,
        pagesize:10,
        total:0,
        searchkey: undefined,
      },
      typeList: [],
      form: this.$form.createForm(this, { name: "advanced_search" }),
    };
  },
  mounted() {
    this.orgtermCategory();
  },
  methods: {
    onChange(pagenum,pagesize) {
      assign(this.pagination,{pagenum, pagesize});
      this.orgtermSearch();
    },
    onShowSizeChange(current,pagesize) {
      assign(this.pagination,{pagenum: 1, pagesize});
      this.orgtermSearch();
    },
     //判断搜索记录是否包含某个关键字
    brightenKeyword(content) {
      // inputvalue为搜索框中的value
      if(content){
        let inputvalue = this.pagination.searchkey;
        let index = content.indexOf(inputvalue);
        if (content.length < 200) {
          return this.mark(content,inputvalue,index);
        } else if (index < 20) {
          return this.nomark(content,inputvalue,index);
        } else {
          let newtext = content.slice(index - 15, index + 185);
          let newcontent = `......${newtext}......`;
          const Reg = new RegExp(inputvalue);
          let res = "";
          if(inputvalue&&index>=0){
            res = newcontent.replace(
              Reg,
              `<span style="color: #d60002;">${inputvalue}</span>`
            );
          }else{
            if(content.length>200){
              return `${content.slice(0,200)}......`;
            }else{
              return content;
            }
          }
          return res;
        }
      }
    },
    mark(content,inputvalue,index) {
    const Reg = new RegExp(inputvalue, "g");
    let res = "";
    if(inputvalue&&index>=0){
      res = content.replace(
        Reg,
        `<span style="color: #d60002;">${inputvalue}</span>`
      );
    }else{
      if(content.length>200){
        return `${content.slice(0,200)}......`;
      }else{
        return content;
      }
    }
    return res;
    },
    nomark(content,inputvalue,index) {
      let newtext = content.slice(index, index + 200);
      let newcontent = `......${newtext}......`;
      const Reg = new RegExp(inputvalue);
      let res = "";
      if(inputvalue&&index>=0){
        res = newcontent.replace(
          Reg,
          `<span style="color: #d60002;">${inputvalue}</span>`
        );
      }else{
        if(content.length>200){
          return `${content.slice(0,200)}......`;
        }else{
          return content;
        }
      }
      return res;
    },
    typeChange(value) {
      this.typevalue = value;
    },
    //带参查询
    onSearch() {
      this.pagination.pagenum = 1;
      this.orgtermSearch();
    },
    onreset() {
      this.pagination.category = undefined;
      this.pagination.searchkey = undefined;
    },
    orgtermCategory() {
      orgtermcategory().then((res)=>{
        this.typeList = res.result;
      }).catch((err)=>{
        showError(err);
      })
    },
    orgtermSearch(){
      this.spinning = true;
      if(this.pagination.rows){
        this.pagination.rows = [];
      }
      if(this.pagination.searchkey === ""||this.pagination.searchkey === ''){
        this.pagination.searchkey = undefined;
      }
      orgtermsearch(this.pagination).then((res)=>{
        if (!res.result.rows.length) {
            this.$notification.warning({
              message: "提示",
              description: "暂无数据！",
              duration: 3,
            });
          }
        this.spinning = false;
        assign(this.pagination,res.result);
        res.result.rows.forEach((item,index)=>{
          res.result.rows[index].name=this.brightenKeyword(item.name);
          res.result.rows[index].desc=this.brightenKeyword(item.desc);
        });
        this.data = res.result.rows;
      }).catch((err)=>{
        this.spinning = false;
        showError(err);
      })
    }
  },
};
</script>
<style lang="less" scoped>
.Term-query {
  display: flex;
  flex-direction: column;
  height: 100%;
  .panel {
    display: flex;
    // flex-direction: column;
    overflow: hidden;
    position: relative;
    .toolbar {
      padding: @layout-space-base;
      width: 100%;
      margin: 0 auto;
      .ant-advanced-search-form {
        .box {
          width: 100%;
          .in-box {
            margin-bottom: 0;
            overflow: hidden;
            // margin: 5px;
            .li-content {
              float: left;
              padding: @layout-space-base;
            }
            .li-button {
              float: left;
              padding: @layout-space-base;
            }
            .name {
              line-height: 32px;
              padding-right: 5px;
              // vertical-align: initial;
            }
            .ant-input-group.ant-input-group-compact {
              display: inline-block;
              vertical-align: super;
            }
            /deep/ .ant-input-group {
              top: 0.8px;
            }
            /deep/.ant-select-selection--multiple {
              padding-bottom: 0px;
            }
            @media screen and(max-width:1410px) {
              .li-content {
                width: 33%;
              }
            }
            @media screen and (min-width: 1410px) and(max-width:1750px) {
              .li-content {
                width: 25%;
              }
            }
            @media screen and (min-width: 1750px) {
              .li-content {
                width: 20%;
              }
            }
          }
        }
      }
      .pzwh {
        width: auto;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
        &:hover {
          border-color: @primary-color;
        }
        &:focus-within {
          border-color: @primary-color;
          box-shadow: 0 0 0 2px fade(@primary-color, 20%);
        }
        /deep/.ant-input {
          border: none;
          height: 30px;
        }
        /deep/.ant-input-group-addon {
          border: none;
          background: none;
        }
      }
    }
  }
  .Term-main {
    background: #f3f7fa;
    height: @layout-space-base;
    width: 100%;
  }
  .Term-list {
    flex: 1;
    padding: 0 24px;
    .Term-content {
      padding: 10px 0;
    }
    .ant-spin {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%,-50%);
      z-index: 999;
    }
    .Term-h3 {
      font-weight: 700;
      color: #666666;
    }
    .main-image {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    .Term-content {
      .list-content {
        padding: @layout-space-base 0;
        border-bottom: 1px dashed rgb(222, 222, 222);
        display: flex;
        flex-direction: column;
        span {
          margin-bottom: 5px;
        }
        .title-span {
          font-size: 18px;
        }
        .time-span {
          color: #cccccc;
        }
        .content-span {
          width: 88%;
          color: rgba(0, 0, 0, 0.5);
        }
      }
    }
    .ant-pagination {
      float: right;
      margin: @padding-xs @padding-lg;
    }
  }
}
</style>