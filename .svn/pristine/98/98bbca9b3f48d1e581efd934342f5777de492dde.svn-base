<template>
  <div class="common-business">
    <div
      class="content"
      v-for="(item, index) in menuList"
      :key="index"
      @click="jump(item)"
    >
      <div class="remove" @click.stop="unStar(item.id, index)">
        <a-icon type="minus-circle" />
      </div>
      <img
        v-if="item.icon"
        :src="uiConfigs['api.url'] + '/file/v1/download?uri=' + item.icon"
        :onerror="`this.src='${defaultIcon}'`"
      />
      <img v-else :src="defaultIcon" />
      <div>{{ item.name }}</div>
    </div>
    <div class="add-business" @click="showModal">
      <a-icon type="plus-circle" theme="filled" class="add" />
      <div>添加</div>
    </div>
    <a-modal v-model="visible" title="添加常用业务" on-ok="handleOk">
      <template slot="footer">
        <a-button key="back" @click="handleCancel"> 取消 </a-button>
        <a-button
          key="submit"
          type="primary"
          :loading="loading"
          @click="handleOk"
        >
          确定
        </a-button>
      </template>
      <a-tree
        show-icon
        :tree-data="treeData"
        :replace-fields="replaceFields"
        :multiple="true"
        :default-expanded-keys="[3]"
        :default-selected-keys="defaultSelectedKeys"
        :style="{ height: '380px', overflow: 'auto' }"
        @select="onSelect"
      >
      </a-tree>
    </a-modal>
  </div>
</template>
<script>
import { Icon, Button, Modal, Tree } from "ant-design-vue";
import { updateStarMenu, getcollectMenu } from "../api/menu";
import { uiConfigsCookies } from "../utils/auth";
import { showError } from "../utils/index";
export default {
  name: "CommonMenu",
  components: {
    AIcon: Icon,
    AButton: Button,
    AModal: Modal,
    ATree: Tree,
  },
  data() {
    return {
      defaultIcon: require("../assets/img/icon-menu-default.png"),
      uiConfigs: uiConfigsCookies(),
      menuList: undefined,
      loading: false,
      visible: false,
      treeData: [],
      replaceFields: {
        children: "children",
        title: "name",
        key: "id",
        icon: "icon",
      },
      selectedNodesArr: [],
      checkedNodes: [],
      checkedNodesArr: [],

      getListMenu: this.$store.getters.menuList,
    };
  },
  computed: {
    defaultSelectedKeys() {
      let defaultSelected = [];
      for (const key in this.menuList) {
        defaultSelected.push(this.menuList[key].id);
      }
      return defaultSelected;
    },
  },
  created() {
    this.getCollectList();
  },
  methods: {
    getCollectList() {
      getcollectMenu()
        .then((res) => {
          this.menuList = res.result || [];
        })
        .catch((err) => {
          showError(err);
        });
    },
    unStar(id, index) {
      let ids = [];
      this.menuList.forEach((item, i) => {
        if (index != i) {
          ids.push(item.id);
        }
      });
      updateStarMenu(ids)
        .then((res) => {
          let index = this.menuList.findIndex((item) => item.id == id);
          if (index >= 0) {
            this.menuList.splice(index, 1);
          }
        })
        .catch((err) => {
          showError(err);
        });
    },
    jump(item) {
      if (!item) {
        return;
      }
      if (item.children && item.children.length > 0) {
        this.$router
          .push({
            name: "SubMenu",
            params: { id: item.id },
          })
          .catch((err) => {
            //ignore
          });
      } else if (item.componenturi) {
        if (item.componenturi.startsWith("redirect:")) {
          let path = item.componenturi.slice(9);
          let temp = path.toUpperCase();
          if (temp.startsWith("http:") || temp.startsWith("https:")) {
            window.open(path, "_blank");
          } else {
            const { href } = this.$router.resolve({ path });
            if (href) {
              window.open(href, "_blank");
            }
          }
        } else {
          this.$router.push(item.componenturi).catch((err) => {
            //ignore
          });
        }
      }
    },
    showModal() {
      this.visible = true;
      this.treeData = [];
      this.checkedNodes = [];
      this.treeData = this.getListMenu;
    },
    handleOk(e) {
      this.loading = true;
      if (this.selectedNodesArr.length == 0) {
        this.visible = false;
        this.loading = false;
      } else {
        this.selectedNodesArr.forEach((item) => {
          let _this = this;
          function checkedMenu(obj) {
            for (const key in obj) {
              if (
                obj[key].id == item &&
                _this.menuList.indexOf(obj[key]) == -1
              ) {
                let ids = [];
                _this.menuList.push(obj[key]);
                ids = _this.selectedNodesArr;
                updateStarMenu(ids)
                  .then((res) => {
                    console.log("添加成功！");
                  })
                  .catch((err) => {
                    showError(err);
                  });
                _this.visible = false;
                _this.loading = false;
              } else {
                _this.loading = false;
                _this.visible = false;
              }
              if (typeof obj[key] == "object") {
                checkedMenu(obj[key]);
              }
            }
          }
          checkedMenu(this.getListMenu);
        });
      }
    },
    handleCancel(e) {
      this.visible = false;
    },
    onSelect(selectedKeys, info) {
      this.selectedNodesArr = selectedKeys;
    },
  },
};
</script>
<style lang='less' scoped>
.common-business {
  display: flex;
  flex-wrap: wrap;
  padding-left: 15px;
  font-size: 15px;
  .content {
    width: 115px;
    height: 105px;
    margin: 5px;
    background-color: rgb(243, 244, 245);
    position: relative;
    text-align: center;
    padding-top: 10px;
    &:hover .remove {
      display: block;
    }
    .remove {
      display: none;
      position: absolute;
      right: 5px;
      top: 5px;
      color: @error-color;
    }

    img {
      width: 50px;
      height: 50px;
    }
  }
  .add-business {
    float: right;
    height: 105px;
    width: 115px;
    position: relative;
    /deep/.add {
      font-size: 50px;
      color: rgb(230, 230, 230);
      position: absolute;
      left: 50%;
      top: 15px;
      margin-left: -25px;
    }
    div {
      text-align: center;
      padding-top: 70px;
    }
  }
}
</style>