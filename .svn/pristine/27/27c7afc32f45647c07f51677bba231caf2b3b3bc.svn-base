<template>
  <div class="org-info">
    <div class="title">{{org && org.name}}</div>
    <div class="top-btn" v-if="hasPermit('/person/org/edit')">
      <template v-if="editor">
        <a-button type="primary" @click="save">保存</a-button>
        <a-button @click="editor=false" style="margin-left: 10px;">取消</a-button>
      </template>
      <a-button v-else type="primary" @click="editor=true">编辑</a-button>
    </div>
    <div class="main-form">
      <form-display :formConfig="formConfig" :formData="formData" :editor="editor" ref="formDisplay" v-if="show"/>
    </div>
  </div>
</template>
<script>
import FormDisplay from "@/formdesign/views/FormDisplay";
import { Button } from "ant-design-vue";
import { showError } from "@/framework/utils/index";
import { organization, orgupdate, getEditableProps } from "@/person/api/org";
import { modelForm } from "@/person/api/user";
import cloneDeep from "lodash/cloneDeep";

export default {
  components: {
    AButton: Button,
    FormDisplay
  },
  props: {
    org: {
      type: Object
    }
  },
  data() {
    return {
      // 表单配置
      formConfig: [],
      // 表单初始化数据
      formData: cloneDeep(this.org),
      // 表单可编辑
      editor: false      
    };
  },
  computed:{
    show(){
      return this.formConfig.length ==0 ? false:true;
    }
  },  
  watch: {
    org: {
      handler(v) {
        this.formData = v;
        this.renderForm()
      },
      deep: true
    }
  },
  created() {
    this.renderForm();
  },
  methods: {
    save() {
      // 表单验证并提交
     this.$refs.formDisplay && this.$refs.formDisplay
        .submit()
        .then(res => {
          this.update(res);
        })
        .catch(errors => {
          if(Array.isArray(errors)){
            let firstError = errors[0];
            showError({message: firstError.message || firstError})
          }else{
            showError(errors);
          }
        });
    },
    // 表单提交
    update(data) {
      orgupdate(this.org._id, data)
        .then(res => {
          this.formData = Object.assign({},this.formData,res.result)
          this.editor = false;
          this.$message.info("保存成功");
        })
        .catch(err => {
          showError(err);
        });
    },
    /** 
     * fn1  : 获取表单数据
     * Fn2  : 获取可编辑的字段
    */
    renderForm(){
      let config = undefined
      if(!this.org || !this.org._id){
        return false;
      }
      Promise.all([modelForm("organization", this.org._id),getEditableProps('organization')]).then(res=>{
        if(res[0]['code'] == "success" && res[1]['code'] == "success"){
          config = res[0]['code'];
          let configArr = JSON.parse(res[0]['result']).list;
          let editCode = res[1]['result'];
          this.formatData(configArr,editCode);
          this.formConfig = configArr;
        }
      }).catch(err=>{
        if(config!= "success"){
          this.formConfig = []
        }
        showError(err)
      });
    },
    // 判断表单字段是否可编辑
    formatData(formConfig,codeArr){
      (formConfig || []).forEach(c=>{
        if(c.children){
          c.children.forEach(ele => this.formatData(ele.components,codeArr))
        }else{
          let disabled = c.disabled;
          let unittype = this.org['unittype'];
          if((unittype >= 1 && unittype <= 5) || (unittype == 9)  || (unittype >= 20 && unittype <= 21)){
            let disabled = undefined;
            if(codeArr.includes(c.code)){
              disabled =  false;
              if(c.disabled){
                disabled = true;
              }else{
                disabled = false;
              }
            }else{
              disabled = true;
            }
            c.disabled = disabled;
          }
        }
      })
    }
  }
};
</script>
<style lang="less" scoped>
.org-info {
  height: 100%;
  display: flex;
  flex-direction: column;
  .title {
    font-size: 20px;
    padding: @content-padding-v @content-padding-h;
  }
  .top-btn {
    padding: 0 @content-padding-h;
  }
  .main-form {
    flex: 1 1 100%;
    min-height: 0;
    margin: @content-padding-v 0;
  }
}
</style>