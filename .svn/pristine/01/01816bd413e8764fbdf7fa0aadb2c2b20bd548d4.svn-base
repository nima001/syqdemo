<template>
  <div class="wrap" :id="id">
    <a-spin :spinning="loading" v-if="loading"></a-spin>
  </div>
</template>
<script>
import { Chart } from "@antv/g2";
import { outerInterfaceMonitor } from "@/person-shaoxing/api/monitor";
import { showError } from "@framework/utils";
import { Spin } from "ant-design-vue";
export default {
  data() {
    return {
      id: Math.random()
        .toString(32)
        .substr(2),
      plot: undefined,
      loading: false
    };
  },
  components: {
    ASpin: Spin
  },
  props:{
    unittype:{
      type:Number,
      required:true
    }
  },
  watch:{
    unittype:{
      handler(v){
        if(this.plot){
          this.plot.destroy();
        }
        this.InterfaceMonitor(v)
      }
    }
  },
  mounted() {
    this.InterfaceMonitor(this.unittype)
  },
  methods: {
    InterfaceMonitor(id){
      this.loading = true;
      outerInterfaceMonitor(id).then(res=>{
        let {keyCols,rows,valueCols} = res['result']['data'];
        let kCol = keyCols[0]['column'];
        let vCol = valueCols[0]['column'];
        rows = rows.map(item=>{
          return {
            type:item[kCol],
            value:item[vCol]/10000.0
          }
        })
        this.draw(rows)
      }).catch(err=>{
        showError(err)
      }).finally(()=>{
        this.loading = false;
      })
    },
    draw(list) {
      const chart = new Chart({
        container: this.id,
        autoFit: true,
        padding: [20, 0, 20, 40]
      });
      chart.data(list);
      chart.scale("value", {
        nice: true,
      });
      chart.tooltip({
        showMarkers: false,
        title:'接口调用(万)'
      });
      chart.interaction("element-active");
      chart.legend(false);
      chart
        .interval()
        .position("type*value")
        .color("type", "#5488d1")
        .label("value", {
          content: originData => {
            const val = parseFloat(originData.value);
            return val;
          },
          style: {
            fill: "#5488d1"
          },
          offset: 10
        });
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 100%;
  position: relative;
  .ant-spin {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
  }
}
</style>