<template>
  <div class="stamp">
    <div @click="openModal()" class="addStamp">
      <img src="@/workflow/assets/img/stamp1.png" />
      <span>点击盖章</span>
    </div>
    <!-- 签章 -->
    <a-modal
      title="签章选择"
      :visible="visible"
      @cancel="cancelStamp"
      class="unitModal hand"
      :footer="null"
    >
      <a-form :form="form" @submit="addSeal">
        <a-form-item label="选择签章" :label-col="{ span: 5 }" :wrapper-col="{ span: 12 }">
          <a-select
            showSearch
            @change="searchStamp"
            :filterOption="filterOption"
            v-decorator="['signid',
            {rules: [{ required: property.signcomponent.require?true:false, message:  `请选择签章!` }]}]"
          >
            <a-select-option
              v-for="(item,index) in stampList"
              :key="index"
              :value="item.id"
            >{{item.name}}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item
          class="preview"
          label="签章预览"
          :label-col="{ span: 5 }"
          :wrapper-col="{ span: 12 }"
        > 
          
          <img :src="imgUrl" v-if="imgUrl" v-decorator="['imageUrl']" />
          <img src="@/workflow/assets/img/stampImg.jpeg" v-else>
        </a-form-item>
        <a-form-item label="手机号：" :label-col="{ span: 5 }" :wrapper-col="{ span: 12}">
          <span style="font-size:20px;font-weight:bold;">{{tel}}</span>
        </a-form-item>
        <a-form-item label="验证码" :label-col="{ span: 5}" :wrapper-col="{ span: 12 }">
          <a-row :gutter="20">
            <a-col :span="12">
              <a-input
                :maxlength="5"
                v-decorator="['code',
            {rules: [{ required: property.signcomponent.require?true:false, validator:validateRules }],
            initialValue: vercode}]"
              ></a-input>
            </a-col>
            <a-col :span="4">
              <a-button v-if="vercodeFlag" @click="getPhoneVerify">获取验证码</a-button>
              <span v-else class="vercode-notice">{{time}}秒之后重新发送</span>
            </a-col>
          </a-row>
        </a-form-item>
        <a-form-item style="text-align:right;">
          <a-button type="primary" html-type="submit">确定</a-button>
        </a-form-item>
      </a-form>
    </a-modal>
  </div>
</template>

<script>
import {
  batchCompleteInit,
  getStampInfo,
  verifyMobileCode
} from "@/workflow/api/stamplist";
import { getMobileVerify } from "@/workflow/api/workflow";
import { uiConfigsCookies } from "@/framework/utils/auth";
import {
  Modal,
  Form,
  Select,
  Button,
  InputNumber,
  Row,
  Col,
  Input
} from "ant-design-vue";
import { showError } from "@/framework/utils/index";
export default {
  name: "Stamp",
  components: {
    AModal: Modal,
    AForm: Form,
    AFormItem: Form.Item,
    ASelect: Select,
    ASelectOption: Select.Option,
    AButton: Button,
    AInputNumber: InputNumber,
    ARow: Row,
    ACol: Col,
    AInput: Input
  },
  data() {
    return {
      uiConfigs: uiConfigsCookies(),
      visible: false,
      stampList: [],
      form: this.$form.createForm(this),
      imgUrl: "",
      stampId: 0,
      tel: undefined,
      vercode: undefined,
      time: 60,
      timer: null,
      vercodeFlag: true
    };
  },
  props: ["property"],
  methods: {
    //获得签章列表
    openModal() {
      this.visible = !this.visible;
      if (this.visible) {
        batchCompleteInit()
          .then(res => {
            if (res.code == "success") {
              this.tel = res.result.mobilePhone;
              this.stampList = res.result.seals;
            }
          })
          .catch(err => {
            showError(err);
          });
      }
    },
    //选择签章时手动输入查询签章
    searchStamp(value) {
      getStampInfo(value)
        .then(res => {
          if (res.code == "success") {
            this.stampId = res.result.id;
            this.imgUrl =
              this.uiConfigs["api.url"] +
              "/file/v1/download/" +
              "?uri=" +
              encodeURIComponent(res.result.pictureurl);
          }
        })
        .catch(err => {
          showError(err);
        });
    },
    //校验
    validateRules(rule, value, callback) {
      if (rule.required) {
        if (value) {
          if (!/^[0-9]{5}$/.test(value)) {
            callback("验证码为5位数字，输入有误，请检查后重新输入！");
          } else {
            callback();
          }
        } else {
          callback("请输入验证码！");
        }
      } else {
        callback();
      }
    },
    //获取手机验证码
    getPhoneVerify() {
      if (this.tel) {
        if (!/^[1][3,4,5,7,8][0-9]{9}$/.test(this.tel)) {
          this.$message.error("手机号码有误，请重填");
        } else {
          getMobileVerify(this.tel)
            .then(res => {
              if (res.code == "success") {
                this.$message.success("验证码已成功发送至手机！");
                this.vercodeFlag = false;
                this.timer = null;
                this.timer = setInterval(() => {
                  this.setTime();
                }, 1000);
              }
            })
            .catch(err => {
              showError(err);
            });
        }
      } else {
        this.$message.error("请先填写有效的手机号码！");
      }
    },
    //倒计时
    setTime() {
      if (this.time == 1) {
        this.vercodeFlag = true;
        this.time = 60;
        clearInterval(this.timer);
      } else {
        this.time--;
      }
    },
    //取消
    cancelStamp() {
      this.visible = false;
      this.time = 60;
      this.vercodeFlag = true;
      this.vercode = undefined;
      this.form.resetFields();
      clearInterval(this.timer);
    },
    //手动输入时过滤无关信息
    filterOption(input, option) {
      return (
        option.componentOptions.children[0].text
          .toLowerCase()
          .indexOf(input.toLowerCase()) >= 0
      );
    },
    addSeal(e) {
      e.preventDefault();
      this.form.validateFields((err, values) => {
        if (!err) {
          let query = {};
          query.signid = this.stampId;
          query.mobilePhone = this.tel;
          query.code = values.code;
          verifyMobileCode(query)
            .then(res => {
              if (res.code == "success") {
                this.vercodeFlag = true;
                this.time = 60;
                this.visible = false;
                this.$emit("imgUrl", this.imgUrl);
                let formData = this.$store.getters.formData;
                let code = this.property.signcomponent.code;
                formData[code] = this.stampId;
                this.$store.commit({
                  type: "SET_FORM_DATA",
                  data: formData
                });
                this.form.resetFields();
                this.imgUrl = "";
                clearInterval(this.timer);
              }
            })
            .catch(err => {
              showError(err);
            });
        }
      });
    }
  }
};
</script>
<style lang="less" scoped>
.stamp {
  position: absolute;
  top: -4px;
  right: 0px;
}
.addStamp {
  background: #d60002;
  cursor: pointer;
  color: #fff;
  display: flex;
  border-radius: 5px;
  padding: 2px 5px;
}
.preview {
  /deep/.ant-form-item-control {
    margin-left: 40px;
    width: 150px;
    height: 150px;
  }
  img {
    width: 150px;
    height: 150px;
  }
}
.vercode-notice {
  display: inline-block;
  width: 150px;
}
</style>