<template>
  <ul class="fields-wrap">
    <li
      class="fields-list"
      :class="{active:item.active}"
      v-for="(item,index) in fieldsTwo"
      :key="index+Math.random()"
      :position="`${position}_${index}`"
      @click.stop="toggle($event)"
    >
      <div class="sort" v-if="item.sort">
        <span>
          <a-icon :type="item.active?'caret-down':'caret-right'" />
        </span>
        <span class="text-item">{{item.sort}}</span>
      </div>
      <ul class="menu">
        <li
          class="menu-list"
          v-for="(lg,k) in item.children"
          :key="k+Math.random()"
          :position="`${position}_${index}_${k}`"
          @click.stop="handleChange(lg,$event)"
          :class="{active:lg.active}"
        >
          <span v-if="lg.datatype == 3 && unincludes(lg.key)">
            <a-icon :type="lg.active?'caret-down':'caret-right'" />
          </span>
          <span class="text-item">{{lg.name}}</span>
          <field-two
            v-if="lg.children"
            :fieldsTwo="lg.children"
            :position="`${position}_${index}_${k}`"
            :searchObj="searchObj"
          ></field-two>
        </li>
      </ul>
    </li>
  </ul>
</template>
<script>
import { queryfields } from "@/person/api/integratedquery";
import { sortArrByKey } from "@/person/utils/index";
import { Icon } from "ant-design-vue";
import { showError } from "@/framework/utils/index";
export default {
  name: "FieldTwo",
  props: {
    fieldsTwo: {
      type: Array,
      required: true
    },
    position: [String, Number],
    value: {
      type: String
    },
    searchObj: {
      type: String,
      required: true
    }
  },
  components: {
    AIcon: Icon
  },
  inject: ["setFieldTwo"],
  methods: {
    handleChange(data, e) {
      this.setFieldTwo(data);
      let position = e.currentTarget.getAttribute("position");
      if (data.datatype == 3 && this.unincludes(data.key)) {
        let json = {
          key: data.key,
          modelNs: this.searchObj
        };
        queryfields(json)
          .then(res => {
            let result = sortArrByKey(res.result);
            this.$store.commit({
              type: "UPDATE_FIELDS_TWO",
              data: result,
              position
            });
            this.$nextTick(function() {
              let arr = position.split("_");
              let obj = this.fieldsTwo[parseInt(arr[1])].children[
                parseInt(arr[2])
              ];
              let tag = !obj.active;
              this.$set(obj, "active", tag);
            });
          })
          .catch(error => {
            showError(error);
          });
      }
    },
    unincludes(str) {
      return !str.includes("@");
    },
    toggle(e) {
      let position = e.currentTarget.getAttribute("position");
      let index = parseInt(position.split("_").pop());
      for (let i = 0; i < this.fieldsTwo.length; i++) {
        let obj = this.fieldsTwo[i];
        if (index != i) {
          obj.active = false;
        } else {
          obj.active = !obj.active;
        }
        this.$set(this.fieldsTwo, i, obj);
      }
    }
  }
};
</script>
<style lang="less" scoped>
.fields-list {
  overflow: hidden;
  line-height: 25px;
  &.active {
    > .menu {
      height: auto;
    }
  }
}
.sort {
  cursor: pointer;
}
.menu {
  padding-left: 15px;
  height: 0px;
}
.menu-list {
  overflow: hidden;
  line-height: 25px;
  text-indent: 5px;
  cursor: pointer;
  .fields-wrap {
    height: 0px;
    padding-left: 15px;
  }
  &.active {
    .fields-wrap {
      height: auto;
    }
  }
}
.text-item {
  margin-left: 2px;
}
</style>