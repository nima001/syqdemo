<template>
  <div class="wrap">
    <div class="left">
      <span class="title">机构编制问题数</span>
      <div class="num" @click="()=> questionList = {show:true,title:'机构编制问题详情', lcdTitle:'机构编制问题数',params:{handlestatus: 0,needtotal:true,district:dictId}}">
        <lcd-font :length="5" :realStyle="realStyle" :realNumber="questionNum.unhandle || 0"></lcd-font>
      </div>
    </div>
    <div class="right">
      <ul>
        <li>
          <span class="text">暂缓问题数</span>
          <span class="num" @click="()=> questionList = {show:true,title:'暂缓问题详情', lcdTitle:'暂缓问题数', params:{needtotal:true,defer: 1,handlestatus: 3,district:dictId}}">{{questionNum.temp || 0}}</span>
        </li>
        <li>
          <span class="text">黑名单机构</span>
          <span class="num" @click="showBlack">{{questionNum.black || 0}}</span>
        </li>
      </ul>
    </div>
    <org-list v-model="orgList.show" :title="orgList.title" :loadPage="orgList.loader" @click="blackOrg" >
      <div slot="item" slot-scope="org" class="org-item">
        <div class="name">{{org.name}}</div>
        <div class="num">{{org.num}}</div>
      </div>
    </org-list>
    <dialog-box v-model="questionList.show" :title="questionList.title" :destroyOnClose="true">
      <question-list  :ajaxParams="questionList.params" :isBlackOrgList="questionList.isBlackOrgList" :lcdTitle="questionList.lcdTitle" />
    </dialog-box>
  </div>
</template>
<script>
import DialogBox from "../components/DialogBox";
import { mixins } from "../components/minxin";
import { question } from "@/person-shaoxing/api/orgStaffReport";
import { showError } from "@/framework/utils/index";
import LcdFont from "../components/LcdFont";
import QuestionList from "../components/QuestionList";
import OrgList from "../components/OrgList";  
import { orgBlacklist} from "@/person-shaoxing/api/monitor";
export default {
  components:{
    DialogBox,
    QuestionList,
    LcdFont,
    OrgList
  },
  data() {
    return {
      realStyle: {
        color: "#fb2626"
      },
      questionNum: {},
      questionList: {
        show: false,
        title: "",
        lcdTitle:"",
        params:{}
      },
      orgList: {
        show: false,
        title: "",
        params: {}
      }
    };
  },
  mixins: [mixins],
  watch: {
    dictId(v) {
      this.getQuestion(v);
    }
  },
  mounted() {
    this.getQuestion(this.dictId);
  },
  methods: {
    showBlack(){
      this.orgList = {
        show: true,
        title: "黑名单机构详情",
        loader: (page) => {
          return orgBlacklist({
            district: this.dictId,
            handlestatus: 2,
            ...page
          }).then(({result: {total, pagenum, pagesize, rows}}) => {
            return {
              result: {
                total, pagenum, pagesize,
                rows: rows.map(item => {
                  return {
                    _id: item.orgid,
                    name: item.orgname,
                    num: item.number
                  }
                })
              }
            }
          })
        }
      };
    },
    blackOrg(item){
      this.questionList = {
        show:true, 
        title:'黑名单机构问题详情',
        lcdTitle:'机构问题数', 
        params:{
          handlestatus: true,
          needtotal:true,
          district:this.dictId,
          orgid: item._id
        },
        isBlackOrgList:true
      }
    },
    getQuestion(dictId) {
      question(dictId)
        .then(res => {
          this.questionNum = res.result;
        })
        .catch(err => {
          showError(err);
        });
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 100px;
  background: url("../img/question.png") repeat;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  padding: 0px 24px;
  margin-top: 12px;
  .left {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    .title {
      height: 21px;
      font-size: 16px;
      font-family: Microsoft YaHei;
      font-weight: 400;
      line-height: 21px;
      color: #ffffff;
    }
    & > .num {
      position: relative;
      height: 58px;
      display: flex;
      align-items: center;
      cursor: pointer;
    }
  }
  .right {
    display: flex;
    align-items: center;
    ul {
      margin: 0px;
      li {
        display: flex;
        &:last-child {
          margin-top: 16px;
        }
        .text {
          height: 22px;
          font-size: 16px;
          font-family: Microsoft YaHei;
          font-weight: 400;
          line-height: 22px;
          color: #ffffff;
          opacity: 0.6;
        }
        & > .num {
          margin-left: 30px;
          height: 22px;
          font-size: 16px;
          font-family: Arial;
          font-weight: 400;
          line-height: 22px;
          color: #ffffff;
          opacity: 0.6;
        }
      }
    }
  }
}
.org-item{
  display: flex;
  .name{
    flex: auto;
    text-overflow: ellipsis;
    overflow: hidden;
  }
  .num{
    flex: none;
    color: #8fc7ff;
    margin-left: 10px;
  }
}
</style>