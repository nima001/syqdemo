<template>
  <!-- 全单位本月工资维护 -->
  <div class="allUnitSalaryDefend">
    <a-layout>
      <!-- 当前工资详情 -->
      <a-layout-content v-if=" mode == 'normal' " class="contentNow">
        <div class="layout-content">
          <div class="header">
            <div class="providebtn">
              <a-button
                v-if="ctype === 0"
                @click="payProvide"
                type="primary"
                style="margin-right:10px"
              >工资发放</a-button>
              <a-button
                type="primary"
                v-if="ctype === 0"
                style="margin-right:10px"
                @click="payupload"
              >
                <a-icon type="import" />导入
              </a-button>
              <input
                type="file"
                ref="fileBtn"
                accept=".xls, .xlsx"
                class="fileBtn"
                @change="uploadFile($event)"
                multiple="multiple"
              />
              <a-button type="primary" v-if="ctype === 0||9" @click="openModel">
                <a-icon type="download" />导出
              </a-button>
            </div>
            <!-- 下拉input -->
            <div class="selectgroup">
              <a-input-group size="default">
                <a-select @change="AllorChange" class="changeSelect" defaultValue="全部">
                  <a-select-option value="all">全部</a-select-option>
                  <a-select-option value="change">变动</a-select-option>
                </a-select>
                <!-- <a-select-option value="moreHistory">查看更多历史</a-select-option> -->
                <a-select
                  class="timeSelect"
                  v-show="timeShow"
                  @change="getOtherTimeData"
                  :value="nowTime.date"
                >
                  <a-select-option
                    v-for=" (item, index ) in dateArr"
                    :key="index"
                    :value="item.date"
                  >
                    {{item.date}}
                    <span>{{item.status == 1 ? '(审核中)' :''}}</span>
                  </a-select-option>
                </a-select>
                <a-input
                  class="orginput"
                  allowClear
                  read-only
                  @click="OrgModelShow"
                  @change="resetRange"
                  v-model="node.nodename"
                  placeholder="请选择组织范围"
                />
              </a-input-group>
            </div>
          </div>
          <div class="container">
            <!-- 全部工资详情 -->
            <a-table
              v-if="all"
              class="tableCls"
              :columns="columns"
              :dataSource="datasource"
              :customRow="customRow"
              :loading="loading"
              :bordered="true"
              :pagination="pagationShow"
            >
              <span
                @click="getsalarydetail(record)"
                slot-scope="val,record"
                slot="operate"
                class="detail"
              >查看详情</span>
            </a-table>
            <!-- 变动的工资详情 -->
            <a-table
              v-if="!all"
              class="tableCls"
              :columns="columnsChange"
              :dataSource="datasourceChange"
              :loading="loading"
              :pagination="pagationShow"
              :bordered="true"
            >
              <span
                @click="getsalarydetail(record)"
                slot-scope="val,record"
                slot="operate"
                class="detail"
              >查看详情</span>
            </a-table>
          </div>
          <div class="footer" v-if="!all">
            <a-pagination
              v-if="datasourceChange.length>0"
              class="pagation"
              showSizeChanger
              size="middle"
              :pageSize.sync="pagination.pageSize"
              @showSizeChange="onShowSizeChange"
              @change="onChange"
              :total="pagination.total"
              v-model="pagination.current"
              :showTotal="total => `共${total} 条`"
            />
          </div>
          <div class="footer" v-if="all">
            <a-pagination
              v-if="datasource.length>0"
              class="pagation"
              showSizeChanger
              size="middle"
              :pageSize.sync="pagination.pageSize"
              @showSizeChange="onShowSizeChange"
              @change="onChange"
              :total="pagination.total"
              v-model="pagination.current"
              :showTotal="total => `共${total} 条`"
            />
          </div>
        </div>
        <!-- 工资发放详情model -->
        <payProvideModal
          v-if="isShowpayprovide"
          :isShow="isShowpayprovide"
          @modalClose="closePayprovide"
          :provideRes="provideRes"
        ></payProvideModal>
        <!--组织选择-->
        <a-modal
          title="选择组织"
          v-model="orgVisible"
          :footer="null"
          :width="500"
          :bodyStyle="{ height: '600px', padding: '0'}"
        >
          <org-user-select
            mode="orgtree"
            :defaultTree="catalogid"
            :root-selectable="true"
            @finish="selectOrg"
          />
        </a-modal>
        <a-modal title="提示" :visible="visible">
          <p>{{ ModalText }}</p>
          <template slot="footer">
            <a-button @click="handleCancel">取消</a-button>
            <a-button type="primary" @click="ctype === 0?exportHandler():socialHandler()">确定</a-button>
          </template>
        </a-modal>
        <TaskProgress :taskid="taskid" :defaultInfo="defaultInfo" v-if="taskid" />
      </a-layout-content>
    </a-layout>
  </div>
</template>
<script>
import {
  salaryMonthList,
  salaryDirection,
  salaryResult,
  exportmanually,
  socialmanually,
  importmanually,
} from "@/salary/api/salaryManage";
import { taskProgress } from "@/framework/api/asynctask";
import TaskProgress from "@/framework/components/TaskProgress";
import payProvideModal from "./Payprovide.vue";
import {
  Layout,
  Breadcrumb,
  Input,
  Spin,
  Select,
  Table,
  Button,
  Modal,
  Icon,
  Pagination,
  Progress,
} from "ant-design-vue";
import { showError } from "@/framework/utils/index";
import { treeroot } from "@/salary/api/org";
import OrgUserSelect from "@/framework/components/OrgUserSelect";
import { download } from "@/framework/api/file";
export default {
  components: {
    ALayout: Layout,
    ALayoutHeader: Layout.Header,
    ALayoutContent: Layout.Content,
    ABreadcrumb: Breadcrumb,
    ABreadcrumbItem: Breadcrumb.Item,
    AInput: Input,
    ASpin: Spin,
    AButton: Button,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATable: Table,
    AModal: Modal,
    AIcon: Icon,
    APagination: Pagination,
    AProgress: Progress,
    payProvideModal,
    OrgUserSelect,
    TaskProgress,
  },
  name: "allUnitSalaryDefend",
  data: function () {
    return {
      node: {
        nodeid: null,
        nodename: null,
        orgid: null,
      },
      taskid: "",
      defaultInfo: "",
      provideRes: [],
      timeShow: true /*用来控制时间选择器的隐藏显示*/,
      isShowpayprovide: false,
      pagationShow: false, // 关闭table自己的分页器
      noData: false,
      nowOrgId: "", // 当前组织 id
      nowTime: "",
      ctype: null /*控制工资发放按钮*/,
      dateArr: [],
      ischange: 0,
      all: true, //全部 和 变动 标识
      loading: true,
      mode: "normal", //当前详情
      columns: [],
      columnsChange: "",
      datasourceChange: [], //变动数据项
      datasource: [],
      pagationvisiable: true,
      pagination: {
        pageSize: 10,
        current: 1,
        total: 10,
      },
      type: null,
      orgVisible: false,
      catalogid: undefined,
      status: "",
      taskid: null,
      visible: false,
      ModalText: "确认导出《工资维护表》吗？",
    };
  },
  created() {
    this.getorg();
  },
  destroyed() {
    clearInterval(this.myInterval);
  },
  computed: {
    compage() {
      return (this.num = Math.ceil(
        this.pagination.total / this.pagination.pageSize
      ));
    },
  },
  methods: {
    getorg() {
      treeroot()
        .then((res) => {
          this.node.nodeid = res.result.children[0].id;
          this.node.nodename = res.result.children[0].data.name;
          this.node.orgid = res.result.children[0].data._id;
          this.nowOrgId = this.node.orgid;
          this.getSalaryMonthList(this.node.orgid);
        })
        .catch((err) => {
          showError(err);
        });
    },
    openModel() {
      this.visible = true;
    },
    handleCancel() {
      this.visible = false;
    },
    resetRange() {
      if (!this.node.nodename && this.node.nodeid) {
        this.node.nodeid = "";
      }
    },
    OrgModelShow() {
      this.orgVisible = true;
    },
    selectOrg(type, list) {
      this.orgVisible = false;
      if (type == "ok" && list.length) {
        this.node.nodename = list[0].name;
        this.node.nodeid = list[0].id;
        this.node.orgid = list[0].data._id;
        this.nowOrgId = this.node.orgid;
        this.pagination.current = 1;
        this.getSalaryMonthList(this.node.orgid);
      }
    },
    // 改变 pageSize
    onShowSizeChange(current, pageSize) {
      this.pagination.current = current;
      this.pagination.pageSize = pageSize;
      this.getsalaryResult(
        this.pagination.current,
        this.nowOrgId,
        this.nowTime.date
      );
    },
    // 改变 页数
    onChange(current, pageSize) {
      this.pagination.current = current;
      this.pagination.pageSize = pageSize;
      this.getsalaryResult(
        this.pagination.current,
        this.nowOrgId,
        this.nowTime.date
      );
    },
    // 初始化请求时间接口
    getSalaryMonthList(id) {
      salaryMonthList(id)
        .then((res) => {
          if (res.result.length == 0) {
            this.loading = false;
            this.datasource = [];
            this.datasourceChange = [];
            this.dateArr = [];
            this.nowTime = "";
            this.columns = [];
          } else {
            this.dateArr = res.result;
            this.nowTime = this.dateArr[0];
            this.type = this.nowTime.status;
            if (!this.dateArr || this.dateArr.length == 0) {
              // 存在请求到但是为空
              this.loading = false;
              this.timeShow = false;
              this.datasource = [];
              this.columns = [];
              this.pagationvisiable = false;
            } else {
              this.pagination.current = 1;
              this.getsalaryResult(
                this.pagination.current,
                this.nowOrgId,
                this.nowTime.date
              );
            }
            // 控制 工资发放按钮是否存在
            if (this.nowTime.status == 0) {
              this.ctype = 0;
            } else if (this.nowTime.status == 9) {
              this.ctype = 9;
            }
          }
        })
        .catch((err) => {
          // 请求时间失败
          this.loading = false;
          this.datasource = [];
          this.columns = [];
          showError(err);
        });
    },
    //工资发放
    payProvide() {
      let data = {
        date: this.nowTime.date,
        orgid: this.nowOrgId,
      };
      salaryDirection(data)
        .then((res) => {
          this.isShowpayprovide = true;
          this.provideRes.result = res.result;
          this.provideRes.nowOrgId = this.nowOrgId;
          this.provideRes.nowTime = this.nowTime;
          this.provideRes.uniType = 4;
        })
        .catch((err) => {
          showError(err);
        });
    },
    payupload() {
      this.$refs.fileBtn.value = null;
      this.$refs.fileBtn.dispatchEvent(new MouseEvent("click"));
    },
    //上传文件
    uploadFile(event) {
      let file = event.target.files[0];
      let data = {
        file: file,
        orgid: this.nowOrgId,
      };
      importmanually(data)
        .then((res) => {
          this.fileName = file.name;
          this.taskid = res.result;
          this.defaultInfo = "正在上传";
          this.asyncfunction(this.taskid);
        })
        .catch((error) => {
          showError(error);
        });
    },
    // 轮循获取进度
    asyncfunction(data) {
      let _that = this;
      taskProgress(data)
        .then((res) => {
          //进度
          this.progress = res.result.progress;
          //任务类型
          this.stage = res.result.stage;
          //状态
          this.status = res.result.status;
          //总条数
          this.total = res.result.total;
          //完成后地址
          this.downloadurl = res.result.data;
          if (res.result.status === "FINISH") {
            if (res.result.data) {
              download(this.downloadurl);
            } else {
              this.$notification.success({
                message: "提示",
                description: "文件上传成功!",
                duration: 3,
              });
              this.selectOrg();
            }
          } else if (res.result.status == "ERROR") {
            clearInterval(this.myInterval);
          } else if (res.result.status == "CANCEL") {
            clearInterval(this.myInterval);
          } else {
            this.myInterval = window.setTimeout(() => {
              _that.asyncfunction(data);
            }, 2000);
          }
        })
        .catch((error) => {
          showError(error);
        });
    },
    exportHandler() {
      let data = {
        date: this.nowTime.date,
        orgid: this.nowOrgId,
        usertype: 1,
      };
      exportmanually(data)
        .then((res) => {
          this.visible = false;
          this.taskid = res.result;
          this.asyncfunction(this.taskid);
        })
        .catch((err) => {
          showError(err);
        });
    },
    socialHandler() {
      let data = {
        date: this.nowTime.date,
        orgid: this.nowOrgId,
        usertype: 4,
      };
      socialmanually(data)
        .then((res) => {
          this.visible = false;
          this.taskid = res.result;
          this.asyncfunction(this.taskid);
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 关闭工资发放弹窗
    closePayprovide() {
      this.isShowpayprovide = false;
    },
    //请求其他时间的 接口数据
    getOtherTimeData(val) {
      this.getsalaryResult(this.pagination.current, this.nowOrgId, val);
      for (var i = 0; i < this.dateArr.length; i++) {
        if (this.dateArr[i].date == val) {
          this.nowTime = this.dateArr[i];
          if (this.dateArr[i].status == 0) {
            this.ctype = 0;
          } else if (this.dateArr[i].status == 9) {
            this.ctype = 9;
          }
        }
      }
    },
    //变动 还是 全部
    AllorChange(val) {
      if (val == "change") {
        this.all = false;
        this.noData = true;
        this.ischange = 1;
        this.pagination.current = 1;
        this.pagination.pageSize = 10;
        if (this.nowTime.date) {
          this.getsalaryResult(
            this.pagination.current,
            this.nowOrgId,
            this.nowTime.date
          );
        } else {
          this.all = true;
          this.noData = false;
        }
      } else if (val == "all") {
        this.all = true;
        this.loading = true;
        this.ischange = 0;
        this.pagination.current = 1;
        this.pagination.pageSize = 10;
        if (this.nowTime.date) {
          this.getsalaryResult(
            this.pagination.current,
            this.nowOrgId,
            this.nowTime.date
          );
        } else {
          this.loading = false;
        }
      }
    },
    //  查看人员工资详情
    getsalarydetail(record) {
      const { href } = this.$router.resolve({
        name: "salaryDetail",
        query: {
          date: this.nowTime.date,
          userid: record.userid,
          status: this.nowTime.status,
        },
      });
      window.open(href, "_blank");
    },
    customRow: function (record) {
      //点击行
      return {
        on: {
          click: function () {
            return;
          },
        },
      };
    },
    //请求方法 current（当前页数）
    getsalaryResult(current, orgid, time) {
      this.loading = true;
      if (this.type === 0) {
        this.userstatus = 1;
      } else if (this.type === 1) {
        this.userstatus = 1;
      } else if (this.type === 9) {
        this.userstatus = 4;
      }
      var data = {
        needtotal: true,
        pagenum: this.pagination.current,
        orgid: orgid, //组织id
        pagesize: this.pagination.pageSize,
        usertype: this.userstatus,
        ischange: this.ischange,
        date: time, //时间
      };
      salaryResult(data)
        .then((res) => {
          if (!res.result) {
            //  根据 为只返回 success 清楚所有数据
            this.loading = false;
            this.datasource = [];
            this.datasourceChange = [];
            this.columns = [];
            this.columnsChange = [];
            this.pagationvisiable = false;
          } else {
            let index = 0;
            let fatherIndex = 0;
            let arr = []; //最终的行数据 数组
            //表格列数据
            for (let i = 0; i < res.result.thead.length; i++) {
              if (i == 0) {
                res.result.thead[i].dataIndex = "username";
                res.result.thead[i].key = "username";
                res.result.thead[i].align = "center";
                res.result.thead[i].width = "8%";
                //宽度 暂时不考虑
              } else {
                if (res.result.thead[i].children) {
                  for (
                    let j = 0;
                    j < res.result.thead[i].children.length;
                    j++
                  ) {
                    res.result.thead[i].children[j].dataIndex = index;
                    res.result.thead[i].children[j].key = index;
                    index++;
                    res.result.thead[i].children[j].align = "center";
                  }
                  //父类表头
                  res.result.thead[i].dataIndex = fatherIndex; //用不到的
                  res.result.thead[i].key = `father${fatherIndex}`;
                  fatherIndex++;
                  res.result.thead[i].align = "center";
                } else {
                  res.result.thead[i].dataIndex = index;
                  res.result.thead[i].key = index;
                  index++;
                  res.result.thead[i].align = "center";
                }
              }
            }
            res.result.thead.push({
              dataIndex: "operate",
              title: "操作",
              key: "operate",
              align: "center",
              width: "7%",
              scopedSlots: { customRender: "operate" }, //插槽
            });
            this.columns = res.result.thead; //列 数据
            this.columnsChange = res.result.thead;
            //表格行数据
            let datasourceArr = res.result.salaryResultVo.rows;
            for (let m = 0; m < datasourceArr.length; m++) {
              let obj = {};
              obj.username = datasourceArr[m].username;
              obj.key = `datasource${m}`;
              obj.userid = datasourceArr[m].userid;
              for (let n = 0; n < datasourceArr[m].detail.length; n++) {
                obj[n] = datasourceArr[m].detail[n];
              }
              arr.push(obj);
              this.datasourceChange = arr;
            }
            this.pagationvisiable = true;
            this.pagination.total = res.result.salaryResultVo.total;
            this.datasource = arr;
            this.loading = false;
          }
        })
        .catch((err) => {
          this.loading = false;
          this.datasource = [];
          this.datasourceChange = [];
          this.columns = [];
          this.columnsChange = [];
          showError(err);
        });
    },
  },
};
</script>
<style lang="less" scoped>
@media screen and (max-width: 1500px) {
  .ant-table-tbody tr td {
    padding: 10px 2px;
  }
  .ant-table-thead tr th {
    font-size: 15px;
    padding: 12px 8px;
  }
}
.allUnitSalaryDefend {
  height: 100%;
  .ant-layout {
    height: 100%;
  }
  .ant-layout-content {
    padding: @layout-space-base;
    .layout-content {
      padding-top: @layout-space-base;
      overflow: hidden;
      position: relative;
      height: 100%;
      width: 100%;
      background-color: #fff;
      // layout-content 头部
      .header {
        padding: @content-padding-v @content-padding-h;
        width: 100%;
        margin: 0 auto;
        display: grid;
        grid-template-columns: 40% 60%;
        .selectgroup {
          .changeSelect {
            width: 20%;
            float: right;
          }
          .timeSelect {
            width: 20%;
            margin-right: @content-padding-v;
            float: right;
          }
          .orginput {
            width: 20%;
            margin-right: @content-padding-v;
            float: right;
          }
        }
        .providebtn {
          display: flex;
          .fileBtn {
            width: 0px;
            height: 0px;
            opacity: 0;
          }
        }
      }
      // layout-content 内容 table
      .container {
        max-height: 537px;
        padding: 0 24px;
        overflow: auto;
        .tableCls {
          margin: 0 auto;
          width: 100%;
          height: 100%;
          .detail {
            color: @primary-color;
            cursor: pointer;
          }
        }
      }
      // layout-content 内容 footer 分页器
      .footer {
        display: flex;
        justify-content: flex-end;
        height: 32px;
        margin: @content-padding-v @content-padding-h;
        .pagation {
          height: 100%;
        }
      }
    }
  }
  /deep/.ant-input-group
    > .ant-input-affix-wrapper:not(:first-child)
    .ant-input {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
  }
  .progress {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 50%;
  }
}
</style>