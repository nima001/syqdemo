<template>
  <a-layout class="monitorstrategyinfo">
    <a-spin :spinning="spinning" wrapperClassName="form-submit-spin" :delay="300">
      <div class="monitorstrategy-form">
        <div class="body">
          <a-form class="form" :form="form" >
            <div class="title-bar">基本信息</div>
            <a-form-item label="策略名称:" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }" >
              <a-input 
                type="text" 
                v-decorator="['name',{initialValue: record.name||'', rules:[{required: true, message:'请输入策略名称'}]}]" 
              />
            </a-form-item>
            <a-form-item label="校验对象:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
              <a-select 
                v-decorator="['checkobj',{initialValue: record.checkobj||'', rules:[{required:true,message:'请选择校验对象'}]}]" 
                placeholder="请选择校验对象" 
              >
                <a-select-option 
                  v-for="(item,index) in checkobjectList" 
                  :key="index" 
                  :value="item.value" 
                >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="策略类型:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
              <a-select 
                v-decorator="['strategytype',{initialValue: record.strategytype||'', rules:[{required:true,message:'请选择策略类型'}]}]" 
                placeholder="请选择策略类型"
              >
                <a-select-option 
                  v-for="(item,index) in strategytypeList" 
                  :key="index" 
                  :value="item.value" 
                >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="运行状态:" :label-col="{ span: 2 }" :wrapper-col="{ span: 5}" >
              <span class="runstatusclass">停用</span>
              <a-switch class="runstatusclass" 
                @change="onRunstatusChange" 
                v-decorator="['runstatus', { initialValue: record.runstatus === 1, valuePropName: 'checked'}]"
              />
              <span>启用</span>
            </a-form-item>
            <a-form-item label="策略描述" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }" >
              <a-textarea :rows="5" v-decorator="['warntemplate',{initialValue: record.warntemplate}]" placeholder="规则：XXXXXXXXXXXXX（纯文本编辑，方便理解规则）"></a-textarea>
            </a-form-item>
            <div class="title-bar">规则内容</div>
            <a-form-item label="校验方式:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
              <a-select
                v-decorator="['checktype',{initialValue: record.checktype, rules:[{required:true,message:'请选择校验方式'}]}]"
                placeholder="请选择校验方式"
                @change="onChecktypeChange"
              >
                <a-select-option
                  v-for="(item,index) in checktypeList"
                  :key="index"
                  :value="item.value"
                >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="预设方案:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" v-if="record.checktype == 2">
              <a-select
                v-decorator="['strategyvalue',{initialValue: record.strategyvalue, rules:[{required:true,message:'请选择预设方案'}]}]"
                placeholder="请选择预设方案"
              >
                <a-select-option
                  v-for="(item,index) in presetList"
                  :key="index"
                  :value="item.value"
                >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <div class="presetContent" v-else>
              <a-form-item label="策略规则:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
                <a-button class="setfilte" @click="setFilte">
                  <a-icon type="plus-circle" />规则配置
                </a-button>
                <a-input 
                  type="hidden" 
                  v-decorator="['filter',{initialValue: record.filter, rules:[{required:true,message:'请设置过滤条件'}]}]" 
                />
              </a-form-item>
              <!-- <a-form-item label="策略规则" :label-col="{ span: 2 }" :wrapper-col="{ span: 10 }" >
                <a-input v-decorator="['filter',{initialValue: record.filter}]"/>
              </a-form-item> -->
              <a-form-item label="策略替换" :label-col="{ span: 2 }" :wrapper-col="{ span: 10 }" >
                <a-radio-group
                  name="replace"
                  @change="onReplaceChange"
                  v-decorator="['replace',{initialValue: record.replace, rules:[ {required:true,message:'请选择是否替换'}] }]"
                >
                  <a-radio :value="1"> 是 </a-radio>
                  <a-radio :value="0"> 否 </a-radio>
                </a-radio-group>
              </a-form-item>
              <a-form-item label="字段选择" :label-col="{ span: 2 }" :wrapper-col="{ span: 4 }" v-if="record.replace" >
                <a-button class="setfilte" @click="selectReplaceFields">
                  <a-icon type="plus-circle" />选择字段
                </a-button>
                <a-input type="hidden" v-decorator="['replacerule',{initialValue: record.replacerule}]" />
              </a-form-item>
            </div>
            <div class="title-bar">触发设置</div>
            <a-form-item label="触发方式" :label-col="{ span: 2 }" :wrapper-col="{ span: 3 }" >
                <a-checkbox
                  @change="onTaskAutoRunChange" 
                  v-decorator="['autorun',{initialValue:record.autorun === 1,valuePropName: 'checked'} ]"
                ></a-checkbox>
            </a-form-item>
            <a-form-item label="触发时间" :label-col="{ span: 2 }" :wrapper-col="{ span: 4 }" v-if="record.autorun === 1" >
              <a-input v-decorator="['frequency',{initialValue: record.frequency,rules:[{required:true}]}]" />
            </a-form-item>
            <a-form-item label="问题描述" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }" >
              <a-textarea :rows="5" v-decorator="['description',{initialValue: record.description}]" placeholder="运行监测问题列表显示内容（支持参数加文本编辑）"></a-textarea>
            </a-form-item>
            <a-form-item label="推送方式" :label-col="{ span: 2 }" :wrapper-col="{ span: 10 }" >
              <a-checkbox-group
                name="noticetype"
                v-model="noticetypCheckedList"
                :options="noticetypeList"
                @change="onNoticetypeChange"
              >
              </a-checkbox-group>
              <a-input type="hidden" v-decorator="['noticetype',{initialValue: record.noticetype}]" />
            </a-form-item>
          </a-form>
        </div>
        <div class="footer">
          <a-button type="primary" @click="handleSubmit">提 交</a-button>
        </div>
      </div>
    </a-spin>
  </a-layout>
</template>
<script>
import { Layout, Spin, Form, Row, Col, Button, Input, Select, Checkbox, Switch, Icon, Radio, Modal} from "ant-design-vue";
import { getMonitorStrategy, addMonitorStrategy, updateMonitorStrategy,listPresets} from "@/person-shaoxing/api/monitor";
import { showError } from "@/framework/utils/index";
export default {
  components: {
    ALayout: Layout,
    ASpin: Spin,
    AForm: Form,
    AFormItem: Form.Item,
    AButton: Button,
    AInput: Input,
    ARow: Row,
    ACol: Col,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATextarea: Input.TextArea,
    ACheckbox: Checkbox,
    ACheckboxGroup: Checkbox.Group,
    ASwitch: Switch,
    AIcon: Icon,
    ARadio: Radio,
    ARadioGroup: Radio.Group,
    AModal: Modal,
  },
  data() {
    let checkobjectList = [
      {text:"人员",value:1},
      {text:"机构",value:2}
    ];
    return {
      spinning: false,
      record: {
        noticetype: "sysmsg",
        autorun: 0,
        replace: 0
      },
      checkobjectList: checkobjectList ,
      strategytypeList: [],
      checktypeList: [],
      noticetypeList: [],
      noticetypCheckedList: ["sysmsg"],
      presetList:[],
    };
  },
  beforeCreate() {
    this.form = this.$form.createForm(this);
  },
  created(){
    this.dictList();
    this.preSetList();
    let id = this.$route.query.id;
    if(id){
      this.getMonitorStrategy(id)
      this.record.id = id;
    }
  },
  watch:{
    'record.checktype'(oldValue,newValue){
      console.log(oldValue,newValue);
    }
  },
  methods:{
    dictList(){
      this.strategytypeList = this.$store.getters.dict("person.monitor.strategytype");
      this.checktypeList = this.$store.getters.dict("person.monitor.checktype");
      this.noticetypeList = this.$store.getters.dict("person.messagechannel")||[];
      for(let [index, elem] of this.noticetypeList.entries()){
        elem.label = elem.text; 
      }
    },
    checkList(){
      this.noticetypCheckedList = (this.record && this.record.noticetype) ? this.record.noticetype.split(",") : [];
    },
    preSetList(){
      listPresets().then(resp => {
        this.presetList = resp.result;
      })
    },
    getMonitorStrategy(id){
      getMonitorStrategy(id).then(resp => {
        this.record = resp.result;
        this.checkList();
      })
    },
    handleSubmit(){
      this.form.validateFields((err, values) => {
        if (!err) {
          this.spinning = true;
          if(this.record.id){
            values.id = this.record.id;
            updateMonitorStrategy(values)
              .then(resp => {
                this.spinning = false;
                this.$notification.success({
                  message: "提示",
                  description: "修改成功!",
                  duration: 3
                });
              })
              .catch(err => {
                this.spinning = false;
                showError(err);
              })
          }else{
            addMonitorStrategy(values)
              .then(resp => {
                this.spinning = false;
                this.record.id = resp.result;
                this.$notification.success({
                  message: "提示",
                  description: "添加成功!",
                  duration: 3
                });
              })
              .catch(err => {
                this.spinning = false; 
                showError(err); 
              })
          }
        }
      });
    },
    onRunstatusChange(checked){
      console.log(checked);
    },
    onChecktypeChange(value){
      this.record.checktype = value;
      console.log(this.record.checktype);
      console.log(value);
    },
    setFilte(e){
      console.log(e);
    },
    onReplaceChange(e){
      this.record.replace = e.target.value;
    },
    selectReplaceFields(e){
      console.log(e);
    },
    onTaskAutoRunChange(e){
      if(e.target.checked){
        this.record.autorun = 1;
      }else{
        this.record.autorun = 0;
      }
    },
    onNoticetypeChange(checkedValues){
      this.record.noticetype = checkedValues.toString();
    }
  }
};
</script>
<style lang="less" scoped>
.monitorstrategyinfo{
  height: 100%;
  padding: @layout-space-base;
  .form-submit-spin{
    height: 100%;
    /deep/.ant-spin-container{
      height: 100%;
    }  
  }
  .monitorstrategy-form{
    height: 100%;
    display: flex;
    flex-direction: column;
    background-color: @white;
    border-radius: @border-radius-base;
    padding: 10px 0;
    > .body{
      flex-shrink: 10;
      -webkit-flex-shrink: 10;
      min-height: 0;
      overflow: auto;
      .form{
        padding: 0 10px;
        .runstatusclass{
          margin-right: 10px;
        }
        .title-bar {
          margin: 10px 0;
          line-height: 1em;
          border-left: 5px solid @primary-color;
          font-size: 18px;
          text-indent: 5px;
          color: @primary-color;
        }
        .setfilte{
          border: @primary-color dashed 1px;
          width: 100%;
          .anticon{
            color: @primary-color;
          }
        }
      }
    }
    .footer{
      padding: @padding-sm @padding-lg;
      text-align: center;
      margin-top: 10px;
      button:first-child{
        margin-right: 20px;
      }
    }
  }
}
</style>