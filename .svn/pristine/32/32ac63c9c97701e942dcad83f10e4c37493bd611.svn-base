<template>
  <a-layout class="form-design">
		<a-layout-sider class="components" theme="light" :width="300">
			<div class="title">布局</div>
			<ul>
				<li v-for="w in layouts" :key="w.name">
					<div draggable="true" :ref="'compnent_'+w.name"
						@dragstart="onDragStart($event, w)"
						@dragend="onDragEnd"
						@click="onClick(w)"
					><CustomIcon :type="w.icon"/>{{w.title}}</div>
				</li>
			</ul>
			<div class="title">组件</div>
			<ul>
				<li v-for="w in widgets" :key="w.name">
					<div draggable="true" :ref="'compnent_'+w.name"
						@dragstart="onDragStart($event, w)"
						@dragend="onDragEnd"
						@click="onClick(w)"
					><CustomIcon :type="w.icon"/>{{w.title}}</div>
				</li>
			</ul>
		</a-layout-sider>
		<a-layout-content class="from-display">
			<div class="drag-area" :class="{empty: empty}"
				@dragover.prevent="onDragOver" 
				@dragenter.prevent="onDragEnter"
				@dragleave="onDragLeave"
				@drop="onDrop"
				@click="onFormClick"
				@mouseover="onMouseOver"
				@mouseleave="onMouseLeave"
			>
				<CustomForm v-if="!empty" :config="schema" ref="form"/>
				<div class="aux-box" ref="auxBox">
					<ComponentTools v-if="selected"
						:style="{
							width: `${selectedRect.width}px`, height: `${selectedRect.height}px`, 
							top: `${selectedRect.top}px`, left: `${selectedRect.left}px`
						}"
						:component="selected" 
						@change="onParentSelect"
						@hover="(item) => hover = item && item.instance"
						@dragstart="onDragStart($event, selected)"
						@dragend="onDragEnd"
						@move="onMove"
						@delete="onDelete"
					/>
					<div v-if="drag.guides" class="guides" :style="{
						width: `${drag.guides.width}px`, height: `${drag.guides.height}px`,
						top: `${drag.guides.top}px`, left: `${drag.guides.left}px`
					}"></div>
				</div>
			</div>
		</a-layout-content>
		<a-layout-sider class="settings" theme="light" :width="300">
			<template v-if="selected">
				<a-breadcrumb>
					<a-breadcrumb-item v-for="(item, index) in [...selected.parents].reverse()" :key="index">
						<a @click="onParentSelect(item)"
							@mouseenter="hover = item.instance"
							@mouseleave="hover = undefined"
						>{{item.title}}</a>
					</a-breadcrumb-item> 
					<a-breadcrumb-item >{{selected.title}}</a-breadcrumb-item> 
				</a-breadcrumb>
				<a-collapse :bordered="false">
					<a-collapse-panel>
						<template #header>
							<a-form-item
								label="字段标识"
								:required="true" 
							>
								<a-input v-model="selected.instance.schema.name"/>
							</a-form-item>
						</template>
					</a-collapse-panel>
					<a-collapse-panel>
						<template #header>
							<a-form-item
								label="字段名称"
								:required="true" 
							>
								<a-input v-model="selected.instance.schema.title"/>
							</a-form-item>
						</template>
					</a-collapse-panel>
				</a-collapse>
				<template v-if="selected.children">
					<a-form-item label="配置项">
						<draggable class="item-list"
							v-model="selected.children" 
							tag="ul"
							handle='.drag-handle'
							:animation="200"
							ghost-class="ghost"
						>
							<transition-group>
								<li v-for="(item, index) in selected.children" :key="getItemKey(item)">
									<a-icon type="menu" class="drag-handle"/>
									<a-input-number v-model="item.span" :min="1" :max="24" placeholder="所占格数"/>
									<a-icon class="delete" type="minus-circle" @click="deleteItem(index)"/>
								</li>
							</transition-group>
						</draggable>
						<a-button type="dashed" style="width:150px" @click="addItem">
							<a-icon type="plus" /> 添加项
						</a-button>
					</a-form-item>
				</template>
			</template>
		</a-layout-sider>
	</a-layout>
</template>
<script>
import { Layout, Icon, Form, Input, InputNumber ,Button, Breadcrumb, Collapse } from "ant-design-vue";
import draggable from "vuedraggable";
import CustomIcon from '@/framework/components/CustomIcon'
import ComponentTools from './components/ComponentTools'
import CustomForm from './Form'

import { cloneDeep } from 'lodash'
import { addProperty, removeSelf, indexOfParent, propsSize } from "@/formdesign/utils/schema"
import { findComponentByCode, generateCode, getOrderComptByType } from '@/formdesign/utils/index'
import components from '../components/index'

/**
 * 表单编辑器
 */
export default {
	name: 'form-design',
	components: {
		ALayout: Layout,
		ALayoutSider:Layout.Sider,
		ALayoutContent:Layout.Content,
		AIcon: Icon,
		AFormItem: Form.Item,
		AInput: Input,
		AInputNumber: InputNumber,
		AButton: Button,
		ABreadcrumb: Breadcrumb,
		ABreadcrumbItem: Breadcrumb.Item,
		ACollapse: Collapse,
		ACollapsePanel: Collapse.Panel,
		draggable,
		CustomIcon, 
		ComponentTools,
		CustomForm
	},
	props: {
		value: {
			type: Object,
			default: () => ({})
		},
		extComponents: {//扩展组件
			type: Object
		}
	},
	data(){
		return {
			schema: this.value,
			formCompts: components,
			drag: {
				from: undefined,
				to: undefined,
				guides: undefined,
			},
			hover: undefined,
			selected: undefined,
			selectedRect: undefined,
		}
	},
	computed: {
		layouts(){
			return getOrderComptByType(this.formCompts, 'layout')
		},
		widgets(){
			return getOrderComptByType(this.formCompts, 'widget')
		},
		decorators(){
			return getOrderComptByType(this.formCompts, 'decorator')
		},
		empty(){
      return !(this.schema && this.schema.properties && Object.keys(this.schema.properties).length > 0);
		},
	},
	watch: {
		hover(v, oldV){
			if(oldV){
				oldV.$el.classList.remove('component-hover');
			}
			if(v){
				v.$el.classList.add('component-hover');
			}
		},
		selected(c){
			this.setSelectedRect();
		}
	},
	mounted(){
		this.initCmptList();
		window.addEventListener('resize', this.setSelectedRect);
	},
	beforeDestroy(){
    window.removeEventListener("resize", this.setSelectedRect);
  },
	methods: {
		async initCmptList(){
			
		},
		setSelectedRect(){
			if(this.selected){
				let auxBox = this.$refs.auxBox.getBoundingClientRect();
				const { width, height, top, left} = this.selected.instance.$el.getBoundingClientRect();
				this.selectedRect = {
					width, 
					height, 
					top: top - auxBox.top,
					left: left - auxBox.left,
				}
			}else{
				this.selectedRect = {};
			}
		},
		getItemKey(item){
			return item._id || (item._id = generateCode());
		},
		deleteItem(index){
			this.component.children.splice(index, 1);
		},
		addItem(){
			this.component.children.push({span: 6});
		},
		onClick(w){//点击添加组件，如选中了选中组件添加到该组件后面否则添加到表单的最后
			if(this.selected){
				let {instance: { schema }} = this.selected;
				let index = indexOfParent(schema);
				if(index >= 0){
					this.addComponent(schema.parent, w, index+1);
				}
			}else{
				let form = this.$refs.form 
				this.addComponent(form && form.schema, w);
			}
		},
		onDragStart(e, w){//开始拖拽组件
			if(w.instance){
				let ghost = this.$refs['compnent_'+ w.name];
				if(ghost && ghost[0]){
					e.dataTransfer.setDragImage(ghost[0], 15, 15);
				}
			}
			this.drag = { from: w, to: undefined, guides: undefined };
		},
		onDragOver(e){
			const path = this.getComponentPath(this.getTargetCompnent(e));
			if(path){
				const component = path.find(item => item._formComponentType == 'layout.pane'), 
					form = this.$refs.form, instance = this.drag.from.instance;
				this.drag.guides = this.calcGuides(
					instance && instance.$el, 
					component ? component.$el : e.currentTarget,
					e.clientX, e.clientY
				);
				this.drag.to = component || form;	
			}else{
				this.drag.guides = undefined;
			}
		},
		onDragEnter(e){
			this.drag.counter = (this.drag.counter || 0) + 1;
		},
		onDragLeave(e){
			this.drag.counter--;
			if(this.drag.counter == 0){
			// if(!e.currentTarget.contains(e.relatedTarget)){//document-fragment不是子元素
				this.drag.guides = undefined;
			}
		},
		onDrop(e){
			let { from, to, guides } = this.drag;
			if(guides){
				this.addComponent(to && to.schema, from, guides.index);
			}
		},
		onDragEnd(e){
			this.drag = {};
		},
		onMouseOver(e){
			let path = this.getComponentPath(this.getTargetCompnent(e));
			if(path){
				this.hover = path.find(item => {
					return !!this.formCompts[item.schema['x-component']];
				});
			}
		},
		onMouseLeave(e){
			this.hover = undefined;
		},
		onFormClick(e){
			this.selectComponent(this.getTargetCompnent(e));
		},
		onDelete(){
			let { instance: { schema } } = this.selected;
			removeSelf(schema);
			this.forceRefresh(schema.root.toJSON()).then(() => {
				this.selected = undefined;
			});
		},
		onMove(index){
			let { instance: { schema } } = this.selected;
			this.addComponent(schema.parent, this.selected, index);
		},
		onParentSelect(parent){
			const ps = this.selected.parents;
			parent.parents = ps.slice(ps.indexOf(parent) + 1); 
			this.selected = parent;
			this.hover = undefined;
		},
		selectComponent(vCompnent){
			let list = [];
			this.getComponentPath(vCompnent).forEach(item => {
				let key = item.schema['x-component'];
				let c = this.formCompts[key];
				if(c && c.type != 'decorator'){
					list.push({ ...c, instance: item });
				}
			})
			if(list.length){
				let com = list.shift();
				com.parents = list;
				this.selected = com;
			}else{
				this.selected = undefined;
			}
		},
		addComponent(targetSchema, sourceComponent, index){
			let { instance, initProps } = sourceComponent;
			let prop;
			if(!instance){
				prop = initProps();
			}else{
				prop = removeSelf(instance.schema);
			}
			let rootSchema, code;
			if(targetSchema){
				let s = addProperty(targetSchema, prop, index);
				code = s.name;
				rootSchema = s.root.toJSON();
			}else{//表单为空，新建schema
				code = generateCode();
				rootSchema = { type: 'object', properties: { [code]: prop } };
			}
			this.forceRefresh(rootSchema).then(() => {//选中当前操作的组件
				let cs = findComponentByCode(this.$refs.form, code);
				this.selectComponent(cs[0]);
			})
		},
		forceRefresh(schema){
			//FIXME sunwen formily properties列表更新存在BUG 强制表单重新渲染
			// console.log(schema)
			this.schema = undefined;
			return this.$nextTick().then(() => {	
				this.schema = schema;
				// this.$nextTick(() => {
				// 	//TODO 强制刷新恢复数据
				// })
			})
		},
		getFormData(){
			// this.form.submit((values) => {
      //   console.log(values)
      // }).catch(error => {
      //   console.log(error)
      // })
		},
		getTargetCompnent(e){
			let path = e.path || (e.composedPath && e.composedPath());
			let vue = path.find(item => !!item.__vue__);
			if(!vue){
				return;
			}
			return vue.__vue__;
		},
		getComponentPath(vCompnent){
			let arr = [], index = -1, form = this.$refs.form;
			while(vCompnent){
				if(vCompnent._formComponentType){
					if(index >= 0 && vCompnent._formComponentType == 'decorator'){
						arr[index] = vCompnent;
					}else{
						arr.push(vCompnent);
						index++;
					}
				}
				vCompnent = vCompnent.$parent;
				if(vCompnent == form){
					break;
				}
			}
			return arr;
		},
		calcGuides(fromEl, toEl, posX, posY){//计算放入位置的参考线
			let rect = toEl.getBoundingClientRect(), 
				style = window.getComputedStyle(toEl);
			let paddingLeft = parseFloat(style.paddingLeft), 
				paddingRight = parseFloat(style.paddingRight),
				paddingTop = parseFloat(style.paddingTop),
				borderLeft = parseFloat(style.borderLeftWidth), 
				borderRight = parseFloat(style.borderRightWidth), 
				borderTop = parseFloat(style.borderTopWidth);
			let p = {
				height: 4,
				width: rect.width - paddingLeft - paddingRight - borderLeft - borderRight,
				left: rect.left + paddingLeft + borderLeft,
			}
			let d = Number((rect.top + paddingTop + borderTop - posY).toFixed(1));//初始化在容器顶部
			let children = [...toEl.children];
			let index = 0;
			for(let item of children){
				let {top, bottom} = item.getBoundingClientRect();
				let s = Number((top - posY).toFixed(1));//取一位小数，浮点数计算偏差
				if(Math.abs(s) <= Math.abs(d)){
					d = s;
				}else{
					break;
				}
				s = Number((bottom - posY).toFixed(1));
				if(Math.abs(s) <= Math.abs(d)){
					index++;
					d = s;
				}else{
					break;
				}
			}
			const fromIndex = children.indexOf(fromEl);
			if(fromEl && fromIndex >= 0){//同层级调序
				if(index == fromIndex || index == fromIndex + 1){//位置未发生变更
					return;
				}else if(index > fromIndex){//下移
					index--;
				}
			}
			p.top = d + posY - p.height/2;
			p.index = index;
			const { top, left } = this.$refs.auxBox.getBoundingClientRect();
			p.top -= top;
			p.left -= left;
			return p;
		},
	}
}
</script>
<style lang="less" scoped>
.form-design{
	height: 100%;
	background-color: white;
	border-radius: @border-radius-base;
	overflow: hidden;
	.from-display{
		& > .drag-area{
			position: relative;
			padding: 30px 20px;
			min-height: 100% !important;
		}
		.aux-box{
			// transform: perspective(1px) translate3d(0, 0, 0);
			position: absolute;
			width: 100%;
			height: 100%;
			top: 0;
			left: 0;
			pointer-events: none;
			z-index: 2;
			.component-selection{
				position: absolute;
			}
			.guides{
				position: absolute;
				background-color: @primary-color;
				transition: all .3s cubic-bezier(.06,.7,.23,1);
				pointer-events: none;
			}
		}
		/deep/ .component-hover{
			outline: 1px dashed @accent-color;
			outline-offset: 1px;
			background-color: fade(@accent-color, 5%);
		}
		
		/deep/ .drag-area{
			min-height: 32px;
			&.empty{
				background: rgba(238, 238, 238, 0.3);
				&::before{
					content: '可拖入组件';
					position: absolute;
					top: 50%;
					left: 0;
					width: 100%;
					text-align: center;
					transform: translateY(-50%);
					color: #ccc;
				}
			}
		}
	}
	.components{
		border-right: 1px solid @border-color-split;
		padding: @padding-sm;
		.title{
			color: @text-color-secondary;
		}
		ul{
			overflow: hidden;
			margin: 10px 0;
			li{
				width: 50%;
				float: left;
				padding: 2px;

				& > div{
					height: 34px;
					line-height: 32px;
					background-color: @background-color-base;
					border: 1px solid @background-color-base;
					padding: 0 8px;
					cursor: move;
					&:hover{
						border: 1px dashed @primary-color;
						color: @primary-color;
					}
					.anticon{
						margin-right: 5px;
					}
				}
			}
		}
	}

	.ant-form{
		padding: 12px;
	}

	.cmpt-wrapper{
		//outline: 1px dashed @border-color-base;
		margin-bottom: 4px;
		padding: 1px;
		&:hover{
			outline-color: @primary-color;
		}
	}
	/deep/.cmpt-panel{
		min-height: 81px + 8px;
		outline: 1px dashed @accent-color;
		padding-top: 4px;
		.cmpt-wrapper{
			//outline: 1px dashed @border-color-base;
			margin-bottom: 4px;
			padding: 1px;
			&:hover{
				outline-color: @primary-color;
			}
		}
	}


	.settings{
		border-left: 1px solid @border-color-split;
		overflow: auto;

		.item-list{
			.drag-handle{
				font-size: 1.2em;
				color: hsv(0, 0, 60%);
				margin-right: 10px;
				vertical-align: middle;
				cursor: pointer;
			}
			.ant-input-number{
				vertical-align: middle;
			}
			.delete{
				font-size: 1.4em;
				color: @primary-color;
				margin-left: 8px;
				vertical-align: middle;
				&:hover{
					color: lighten(@primary-color, 20%);
				}
			}
		}
	}
}
</style>