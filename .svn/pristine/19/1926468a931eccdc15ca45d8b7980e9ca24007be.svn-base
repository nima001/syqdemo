<!-- 创建应用 -->
<template>
  <a-layout class="dev-layout">
    <div class="body">
      <p>
        了解应用接入，
        <router-link to="/dev/index">请点击这里</router-link>
      </p>
      <a-form class="app-form" :form="form">
        <a-form-item class="short" label="应用全称">
          <a-input
            v-decorator="[
              'name',
              { rules: [{ required: true, message: '请输入应用全称' }] },
            ]"
          ></a-input>
        </a-form-item>
        <a-form-item class="short" label="应用简称">
          <a-input
            v-decorator="[
              'shortname',
              { rules: [{ required: true, message: '请输入应用简称' }] },
            ]"
          ></a-input>
        </a-form-item>
        <a-form-item label="应用简介">
          <a-textarea
            :rows="4"
            v-decorator="[
              'desc',
              { rules: [{ required: true, message: '请输入应用简介' }] },
            ]"
          />
        </a-form-item>

        <!-- 
        <a-form-item class="short" label="应用图标:">
          <a-upload
          v-decorator="[
                    'icon',
                    {rules: [{ required: true, message: '请上传图标' }]}
                    ]"
            action="https://zhuji2.edcall.cn/call/sys/file/upload"
            list-type="picture-card"
            :file-list="fileList"
            @preview="handlePreview"
            @change="handleChange"
          >
            <div v-if="fileList.length < 1">
              <a-icon type="plus" />
            </div>
          </a-upload>
          <a-modal :visible="previewVisible" :footer="null" @cancel="handleCancel">
            <img alt="example" style="width: 100%" :src="previewImage" />
          </a-modal>
        </a-form-item>-->

        <a-form-item label="接入单位">
          <a-input
            v-decorator="[
              'unit',
              { rules: [{ required: true, message: '请输入接入单位' }] },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="接入码">
          <a-input
            v-decorator="[
              'accessCode',
              {
                rules: [
                  { required: true, message: '请输入接入码' },
                  { validator: handleAccessCode },
                ],
                validateTrigger: 'blur',
              },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="接入秘钥">
          <a-input
            ref="accesskeyFoucs"
            v-decorator="[
              'accessKey',
              { rules: [{ required: true, message: '请输入接入秘钥' }] },
            ]"
          >
            <a-icon
              slot="suffix"
              type="plus"
              title="生成密钥"
              @click="randomKey"
            />
          </a-input>
        </a-form-item>

        <a-form-item class="short" label="接入单位联系人">
          <a-input
            v-decorator="[
              'unitContact',
              { rules: [{ required: true, message: '请输入接入单位联系人' }] },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="联系方式">
          <a-input
            v-decorator="[
              'unitPhone',
              { rules: [{ required: true, message: '请输入正确的联系方式' }] },
            ]"
            @blur="validatePhoneBlur"
          ></a-input>
        </a-form-item>

        <a-form-item label="开发公司">
          <a-input
            v-decorator="[
              'devCompany',
              { rules: [{ required: true, message: '请输入开发公司' }] },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="开发公司联系人">
          <a-input
            v-decorator="[
              'devCompanyContact',
              { rules: [{ required: true, message: '请输入开发联系人' }] },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="联系方式">
          <a-input
            v-decorator="[
              'devCompanyPhone',
              { rules: [{ required: true, message: '请输入正确的联系方式' }] },
            ]"
            @blur="validatePhoneBlur"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="运维联系人">
          <a-input
            v-decorator="[
              'operationContact',
              { rules: [{ required: true, message: '请输入运维联系人' }] },
            ]"
          ></a-input>
        </a-form-item>

        <a-form-item class="short" label="联系方式">
          <a-input
            v-decorator="[
              'operationPhone',

              { rules: [{ required: true, message: '请输入正确的联系方式' }] },
            ]"
            @blur="validatePhoneBlur"
          ></a-input>
        </a-form-item>
        <a-form-item>
          <a-button type="primary" @click="submit">创建应用</a-button>
        </a-form-item>
      </a-form>
    </div>
  </a-layout>
</template>

<script>
import {
  Layout,
  Form,
  Button,
  Input,
  notification,
  Upload,
  Icon,
  Modal,
} from "ant-design-vue";
import { appadd, generate, appcodeIsExist } from "@/dev/api/app";
import { showError } from "@/framework/utils/index";
function getBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });
}
export default {
  data() {
    return {
      boo: 0,
      form: this.$form.createForm(this),
      previewVisible: false,
      previewImage: "",
      fileList: [],
    };
  },

  components: {
    ALayout: Layout,
    AForm: Form,
    AFormItem: Form.Item,
    AButton: Button,
    AInput: Input,
    ATextarea: Input.TextArea,
    notification,
    AUpload: Upload,
    AIcon: Icon,
    AModal: Modal,
  },

  methods: {
    // code规则
    handleAccessCode(rule, value, callback) {
      let reg = new RegExp("[\\u4E00-\\u9FFF]+", "g");
      if (reg.test(value) == true) {
        callback("不能包含中文字符，请重新输入");
      } else if (value.length > 0) {
        this.validExist(value, callback);
      } else {
        callback();
      }
    },
    // 随机生成密钥
    randomKey(e) {
      this.$refs.accesskeyFoucs.focus();
      generate()
        .then((res) => {
          this.form.setFieldsValue({ accessKey: res.result });
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 判断接入码唯一性
    validExist(e, callback) {
      appcodeIsExist(e)
        .then((res) => {
          callback && callback();
        })
        .catch((err) => {
          showError(err);
          let a = eval("(" + err.desc + ")");
          const value = Object.values(a);
          callback(value[0]);
        });
    },
    handleCancel() {
      this.previewVisible = false;
    },
    async handlePreview(file) {
      if (!file.url && !file.preview) {
        file.preview = await getBase64(file.originFileObj);
      }
      this.previewImage = file.url || file.preview;
      this.previewVisible = true;
    },
    handleChange({ fileList }) {
      this.fileList = fileList;
    },
    //   提交表单
    submit() {
      // console.log();
      // return
      if (this.boo == 0) {
        this.form.validateFields((err, values) => {
          if (!err) {
            appadd(values)
              .then((res) => {
                this.$router.push({
                  path: "/dev/createsuccessful",
                  query: { result: values },
                });
              })
              .catch((err) => {
                if (err.code == "form_valid_failed") {
                  let a = eval("(" + err.desc + ")");
                  const value = Object.values(a);
                  const keys = Object.keys(a);
                  const arr = [
                    {
                      message: value[0],
                      field: keys[0],
                    },
                  ];
                  this.form.setFields({
                    [keys[0]]: { value: values[keys[0]], errors: arr },
                  });
                } else {
                  showError(err);
                }
              });
          }
        });
      }
    },
    // 联系方式正则
    validatePhoneBlur(e) {
      const validatePhoneReg = /^1[34578]\d{9}$/;
      const validatePhone = /^(\d{3,4}-)?\d{6,8}$/;
      if (
        !validatePhone.test(e.target.value) &&
        !validatePhoneReg.test(e.target.value)
      ) {
        if (this.boo < 3) {
          this.boo += 1;
        }
        const arr = [
          {
            message: "您输入的手机格式不正确!",
            field: e.target.id,
          },
        ];
        this.form.setFields({
          [e.target.id]: { value: e.target.value, errors: arr },
        });
      } else {
        if (this.boo > 0) {
          this.boo -= 1;
        }
      }
    },
  },
};
</script>
<style lang="less" scoped>
.dev-layout {
  height: 100%;
  width: 100%;
  padding: 10px;
  .body {
    width: 100%;
    height: 100%;
    padding: 8px 10%;
    overflow-y: auto;
    margin: 0 auto;
    background: #fff;
    > p {
      margin-bottom: 10px;
    }
    .app-form {
      width: 80%;
    }
  }
  .ant-form {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    width: 90%;
    margin: 0 auto;
    .ant-form-item {
      width: 100%;
    }
    .short {
      width: 45%;
    }
  }
  .ant-form-item {
    margin-bottom: 0;
  }
  .ant-btn-primary {
    margin-top: 15px;
  }
  /deep/.ant-upload.ant-upload-select-picture-card {
    width: 50px !important;
    height: 50px !important;
  }
  /deep/.ant-upload-list-picture-card .ant-upload-list-item {
    width: 50px !important;
    height: 50px !important;
    margin: 0;
    padding: 3px;
  }
  /deep/.ant-upload-list-picture-card .ant-upload-list-item-uploading-text {
    font-size: 12px;
  }
}
</style>
