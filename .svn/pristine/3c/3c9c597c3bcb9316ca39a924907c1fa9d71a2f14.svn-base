<template>
  <div class="user-basetab">
    <div class="top-btn" v-if="hasPermit('/person/org/user/edit')">
      <template v-if="edit">
        <a-button type="primary" @click="save">保存</a-button>
        <a-button @click="edit=false" style="margin-left: 10px;">取消</a-button>
      </template>
      <a-button v-else type="primary" @click="edit=true">编辑</a-button>
    </div>
    <div class="main-form">
      <user-form :data="user" :form="form" :edit="edit" ref="userForm"/>
    </div>
  </div>
</template>
<script>
import { Button } from "ant-design-vue";
import Form from "../form/Form";
import { showError } from "@/framework/utils/index";
import { updateUser } from "@/person/api/user";
import { getEditableProps } from "@/person/api/org";
export default {
  components: {
    AButton: Button,
    UserForm: Form,
  },
  props: {
    user: {
      type: Object,
      default: () => ({}),
    },
    unittype: {
      type: Number,
    }
  },
  data() {
    return {
      edit: false,
      form: undefined,
    };
  },
  created(){
    if(this.user){
      this.createForm(this.user);
    }
  },
  watch: {
    user(user){
      if(user){
        this.createForm(user);
      }
    },
    unittype(){
      if(this.user){
        this.createForm(this.user);
      }
    }
  },
  methods: {
    save(){
      this.$refs.userForm.validateFileds().then(data => {
        updateUser(this.user._id, data).then(({result}) => {
          this.edit = false;
          if(result){
            Object.keys(result).forEach(key => {
              this.$set(this.user, key, result[key]);
            })
            this.$message.info('保存成功')
          }
        }).catch(error => {
          showError(error);
        });
      }).catch(error => {
        showError({message: '表单验证失败，请检查表单数据'});
      })
    },
    async createForm(user){
      let edit = this.editableProps;
      // if(!edit){
      //   try{
      //     let {result} = await getEditableProps('user');
      //     edit = this.editableProps = result;
      //   }catch(ignore){
      //     //empty
      //   }
      // }
      let list = [ {id: 'base', title: '基本信息', properties: this.getBaseProps(user, edit)} ];
      let workProps = this.getWorkProps(user, edit);
      if(workProps){
        list.push(workProps)
      }
      if(user.usertype == 1){
        list.push({id: 'partwork', title: '兼职、顶岗信息', properties: [
          { code: "work", type: 'group', span: 4, disable: edit && !edit.includes('work'), properties: [
            { label: '工作所在单位', code: 'workorg', type: 'org', span: 2, require: true, mode: 'org', usePermit: false },
            { label: '工作所在科室', code: 'workdept', type: 'org', span: 1, dept: true, location: { code: 'workorg', label: '工作所在单位' }},
            { label: '工作职务级别', code: 'workpositionlevel', type: 'dict', dict: 'usermanage.user.positionlevel', span: 1, require: true},
            { label: '工作人员分类', code: 'workpostkind', type: 'dict', dict: 'usermanage.user.postkind', span: 1, require: true},
            { label: '工作职务名称', code: 'workposition', type: 'text', span: 1, require: true },
            { label: '工作状态', code: 'workstatus', type: 'dict', dict: 'usermanage.user.workstatus', span: 1, require: true },
          ].map(item => {
            if(edit){
              item.disable = !edit.includes(item.code);
            }
            return item;
          })},
        ]});
      }
      let educateProps = this.getEducateProps(user, edit);
      if(educateProps){
        list.push({id: 'educate', title: '教育信息', properties: educateProps});
      }
      let joinProps = this.getJoinProps(user, edit);
      if(joinProps){
        list.push({id: 'join', title: '进员信息', properties: joinProps});
      }
      let contactProps = this.getContactProps(user, edit);
      if(contactProps){
        list.push({id: 'contact', title: '联系信息', properties: contactProps});
      }
      let jobProps = this.getJobProps(user, edit);
      if(jobProps){
        list.push({id: 'job', title: '岗位信息', properties: jobProps});
      }
      let contractProps = this.getContractProps(user, edit);
      if(contractProps){
        list.push({id: 'contract', title: '合同管理', properties: contractProps});
      }
      if(user.usertype != 4){
        list.push({id: 'family', title: '家庭成员关系', properties: [
          { label: '家庭成员', code: "fami", type: 'table', span: 4, disable: edit && !edit.includes('fami'),
            properties: [
              { label: "与本人关系", code: "fami_relation", type: 'dict', dict: "usermanage.user.familyrelation", show: true, span: 1, require: true },
              { label: "姓名", code: "fami_name", type: 'text', span: 1, require: true, show: true },
              { label: "性别", code: "fami_sex", type: 'dict', dict:"usermanage.user.sex", span: 1, require: true, show: true },
              { label: "身份证", code: "fami_idcard", type: 'text', span: 1, show: true},
              { label: "出生日期", code: "fami_birth", type: 'date', span: 1, show: true },
              { label: "政治面貌", code: "fami_politicsface", type: 'dict', dict: "usermanage.user.politicsface", span: 1, show: true },
              { label: "工作单位", code: "fami_workunitandposition", type: 'text', span: 1, show: true },
              { label: "籍贯", code: "fami_area", type: 'text', span: 1 },
              { label: "户口所在地", code: "fami_domicileplace", type: 'text', span: 1 },
              { label: "出生地", code: "fami_birthplace", type: 'text', span: 1 },
              { label: "现居地", code: "fami_liveinplace", type: 'text', span: 1 },
              { label: "职业", code: "fami_job", type: 'text', span: 1 },
              { label: "备注", code: "fami_remark", type: 'text', span: 4, multiline: true }
            ].map(item => {
              if(edit){
                item.disable = !edit.includes(item.code);
              }
              return item;
            })},
        ]});
      }
      this.form = list;
    },
    getBaseProps(user, edit){
      if (user.usertype == 4) {//社工
        return [
          { label: "姓名", code: "username", type: 'text', span: 1, require: true, disable: true },
          { label: "身份证", code: "idcard", type: 'text', span: 1, require: true, disable: true },
          { label: "出生日期", code: "birthday", type: 'date', span: 1, require: true },
          { label: "年龄(周岁)", code: "age", type: 'number', span: 1, require: true },
          { label: "性别", code: "sex", type: 'dict', dict: "usermanage.user.sex", span: 1, require: true },
          { label: "婚姻状况", code: "maritalstatus", type: 'dict', dict: "usermanage.user.maritalstatus", span: 1, require: true },
          { label: "民族", code: "nation", type: 'dict', dict: "usermanage.user.nation", span: 1, require: true },
          { label: "籍贯", code: "nativeplace", type: 'text', span: 1, require: true },
          { label: "户口所在地", code: "address", type: 'text', span: 1 },
          { label: "现居住地", code: "currentaddr", type: 'text', span: 1 },
          { label: "政治面貌", code: "politicsface", type: 'dict', dict: "usermanage.user.politicsface", span: 1, require: true },
          { label: "入党(团)时间", code: "joinpartytime", type: 'date', span: 1 },
          { label: "健康状况", code: "healthstate", type: 'dict', dict: "workflow.custom.health", span: 1, require: true},
          { label: "详细户籍地", code: "nativeaddress", type: 'text', span: 3 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      } else {
        return [
          { label: "姓名", code: "username", type: 'text', span: 1, require: true, disable: true },
          { label: "性别", code: "sex", type: 'dict', dict: "usermanage.user.sex", span: 1, require: true },
          { label: "民族", code: "nation", type: 'dict', dict: "usermanage.user.nation", span: 1, require: true },
          { label: "身份证", code: "idcard", type: 'text', span: 1, require: true, disable: true },
          { label: "出生日期", code: "birthday", type: 'date', span: 1, require: true },
          { label: "婚姻状况", code: "maritalstatus", type: 'dict', dict: "usermanage.user.maritalstatus", span: 1 },
          { label: "籍贯", code: "nativeplace", type: 'text', span: 1, require: true },
          { label: "户口所在地", code: "address", type: 'text', span: 1},
          { label: "现居住地", code: "currentaddr", type: 'text', span: 1},
          { label: "政治面貌", code: "politicsface", type: 'dict', dict: "usermanage.user.politicsface", span: 1, require: true },
          { label: "入党(团)时间", code: "joinpartytime", type: 'date', span: 1 },
          { label: "参加工作时间", code: "worktime", type: 'date', span: 1, require: true },
          { label: "详细户籍地", code: "nativeaddress", type: 'text', span: 3, require: true},
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      }
    },
    getWorkProps(user, edit){
      if (user.usertype == 1 && this.unittype == 1 || this.unittype == 5) {// 行政
        return {id: 'work', title: '编制所在单位信息', properties: [
          { label: "编制所在单位", code: "org.name", type: 'text', span: 2, require: true, disable: true },
          { label: "编制类型", code: "complietype", type: 'dict', dict: "usermanage.user.complietype", span: 1, require: true, disable: true },
          { label: "本人身份", code: "identitytype", type: 'dict', dict: "usermanage.user.identitytype", span: 1, require: true, disable: true },
          { label: "人员所在科室", code: "dept", type: 'org', span: 1, dept: true, location: { code: 'org', label: '编制所在单位' } },
          { label: "职务名称", code: "position", type: 'text', span: 1, require: true },
          { label: "人员分类", code: "postkind", type: 'dict', dict: "usermanage.user.postkind", span: 1, require: true },
          { label: "职务级别", code: "positionlevel", type: 'dict', dict: "usermanage.user.positionlevel", span: 1, require: true },
          { label: "职级级别", code: "dutylevel", type: 'dict', dict: "usermanage.user.dutylevel", span: 1, require: true },
          // { label: "兼任非领导职务", code: "ptpositionlevel", type: 'dict', dict: "usermanage.user.positionlevel", span: 1 },
          { label: "职称名称", code: "posttitle", type: 'dict', dict: "usermanage.user.posttitle", span: 1,require:true },
          { label: "享受待遇职级", code: "treatmentlevel", type: 'dict', dict: "usermanage.user.treatmentlevel", span: 1, require: true },
          { label: "干部管理权限分类", code: "cadresaclclassify", type: 'dict', dict: "usermanage.user.cadresaclclassify", span: 1, require: true },
          { label: "公务员登记", code: "isservant", type: 'dict', dict: 'usermanage.user.servant', span: 1, },
          { label: "政法机构人员分类", code: "zfjgryfl", type: 'dict', dict: 'usermanage.user.zfjgryfl', span: 1 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })}
      } else if (user.usertype == 1 && this.unittype == 2) {// 参公
        return {id: 'work', title: '编制所在单位信息', properties: [
          { label: "编制所在单位", code: "org.name", type: 'text', span: 2, require: true, disable: true },
          { label: "编制类型", code: "complietype", type: 'dict', dict: "usermanage.user.complietype", span: 1, require: true, disable: true },
          { label: "本人身份", code: "identitytype", type: 'dict', dict: "usermanage.user.identitytype", span: 1, require: true, disable: true },
          { label: "个人经费形式", code: "fundform", type: 'dict', dict: "usermanage.org.fundform", span: 1, disable: true },
          { label: "所在科室", code: "dept", type: 'org', span: 1, dept: true, location: { code: 'org', label: '编制所在单位' } },
          { label: "职务名称", code: "position", type: 'text', span: 1, require: true },
          { label: "人员分类", code: "postkind", type: 'dict', dict: "usermanage.user.postkind", span: 1, require: true },
          { label: "职务级别", code: "positionlevel", type: 'dict', dict: "usermanage.user.positionlevel", span: 1, require: true },
          { label: "职级级别", code: "dutylevel", type: 'dict', dict: "usermanage.user.dutylevel", span: 1, require: true },
          { label: "兼任非领导职务", code: "ptpositionlevel", type: 'dict', dict: "usermanage.user.positionlevel", span: 1 },
          { label: "职称名称", code: "posttitle", type: 'dict', dict: "usermanage.user.posttitle", span: 1 },
          { label: "享受待遇职级", code: "treatmentlevel", type: 'dict', dict: "usermanage.user.treatmentlevel", span: 1, require: true },
          { label: "干部管理权限分类", code: "cadresaclclassify", type: 'dict', dict: "usermanage.user.cadresaclclassify", span: 1, require: true },
          { label: "公务员登记", code: "isservant", type: 'dict', dict: 'usermanage.user.servant', span: 1,  },
          { label: "政法机构人员分类", code: "zfjgryfl", type: 'dict', dict: 'usermanage.user.zfjgryfl', span: 1 },
          // { label: '工作状态', code: 'workstatus', type: 'dict', dict: 'usermanage.user.workstatus', span: 1 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })}
      } else if (user.usertype == 1 && this.unittype == 3) {// 事业
        return {id: 'work', title: '编制所在单位信息', properties: [
          { label: "编制所在单位", code: "org.name", type: 'text', span: 2, require: true, disable: true },
          { label: "编制类型", code: "complietype", type: 'dict', dict: "usermanage.user.complietype", span: 1, require: true, disable: true },
          { label: "本人身份", code: "identitytype", type: 'dict', dict: "usermanage.user.identitytype", span: 1, require: true, disable: true },
          { label: "经费形式", code: "fundform", type: 'dict', dict: "usermanage.org.fundform", span: 1, disable: true },
          { label: "所在科室", code: "dept", type: 'org', span: 1, dept: true, location: { code: 'org', label: '编制所在单位' } },
          { label: "职务名称", code: "position", type: 'text', span: 1, require: true },
          { label: "人员分类", code: "postkind", type: 'dict', dict: "usermanage.user.postkind", span: 1, require: true },
          { label: "职务级别", code: "positionlevel", type: 'dict', dict: "usermanage.user.positionlevel", span: 1, require: true },
          { label: "职级级别", code: "dutylevel", type: 'dict', dict: "usermanage.user.dutylevel", span: 1, require: true },
          { label: "职称名称", code: "posttitle", type: 'dict', dict: "usermanage.user.posttitle", span: 1 },
          { label: "获取时间", code: "getdate", type: 'date', span: 1 },
          { label: "职称级别", code: "posttitlelevel", type: 'dict', dict: "usermanage.user.posttitlelevel", span: 1 },
          { label: "聘用职称", code: "hireposttitle", type: 'dict', dict: "usermanage.user.posttitle", span: 1, require: true },
          { label: "聘用时间", code: "hiredate", type: "date", span: 1 },
          { label: "岗位类型", code: "job.jobtype", type: 'dict', dict: "usermanage.user.jobtype", span: 1, require: true },
          { label: "岗位级别", code: "job.joblevel", type: 'dict', dict: "usermanage.user.joblevel", span: 1, require: true },
          { label: "享受待遇职级", code: "treatmentlevel", type: 'dict', dict: "usermanage.user.treatmentlevel", span: 1, require: true },
          { label: "工资来源", code: "salarysource", type: 'dict', dict: "usermanage.user.salarysource", span: 1, require: true },
          { label: "是否双肩挑", code: "mpwork", type: 'bool', span: 1, require: true },
          { label: "干部管理权限分类", code: "cadresaclclassify", type: 'dict', dict: "usermanage.user.cadresaclclassify", span: 1, require: true },
          { label: "晋升时间", code: "promotedate", type: "date", span: 1, require: true },
          // { label: '工作状态', code: 'workstatus', type: 'dict', dict: 'usermanage.user.workstatus', span: 1 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })}
      }else if(user.usertype == 2){//编外
         return {id: 'work', title: '工作信息', properties: [
          { label: "所在单位", code: "org.name", type: 'text', span: 2, require: true, disable: true },
          { label: "本人身份", code: "identitytype", type: 'dict', dict: "usermanage.user.identitytype", span: 1, require: true, disable: true },
          { label: "所在科室", code: "dept", type: 'org', span: 1, dept: true, location: { code: 'org', label: '编制所在单位' } },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })}
      }else if(user.usertype == 3){//雇员
         return {id: 'work', title: '工作信息', properties: [
          { label: "所在单位", code: "org.name", type: 'text', span: 2, require: true, disable: true },
          { label: "本人身份", code: "identitytype", type: 'dict', dict: "usermanage.user.identitytype", span: 1, require: true, disable: true },
          { label: "所在科室", code: "dept", type: 'org', span: 1, dept: true, location: { code: 'org', label: '编制所在单位' } },
          { label: "雇员等级", code: "hirelevel", type: 'dict', dict: "usermanage.user.hirelevel", span: 1 },
          { label: "职务名称", code: "position", type: 'text', span: 1 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })}
      } else if (user.usertype == 4 && this.unittype == 20 || this.unittype == 21 || this.unittype == 22 || this.unittype == 23) {
        return {id: 'work', title: '工作信息', properties: [
          { label: "所属镇街", code: "org.suporg.name", type: 'text', span: 1, disable: true },
          { label: "所属社区", code: "org.name", type: 'text', span: 1, disable: true },
          { label: "实际工作镇街", code: "work[0].workorg.suporg.name", type: 'text', span: 1, disable: true },
          { label: "实际工作岗位", code: "work[0].workorg.name", type: 'text', span: 1, disable: true },
          { label: "党组织职务", code: "party.partypost", type: 'dict', dict: "usermanage.user.partposition", span: 1, require: true },
          { label: "任职时间", code: "party.partyetime", type: 'date', span: 1, require: true },
          { label: "任职年限", code: "party.partyeyear", type: 'number', span: 1, require: true },
          { label: "纪委职务", code: "jwpost", type: 'text', span: 1, require: true },
          { label: "居委会职务", code: "committee.committeepost", type: 'dict', dict: "usermanage.user.commposition", span: 1, require: true },
          { label: "任职时间", code: "committee.committeetime", type: 'date', span: 1, require: true },
          { label: "任职年限", code: "committee.committeeyear", type: 'text', span: 1, require: true },
          { label: "居监会职务", code: "jjhpost", type: 'text', span: 1, require: true },
          { label: "股份经济合作社职务", code: "cooperation.cooperationpost", type: 'dict', dict:'usermanage.user.gdjjhzspost', span: 1, require: true },
          { label: "任职时间", code: "cooperation.cooperationetime", type: 'date', span: 1, require: true },
          { label: "任职年限", code: "cooperation.cooperationeyear", type: 'text', span: 1, require: true },
          { label: "股监会职务", code: "gjhpost", type: 'text', span: 1, require: true },
          { label: "录用时所属镇街", code: "lyssszj.name", type: 'text', span: 1, require: true },
          { label: "录用时所属村社区", code: "lyssssq.name", type: 'text', span: 1, require: true },
          { label: "录用为专职社区工作者时间", code: "hiresqgzztime", type: 'date', span: 1, require: true },
          { label: "录用文件依据", code: "empcontract", type: 'text', span: 1, require: true },
          { label: "参加工作时间", code: "worktime", type: 'date', span: 1, require: true },
          { label: "社会工作者职业水平", code: "shgzslevel", type: 'dict', dict: "usermanage.user.shgzslevel", span: 1, require: true },
          { label: "现任职级", code: "postlevel", type: 'dict', dict: "usermanage.user.postlevel", span: 1, require: true },
          { label: "现任职级时间", code: "xrzjtime", type: 'date', span: 1, require: true },
          { label: "级别(工资)", code: "commlevel", type: 'dict', dict: "usermanage.user.commlevel", span: 1, require: true },
          { label: "其他职称", code: "othertitle", type: 'text', span: 1, require: true },
          { label: "是否退役士兵", code: "istysb", type: 'bool', span: 1, require: true },
          { label: "是否大学生村官", code: "isdxscg", type: 'bool', span: 1, require: true },
          { label: "退役士兵开始服役时间", code: "retirement.enliststarttime", type: 'date', span: 1, require: true },
          { label: "退役士兵结束时间", code: "retirement.enlistendtime", type: 'date', span: 1, require: true },
          { label: "服役年限", code: "retirement.retireyear", type: 'number', span: 1, require: true },
          { label: "是否计入套改年限", code: "retirement.soldincludeyear", type: 'bool', span: 1, require: true },
          { label: "大学生村官开始时间", code: "stuvillageofficial.offistarttime", type: 'date', span: 1, require: true },
          { label: "大学生村官结束时间", code: "stuvillageofficial.offiendtime", type: 'date', span: 1, require: true },
          { label: "大学生村官年限", code: "stuvillageofficial.offitotalyear", type: 'text', span: 1, require: true },
          { label: "可计入套改年限", code: "stuvillageofficial.stuincludeyear", type: 'number', span: 1, require: true },
          { label: "社区工作年限(审核)", code: "sqworkyears", type: 'number', span: 1, require: true },
          { label: "可视作套改年限", code: "changeyear", type: 'number', span: 1, require: true },
          { label: "应扣除套改年限", code: "ykcchangeyear", type: 'number', span: 1, require: true },
          { label: "累计套改年限(社区+可视-应扣)", code: "totalchangeyear", type: 'number', span: 1, require: true }
        ]};
      }
    },
    getEducateProps(user, edit){
      const fullTime = [
        { label: "全日制学历", code: "fteducation", type: 'dict', dict: "usermanage.user.education", span: 1, require: true },
        { label: "全日制学位", code: "ftdegree", type: 'dict', dict: "usermanage.user.degree", span: 1, require: true },
        { label: "全日制专业", code: "ftspecialty", type: 'text', span: 1, require: true },
        { label: "全日制毕业院校", code: "ftschools", type: 'text', span: 1, require: true },
        { label: "全日制学历毕业时间", code: "ftgraduationtime", type: 'date', span: 1, require: true }
      ];
      const partTime = [
        { label: "非全日制学历", code: "pteducation", type: 'dict', dict: "usermanage.user.education", span: 1, },
        { label: "非全日制学位", code: "ptdegree", type: 'dict', dict: "usermanage.user.degree", span: 1, },
        { label: "非全日制专业", code: "ptspecialty", type: 'text', span: 1, },
        { label: "非全日制毕业院校", code: "ptschools", type: 'text', span: 1, },
        { label: "非全日制学历毕业时间", code: "ptgraduationtime", type: 'date', span: 1, }
      ];
      const highest = [
        { label: "最高学历", code: "education", type: 'dict', dict: "usermanage.user.education", span: 1, require: true },
        { label: "最高学位", code: "degree", type: 'dict', dict: "usermanage.user.degree", span: 1, require: true },
        { label: "最高毕业院校", code: "school", type: 'text', span: 1, require: true },
        { label: "最高专业", code: "specialty", type: 'text', span: 1, require: true },
      ];
      let list;
      if (user.usertype == 1) { //编制
        list = [...fullTime, ...partTime];
      } else if (user.usertype == 3) { //雇员
        list = fullTime;
      } else if(user.usertype == 4) { //社工
        list = [
          ...highest,
          { label: "最高毕业时间", code: "graduationtime", type: 'date', span: 1, }
        ];
      }else{//其它
        list = highest;
      }
      return list.map(item => {
        if(edit){
          item.disable = !edit.includes(item.code);
        }
        return item;
      })
    },
    getJoinProps(user, edit){
      if(user.usertype == 1){
        let wayCode = this.unittype == 3 ? 'joinunitway' : 'joinway';
        return [
          { label: "首次进入队伍方式", code: wayCode, type: 'dict', dict: "usermanage.user.joinway", span: 1, require: true },
          { label: "进入单位形式", code: "entryway", type: 'dict', dict: "usermanage.user.entryway", span: 1, require: true },
          { label: "进入单位时间", code: "entrytime", type: 'date' , span: 1, require: true },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      }
    },
    getContactProps(user, edit){
      if(user.usertype != 2 && user.usertype != 4){
        return [
          { label: "手机号码", code: "mobilephone", type: 'text', span: 1, require: true },
          { label: "虚拟短号", code: "telephone", type: 'text', span: 1 },
          { label: "办公电话号码", code: "officephone", type: 'text', span: 1 }
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      }
    },
    getJobProps(user, edit){
      if(user.usertype == 2){
        return [
          { label: "用工形式", code: "employform", type: 'dict', dict: "usermanage.user.employform", span: 1, require: true },
          { label: "人员归类", code: "ratedcontrol", type: 'dict', dict: "usermanage.user.ratedcontrol", span: 1, disable: true },
          { label: "岗位类别", code: "jobdesc", type: 'dict', dict: "usermanage.user.jobdesc", span: 1, require: true },
          { label: "岗位描述", code: "jobmemo", type: 'text', span: 1, require: true },
          { label: " 退役士兵就业帮扶", code: "assistant", type: 'dict', dict: "usermanage.user.assistant", span: 1, require:false }
          // { label: "首次进入单位时间", code: "firstemploytime", type: 'date', span: 1 },
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      }
    },
    getContractProps(user, edit){
      if(user.usertype == 2 || user.usertype == 3){
        return [
          { label: "现聘用（派遣）起始时间", code: "employstartdate", type: 'date', span: 1 },
          { label: "现聘用（派遣）终止时间", code: "employenddate", type: 'date', span: 1 },
          { label: "现聘用（派遣）单位", code: "employorg", type: 'text', span: 1 }
        ].map(item => {
          if(edit){
            item.disable = !edit.includes(item.code);
          }
          return item;
        })
      }
    }
  }
};
</script>
<style lang="less" scoped>
.user-basetab {
  height: 100%;
  display: flex;
  flex-direction: column;
  .top-btn {
    padding: 0 @content-padding-h;
    margin-top: 10px;
  }
  .main-form {
    flex: 1 1 100%;
    min-height: 0;
    margin: @content-padding-v 0;
  }
}
</style>