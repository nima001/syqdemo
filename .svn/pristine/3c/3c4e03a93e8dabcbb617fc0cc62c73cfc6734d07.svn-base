<!--人员调动记录-->
<template>
  <div class="personCount">
    <ul class="tabList">
      <li class="tanItem" @click="changeTab(item)" v-for="(item,index) in tabList" :key="index" :class="{active:query.type == item.type}">{{item.name}}</li>
    </ul>
    <div class="content">
      <div class="top">
        <a-range-picker :style="{width:'300px'}" @change="dateChange" />
        <a-input-search :style="{width:'250px'}" allowClear placeholder="请输入人员姓名" 
          enter-button v-model="query.searchkey" @search="onSearch">
        </a-input-search>
      </div>
      <div class="middle">
        <a-table rowKey='id' :loading="loading" :columns="columns" :data-source="dataSource"  :pagination="false" ></a-table>
      </div>
      <div class="bottom">
        <a-pagination show-size-changer :total="pagination.total" :page-size="pagination.pagesize"
          :default-current="pagination.pagenum" :show-total="(total) => `共 ${total} 条`" @change="onChange"
           @showSizeChange="onShowSizeChange">
        </a-pagination>
      </div>
    </div>
  </div>
</template>
<script>
import { DatePicker, Input, Table, Pagination } from "ant-design-vue";
import { assign, cloneDeep } from "lodash";
import { transferList } from "@/hall/api/usermanage";
import { mixins } from "@/hall/mixin/index";
import { showError } from "@/framework/utils/index";
import moment from "moment";
export default {
  data() {
    return {
      tabList: [
        { name: "调入人员", type: 1 },
        { name: "调出人员", type: 2 }
      ],
      loading:false,
      dataSource: [],
      query: {
        starttime: undefined,
        endtime: undefined,
        type: 1,
        searchkey: undefined
      },
      pagination: {
        pagesize: 10,
        pagenum: 1,
        total: 0,
        needtotal: true
      }
    };
  },
  computed:{
    columns(){
      return[
        {
          title: "姓名",
          dataIndex: "username"
        },
        {
          title: "所属组织",
          dataIndex: "org"
        },
        {
          title: "职位",
          dataIndex: "windowposition",
          customRender: this.dictRender("usermanage.user.windowposition")
        },
        {
          title: "人员身份",
          dataIndex: "useridentity",
          customRender: this.dictRender("usermanage.user.personnelnature")
        },
        {
          title: this.query.type == 1? "调入时间" :"调出时间",
          dataIndex: "transfertime",
          customRender: text => moment(text).format('YYYY-MM-DD')
        },
        {
          title: "联系电话",
          dataIndex: "mobilephone"
        }
      ]
    }
  },
  components: {
    AInputSearch: Input.Search,
    ADatePicker: DatePicker,
    ARangePicker:DatePicker.RangePicker,
    ATable: Table,
    APagination: Pagination
  },
  mixins: [mixins],
  mounted() {
    this.getData(this.nodeData);
  },
  methods: {
    getData(nodeData) {
      if (nodeData && nodeData.id) {
        this.loading = true;
        transferList({ nodeid: nodeData.id, ...this.pagination, ...this.query,  orders: [{orderby: "transfertime", ordertype: "DESC"}]})
          .then(res => {
            let {pagenum,pagesize,total,rows} = res.result;
            this.dataSource = rows;
            assign(this.pagination, { pagesize, pagenum ,total});
          })
          .catch(err => {
            showError(err);
          }).finally(()=>{
            this.loading = false;
          });
      }
    },
    dictRender(key, attr) {
      return (text, row, index) => {
        let v = this.$store.getters.dictKey(key || row[attr], text);
        text = (v && v.text) || "";
        return <span title={text}>{text}</span>;
      };
    },
    dateChange(value){
      if(value.length == 0){
        assign(this.query,{starttime:undefined,endtime:undefined})
      }else{
        assign(this.query,{starttime:moment(value[0]).format('YYYY-MM-DD'),endtime:moment(value[1]).format('YYYY-MM-DD')})
      }
      this.getData(this.nodeData);
    },
    changeTab(item) {
      this.query.type = item.type;
      this.getData(this.nodeData);
    },
    onSearch() {
      this.getData(this.nodeData);
    },
    onChange(pagenum, pagesize) {
      assign(this.pagination, { pagesize, pagenum });
      this.getData(this.nodeData);
    },
    onShowSizeChange(current, pagesize) {
      assign(this.pagination, { pagenum: 1, pagesize });
      this.getData(this.nodeData);
    }
  }
};
</script>
<style lang='less' scoped>
.personCount {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  .tabList {
    height: 62px;
    background: @white;
    padding: 0px @content-padding-h;
    margin: 0px;
    display: flex;
    align-items: center;
    .tanItem {
      cursor: pointer;
      padding: 0px @padding-sm;
      color: @primary-color;
      transition: color 0.3s;
      border-radius: @border-radius-base;
      height: 26px;
      line-height: 26px;
      margin-left: @padding-xs;
      &:first-child {
        margin-left: 0px;
      }
      &:hover {
        background: @primary-1;
      }
      &.active {
        color: @white;
        background: @primary-color;
      }
    }
  }
  .content {
    flex: 1;
    padding: @content-padding-v @content-padding-h;
    margin-top: @layout-space-base;
    overflow-y: auto;
    min-height: 0px;
    background: @white;
    display: flex;
    flex-direction: column;
    border-radius: @border-radius-base;
    .top {
      display: flex;
      justify-content: flex-end;
      padding: @content-padding-v 0px;
      .ant-input-search {
        margin-left: @layout-space-base;
      }
    }
    .middle {
      flex-shrink: 1;
      padding: @content-padding-v 0px;
      overflow-y: auto;
    }
    .bottom {
      text-align: right;
      padding: @content-padding-v 0px;
    }
  }
}
</style>