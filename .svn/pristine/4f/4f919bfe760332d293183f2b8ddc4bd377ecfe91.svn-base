import store from '../store'

// 根据字段将数组数据分组
export function sortArrByKey (arr) {
  var map = {}

  var dest = []
  for (var i = 0; i < arr.length; i++) {
    var ai = arr[i]
    if (!map[ai.sort]) {
      dest.push({
        sort: ai.sort,
        children: [ai]
      })
      map[ai.sort] = ai
    } else {
      for (var j = 0; j < dest.length; j++) {
        var dj = dest[j]
        if (dj.sort == ai.sort) {
          dj.children.push(ai)
          break
        }
      }
    }
  }
  return dest
}

/**
 *
 * @param position 0_1_1_1
 */
export function parentArr (positionStr) {
  let wrap = store.getters.treeData
  let position = positionStr.split('_')
  position.shift()
  let index = parseInt(position.pop())
  for (let i = 0; i < position.length; i++) {
    let index = parseInt(position[i])
    wrap = wrap['criteria'][index]
  }
  return { data: wrap['criteria'], index }
}

/**
 *切割数组
 * @param {*} arrary [1,3,5,6,8]
 * @param {*} index  1
 * [1,3] [5,6,8]
 *
 */
export function splitArr (arr, index) {
  let preArr = []
  let nextArr = []
  let arrary = JSON.parse(JSON.stringify(arr))
  for (let i = 0; i < arrary.length; i++) {
    let curItem = arrary[i]
    if (i <= index) {
      preArr.push(curItem)
    } else {
      nextArr.push(curItem)
    }
  }
  return [preArr, nextArr]
}

/**
 *拆分操作
 *   {"op": "and","criteria": []}
 * @export
 * @param {*} arr
 */
export function objInArrary (arr) {
  let wrap = { op: 'and', criteria: [] }
  wrap.criteria = arr
  return wrap
}

/**
 * 获取数组指定项的索引
 */
export function eachArray (key, arr) {
  for (let i = 0; i < arr.length; i++) {
    let cur = arr[i]
    if (cur.key == key) {
      return i
    }
  }
}

/**
 * datatype  2 字典  3 引用   4 输入
 */
export function comType (field, op) {
  if (field == undefined) {
    field = {}
  }
  let { datatype, inputtype } = field
  let contentType
  if (datatype == 2) {
    /** 字典 */
    if (op == 'in' || op == 'nin') {
      contentType = 10
    } else if (op) {
      contentType = 11
    }
  } else if (datatype == 3) {
    /** 引用 */
    if (op == 'in' || op == 'nin') {
      if (field.datasource == 'user') {
        // 人员多选
        contentType = 12
      } else if (field.datasource == 'organization') {
        // 组织多选
        contentType = 13
      }
    } else if (op) {
      if (field.datasource == 'user') {
        // 人员单选
        contentType = 14
      } else if (field.datasource == 'organization') {
        // 组织单选
        contentType = 15
      }
    }
  } else if (datatype == 4) {
    /** 输入 */
    if (inputtype == 0) {
      // 字符
      if (op == 'in' || op == 'nin') {
        contentType = 8
      } else if (op) {
        contentType = 9
      }
    } else if (inputtype == 1 || inputtype == 2) {
      // 数字
      if (
        op == 'add' ||
        op == 'subtract' ||
        op == 'multiply' ||
        op == 'divide'
      ) {
        contentType = 1
      } else if (op == 'in' || op == 'nin') {
        contentType = 2
      } else if (op == 'between') {
        contentType = 3
      } else if (op) {
        contentType = 4
      }
    } else if (inputtype == 3) {
      // 时间
      if (op == 'between') {
        contentType = 6
      } else if (op) {
        contentType = 7
      }
    } else if (inputtype == 4) {
      // 布尔
      contentType = 5
    }
  }
  return contentType
}

// 函数防抖
export function debounce (fn, delay) {
  var timer = null
  var delay = delay || 200
  return function () {
    var args = arguments
    var that = this
    clearTimeout(timer)
    timer = setTimeout(function () {
      fn.apply(that, args)
    }, delay)
  }
}