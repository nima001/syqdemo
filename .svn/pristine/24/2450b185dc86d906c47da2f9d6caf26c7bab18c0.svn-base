<template>
  <div class="wrap">
    <h2 v-if="title" :style="{textAlign:'center'}">{{title}}</h2>
    <div :id="id"></div>
  </div>
</template>
<script>
import * as G2 from "@antv/g2";
import BaseMixin from "./BaseMixin";
import { get } from 'lodash';
export default {
  /**
   * color: 主题色
   * padding: 自定义边距 --Array
   * legend: 是否显示图例 -- Boolean 默认不显示
   */
  name: "AreaChart",
  mixins: [BaseMixin],
  data() {
    return {
      id: Math.random().toString(36).substr(2),
      plot: undefined,
    };
  },
  watch: {
    data: {
      handler(v) {
        this.draw(v);
      },
      deep: true,
    },
  },
  computed: {
    colors(){
      if (this.settings.color) {
        if(typeof this.settings.color==='string') {
          return this.settings.color.split(',');
        }
        return this.settings.color;
      } else {
        let colors = this.$store.getters.getConfig("chart.colors");
        if (colors) {
          try {
            colors = JSON.parse(colors);
            if (colors && colors.length) {
              return colors;
            }
          } catch (err) {}
        }
      }
      return ["#D15456", "#5488D1", "#EDBA55", "#D48265", "#91C7AE", "#749F83", "#BDA29A", "#6E7074", "#585470", "#706254"];
    },
  },
  mounted() {
    this.draw(this.data);
  },
  methods: {
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = dataTable;
      return rows.map(item => {
        let key = keyCols[0];
        let names;
        if (valueCols.length) {
          names = [];
          for (let i = 0; i < valueCols.length; i++) {
            names.push(valueCols[i].showname);
          }
        }
        return {
          key: item[key.column],
          type: names && names.join("-"),
          value: item[valueCols[0].column] || 0
        };
      });
    },
    draw(dataTable) {
      let data = this.createData(dataTable);console.log(data)
      if (!data) {
        return;
      }
      if (this.plot) {
        this.plot.destroy();
      }
      const chart = new G2.Chart({
        container: this.id,
        forceFit: true,
        autoFit: true,
        appendPadding: this.settings.padding||[20, 0, 0, 0]
      });

      chart.data(data);
      let xTitle = get(this.settings, 'xAxis.title');
      let yTitle = get(this.settings, 'yAxis.title');
      chart.scale({
        key: {
          range: [0, 1]
        },
        value: {
          nice: true,
        },
      });
      // X 轴
      chart.axis("key", {
        title: xTitle?{ 
                style: {
                  fill: '#AAAAAA'
                }
               }:null,
      });
      chart.axis("value", {
        title: yTitle?{ 
                style: {
                  fill: '#AAAAAA'
                }
               }:null,
      });
      // X轴,Y轴标题别名
      chart.scale({
        key: {
          alias: xTitle
        },
        value: {
          alias: yTitle,
          nice: true,
          min: 0,
        }
      });
      if(this.settings.legend) {
        chart.legend({
          position: 'top-right',
          marker: { symbol: 'circle', style: { fill: this.colors[0], r: 3 } },
        });
      }else{
        //图例
        chart.legend(false);
      }
     
      chart.tooltip({
        showCrosshairs: true,
        shared: true
      });
      //添加代码--设置相应颜色
      chart.area().position('key*value').color(`l(100) 0:${this.colors} 1:#ffffff`).tooltip(false);
      chart.line().position('key*value').color('type',this.colors);
      chart.point().position('key*value').color('type',this.colors).shape('circle');
      
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 270px;
  display: flex;
  flex-direction: column;
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>