<template>
  <div class="wrap">
    <div class="cell">
      <p class="title">法人登记赋码</p>
      <div class="table">
        <div class="tHeader">
          <span></span>
          <span>机关群体</span>
          <span>事业单位</span>
        </div>
        <ul class="tBody">
          <li v-for="(item,index) in list2" :key="index">
            <span>{{item.name}}</span>
            <span>{{item.org}}</span>
            <span>{{item.sy}}</span>
          </li>
        </ul>
      </div>
    </div>
    <split-line/>
    <div class="cell">
      <p class="title">机构编制事项调整</p>
      <div class="table">
        <div class="tHeader">
          <span></span>
          <span>{{keyCols[0] &&keyCols[0]['showname']}}</span>
          <span>{{keyCols[1] &&keyCols[1]['showname']}}</span>
        </div>
        <ul class="tBody">
          <li v-for="(item,index) in list" :key="index">
            <span>{{item.name}}</span>
            <span>{{item.v1}}</span>
            <span>{{item.v2}}</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>

<script>
import { orgDistrChange } from "@/person-shaoxing/api/monitor";
import { showError } from "@/framework/utils/index";
import SplitLine from '../components/SplitLine.vue';
export default {
  components: { SplitLine },
  data() {
    return {
      list2: [
        { name: "设立(初领)", org: 14, sy: 16 },
        { name: "注销(撤销)", org: 26, sy: 18 },
        { name: "变更", org: 33, sy: 29 }
      ],
      list: [],
      keyCols: []
    };
  },
  mounted() {
    this.orgMattersChange();
  },
  methods: {
    // 机构编制事项调整
    orgMattersChange() {
      orgDistrChange(1)
        .then(res => {
          let { keyCols, rows, valueCols } = res.result.data;
          this.keyCols = keyCols;
          this.list = valueCols.map(item => {
            return {
              name: item.showname,
              v1: rows[0][item["column"]],
              v2: rows[1][item["column"]]
            };
          });
        })
        .catch(err => {
          showError(err);
        });
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  .cell {
    .title {
      height: 26px;
      font-size: 20px;
      font-family: Microsoft YaHei;
      font-weight: bold;
      line-height: 26px;
      color: #ffffff;
      opacity: 0.8;
      margin: 0px;
    }
    .table {
      .tHeader {
        width: 301px;
        height: 37px;
        background: linear-gradient(
          90deg,
          #417edc 0%,
          rgba(8, 126, 127, 0) 100%
        );
        opacity: 0.6;
        position: relative;
        display: flex;
        align-items: center;
        margin-top: 8px;
        &::before {
          width: 2px;
          height: 37px;
          content: "";
          background: #0ffcfe;
          opacity: 0.6;
          position: absolute;
          left: 0px;
          top: 0px;
        }
        span {
          flex: 1;
          text-align: center;
          height: 21px;
          font-size: 16px;
          font-family: Microsoft YaHei;
          font-weight: 400;
          line-height: 21px;
          color: #ffffff;
          opacity: 0.8;
        }
      }
      .tBody {
        padding: 12px 0px;
        margin: 0;
        li {
          display: flex;
          height: 29px;
          align-items: center;
          &:nth-child(odd) {
            background: url("../img/warn-dote.png") repeat;
          }
          span {
            flex: 1;
            height: 21px;
            font-size: 16px;
            font-family: Microsoft YaHei;
            font-weight: 400;
            line-height: 21px;
            color: #ffffff;
            opacity: 0.8;
            text-align: center;
            &:first-child {
              text-align: left;
              padding-left: 9px;
            }
          }
        }
      }
    }
  }
}
</style>