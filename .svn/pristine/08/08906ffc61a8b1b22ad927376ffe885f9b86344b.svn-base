
import { Schema } from '@formily/vue'
import { generateCode } from './index'

/**
 * 获取
 * @param {*} schema 
 * @param {*} key 
 */
export function getAttribute(schema, key){
  return schema[key];
}

/**
 * 设置属性 返回是否新建属性
 * @param {*} schema 
 * @param {*} name 
 * @param {*} value 
 */
export function setAttribute(schema, key, value){
  const has = schema.hasOwnProperty(key);
  schema[key] = value;
  if(key == 'name'){
    //TODO
  }
  // console.log(schema, name, value)
  return !has;
}


/**
 * 获取属性列表
 * @param {*} schema 
 */
export function getProperties(schema, key){
  return Schema.getOrderProperties(schema).map(item => item.schema);
}

/**
 * 设置属性列表 返回是否新建属性
 * @param {*} schema 
 * @param {*} props 
 */
export function setProperties(schema, key, props){
  const has = schema.hasOwnProperty(key);
  let obj = {};
  for(let item of props){
    obj[item.name] = item;
  }
  schema[key] = obj;
  return !has;
}

/**
 * 获取组件属性
 * @param {*} schema 
 * @param {*} key 
 */
export function getComponentProp(schema, key){
  let props = schema['x-component-props'] || {};
  return props[key];
}

/**
 * 设置协议的组件属性 返回是否新建属性
 * @param {*} schema 
 * @param {*} key 
 * @param {*} value 
 */
export function setComponentProp(schema, key, value){
  let props = schema['x-component-props'];
  let has = false;
  if(!props){
    props = {};
    schema['x-component-props'] = props;
  }else{
    has = props.hasOwnProperty(key);
  }
  props[key] = value;
  return !has;
}

/**
 * 添加属性
 * @param {*} schema 
 * @param {*} prop 
 * @param {*} index 
 */
export function addProperty(schema, prop, index){
  const name = prop.name || generateCode();
  const empty = schema.properties === undefined;
  let addSchema;
  if(index >= 0){
    const props = Schema.getOrderProperties(schema);
    addSchema = schema.addProperty(name, prop);
    for(; index < props.length; index ++){//FIXME sunwen 属性调顺 x-index 处理麻烦（properties直接赋值无法更新关联数据）
      let { key, schema: s } = props[index];
      schema.removeProperty(key);
      schema.addProperty(key, s)
    }
  }else{
    addSchema = schema.addProperty(name, prop);
  }
  if(empty && schema.parent){//FIXME sunwen 属性为空时无法更新关联数据
    schema.parent.properties[schema.name] = schema;
  }
  return addSchema;
}

/**
 * 将自己移除，返回被移除的Schema
 * @param {*} schema 
 */
export function removeSelf(schema){
  return schema.parent.removeProperty(schema.name);
}

/**
 * 更新属性
 */
export function updateSelf(schema, json){
  let self = new Schema(json, schema.parent);
  schema.parent.properties[schema.name] = self;
  return self;
}

/**
 * 获取Schema在父属性列表中的索引
 * @param {*} schema 
 */
export function indexOfParent(schema){
  if(schema.parent){
    const props = Schema.getOrderProperties(schema.parent);
    return props.findIndex(item => item.key == schema.name);
  }else{
    return -1;
  }
}

/**
 * 属性个数
 * @param {*} schema 
 */
export function propsSize(schema){
  if(schema && schema.properties){
    return Object.keys(schema.properties).length;
  }
  return 0
}