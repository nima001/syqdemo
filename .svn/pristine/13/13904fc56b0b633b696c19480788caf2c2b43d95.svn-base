<template>
  <accordion-layout>
    <div slot="navTitle" class="nav-title">
      <a v-for="item in types" 
        :key="item.key"
        :class="{selected: filter.type == item.value}"
        @click="onTypeChange(item.value)"
      >{{item.text}}</a>
    </div>
    <div slot="nav" class="nav-panel">
      <div class="header">
        <DictSelect v-if="subjects.size > 1"
          dict="analyze.report.analyzesubject" 
          v-model="filter.subject"
          placeholder="选择分析主题"
          :filter="item => subjects.has(item.value)"
        />
        <DictSelect v-if="scopetypes.size > 1"
          dict="analyze.report.analyzescopetype" 
          v-model="filter.scopetype"
          :filter="item => scopetypes.has(item.value)"
          placeholder="选择分析类型"
          style="margin-top: 10px"
        />
      </div>
      <div class="body">
        <empty-data v-if="analyzeList && analyzeList.length == 0"/>
        <a-spin v-else-if="analyzeTarget && loading"/>
        <template v-else-if="analyzeTarget">
          <scopes-select v-if="scope && scope.length" :scopes="scope" class="scopes-select" ref="scopeData"/>
          <content-select v-if="content && content.length" class="content-select"
            v-model="contentSelected"
            :content="content"
          />
          <empty-data v-else/>
        </template>
      </div>
      <div class="footer">
        <a-button type="primary" style="width:100%" @click="doReport">确定</a-button>
      </div>
    </div>
    <div slot="content" class="content">
      <div class="header"><a-button type="primary">导出</a-button></div>
      <div class="empty" v-if="!formConfig">请选择条件和内容生成分析报告</div>
      <div class="body" v-else>
        <form-display :formConfig="formConfig" :formData="formData" :showAnchor="false">
          <ant-chart slot="chart" slot-scope="props" v-bind="props"/>
        </form-display>
      </div>
    </div>
  </accordion-layout>
</template>
<script>
import { Spin, Button } from 'ant-design-vue'
import AccordionLayout from '@framework/components/AccordionLayout'
import DictSelect from '@framework/components/DictSelect'
import EmptyData from '@framework/components/EmptyData'
import ScopesSelect from './components/ScopesSelect'
import ContentSelect from './components/ContentSelect'
import FormDisplay from "@formdesign/views/FormDisplay";
import AntChart from "@person/views/statistics/chart/AntChart";

import { showError } from '@framework/utils'
import { analysisquery, analysisscopequery, analysiscontentquery} from '@person/api/statistics'

export default {
  components: {
    AButton: Button,
    ASpin: Spin,
    AccordionLayout,
    DictSelect,
    EmptyData,
    ScopesSelect,
    ContentSelect,
    FormDisplay, AntChart
  },
  data(){
    return {
      list: [],
      filter: {
        type: undefined,
        subject: undefined,
        scopetype: undefined,
      },
      loading: false,
      scope: undefined,//分析范围
      content: undefined,//分析内容
      contentSelected: [],
      formData: {},
      formConfig: undefined
    }
  },
  created(){
    this.initData();
  },
  computed: {
    types(){
      let ts = this.$store.getters.dict('analyze.report.analyzetype');
      if(ts && ts.length > 3){//取前面3个
        return [ts[0], ts[1], ts[2]];
      }else{
        return ts
      }
    },
    analyzeList(){
      let { type, subject, scopetype } = this.filter;
      if(type){
        return this.list.filter(item => {
          return (item.type == type && (!subject || (item.subject == subject 
            && (!scopetype || item.scopetype == scopetype))));
        });
      }
    },
    subjects(){
      let { type } = this.filter; 
      if(type){
        return new Set(this.list.filter(item => item.type == type).map(item => item.subject));
      }else{
        return new Set();
      }
    },
    scopetypes(){
      let { type, subject } = this.filter; 
      if(type){
        let values = this.list.filter(item => item.type == type && (!subject || item.subject == subject))
        .map(item => item.scopetype);
        return new Set(values);
      }else{
        return new Set();
      }
    },
    analyzeTarget(){
      if(this.analyzeList){
        if(this.analyzeList.length == 1){//列表只有一条数据时
          return this.analyzeList[0];
        }else{
          let { type, subject, scopetype } = this.filter; 
          if(type && subject && scopetype){//所有条件都选择了返回列表第一条
            return this.analyzeList[0];
          }
        }
      }
    }
  },
  watch: {
    analyzeTarget(analyze){
      if(analyze){
        this.loadScopeAndContent(analyze);
      }
    },
    types(types){
      if(!this.filter.type && types && types.length){
        this.filter.type = types[0].value;
      }
    },
  },
  methods:{
    initData(){
      if(this.types && this.types.length){
        this.filter.type = this.types[0].value;
      }
      analysisquery({}).then(({result}) => {
        this.list = result || [];
      }).catch(error => {
        showError(error);
      });
    },
    loadScopeAndContent(analyze){
      this.loading = true;
      Promise.all([
        analysisscopequery({analyzeid: analyze.id}),
        analysiscontentquery({analyzeid: analyze.id})
      ]).then(([scope, content]) => {
        this.scope = scope.result;
        this.content = content.result;
      }).catch(error => {
        showError(error);
      }).finally(() => {
        this.loading = false;
      })
    },
    onTypeChange(type){
      if(this.filter.type != type){
        this.filter = {type}
      }
    },
    async doReport(){
      if(!this.analyzeTarget){
        this.$message.info('请选择条件筛选分析模板');
        return;
      }
      if(this.loading){
        this.$message.info('正在加载分析内容，请稍后');
        return;
      }
      if(!this.content || !this.content.length){
        this.$message.info('该模板暂无可分析的内容');
        return;
      }
      if(this.contentSelected.length == 0){
        this.$message.info('请选择报告内容');
        return;
      }
      let data = {}, form = [];
      let scopeData = this.$refs.scopeData;
      if(scopeData){
        try{
          data = await scopeData.getFieldsValue();
        }catch(error){
          this.$message.info(error);
          return;
        }
      }
      this.content.forEach(item => {
        if(this.contentSelected.indexOf(item.id) >= 0){
          if(item.form){
            form = [...form, ...JSON.parse(item.form)];
            if(item.data){
              data = Object.assign(data, JSON.parse(item.data));
            }
          }
        }
      });
      this.formData = data;
      this.formConfig = form;
      console.log(data, form)
    }
  }
}
</script>
<style lang="less" scoped>
.nav-title{
  min-width: 250px;
  display: flex;
  a{
    flex: 1 1 100%;
    line-height: 40px;
    text-align: center;
    color: @text-color;
    &:hover{
      color: @primary-color;
    }
    &.selected{
      color: @primary-color;
      font-weight: bold;
    }
  }
}
.nav-panel{
  min-width: 250px;
  height: 100%;
  display: flex;
  flex-direction: column;
  & > .header{
    flex: none;
    padding: @content-padding-v @content-padding-h;
  }
  & > .body{
    flex: auto;
    min-height: 1px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    .ant-spin{
      position: absolute;
      top: 38%;
      left: 50%;
      margin-left: -10px;
      margin-top: -12px;
    }
    .scopes-select{
      padding: 0 @content-padding-h;
      margin: 0;
      flex: none;
    }
    .content-select{
      flex: auto;
      overflow: auto;
    }
  }
  & > .footer{
    flex: none;
    padding: @content-padding-v @content-padding-h;
  }
}
.content{
  position: relative;
  background-color: @white;
  border-radius: @border-radius-base;
  height: 100%;
  padding-top: 60px;
  & > .header{
    margin-top: -50px;
    line-height: 50px;
    padding: 0 @content-padding-h;
    text-align: right;
  }
  & > .empty{
    position: absolute;
    top: 38%;
    width: 100%;
    text-align: center;
    color: fade(@text-color-secondary, 25%);
    font-size: 1.6em;
  }
  & > .body{
    height: 100%;
  }
}
</style>