<template>
  <div class="workflow">
    <a-form-item class="org" :label="property.showName?property.name:''">
      <a-input
        :style="property.showName?'':'margin-top:29px;'"
        class="hand"
        @click="property.editable?visible=true:visible=false"
        :class="property.code"
        :placeholder="property.placehold"
        :disabled="property.editable?false:true"
        @blur="blur"
        v-decorator="[
          `${property.code}`,
          {
            rules: [{required: property.require, message: `请输入${property.name}!`}],
            initialValue:$store.getters.formData[property.code]?$store.getters.formData[property.code].name:''
          }
        ]"
      >
        <a-icon
          @click="property.editable?visible=true:visible=false"
          slot="suffix"
          type="fork"
          class="orgIcon"
        />
      </a-input>
      <a-modal
        title="单位名称选择"
        :visible="visible"
        @cancel="visible=false"
        width="450px"
        :bodyStyle="tStyle"
        class="myModal hand"
        :footer="null"
      >
        <new-org mode="org" @finish="deptOk" :rootSelectable="true" :usePermit="property.usePermit"></new-org>
      </a-modal>
    </a-form-item>
    <stamp
      :property="property"
      @imgUrl="getStamp"
      v-if="property.signcomponent.signcode && property.signcomponent.editable"
    ></stamp>
    <a-form-item class="stampNotice" v-if="!imgUrl && property.signcomponent.signcode">
      <a-input
        type="hidden"
        v-decorator="[
          `${property.signcomponent.code}`,
          {
            rules: [{required: property.signcomponent.require, message: `请选择签章!`}],
            initialValue: stamp
          }
        ]"
      ></a-input>
    </a-form-item>
    <div class="seal" v-if="imgUrl">
      <img :src="imgUrl" />
    </div>
  </div>
</template>
<script>
import { getUserInfo } from "@/workflow/api/workflow";
import { getStampInfo } from "@/workflow/api/stamplist";
import { get } from "http";
import Stamp from "./stampComponent/Stamp";
import { uiConfigsCookies } from "@/framework/utils/auth";
import NewOrg from "@/framework/components/OrgUserSelect";
import "@/workflow/style/workflow.css";
import { Form, Input, Icon, Modal } from "ant-design-vue";
import { showError } from "@/framework/utils/index";
export default {
  name: "org",
  data() {
    return {
      uiConfigs: uiConfigsCookies(),
      code: this.property["code"],
      formData: this.$store.getters.formData,
      visible: false,
      imgUrl: null,
      stamp: null,
      tStyle: {
        padding: "0 3px 5px 10px",
        height: "550px"
      }
    };
  },
  props: {
    property: {
      type: Object,
      required: true
    },
    bindform: {
      type: Object,
      required: true
    },
    typecode: {
      type: Object
    },
    relateControls: {
      type: Array
    }
  },
  components: {
    AFormItem: Form.Item,
    AInput: Input,
    AIcon: Icon,
    AModal: Modal,
    Stamp,
    NewOrg
  },
  created() {
    if (!this.formData[this.code]) {
      if (!this.property.require) {
        this.formData[this.code] = null;
        this.$store.commit({
          type: "SET_FORM_DATA",
          data: this.formData
        });
      }
    } else {
      this.relateControl(this.formData[this.code]);
    }
    if (this.formData[this.property.signcomponent.code]) {
      //获取签章图片
      getStampInfo(this.formData[this.property.signcomponent.code])
        .then(res => {
          if (res.code == "success") {
            this.imgUrl =
              this.uiConfigs["api.url"] +
              "/file/v1/download/" +
              "?uri=" +
              encodeURIComponent(res.result.pictureurl);
          }
        })
        .catch(err => {
          showError(err);
        });
    }
  },
  methods: {
    //确定选择的机构
    deptOk(type, list) {
      if (type == "ok" && list.length > 0) {
        let org = list[0];
        let obj = {};
        obj.name = org.name;
        obj._id = org._id;
        this.bindform.setFieldsValue({ [this.code]: obj.name }); //给表单某字段赋值
        this.visible = false;
        this.$store.getters.formData[this.code] = obj;
        this.relateControl(obj);
      }else if(type == "cancel"){
        this.visible=false;
      }
    },
    //关联控件变化
    relateControl(val) {
      let formData = {};
      let flag = false;
      this.relateControls.forEach(item => {
        if (item.relate == this.code) {
          flag = true;
          if (item.pcode) {
            if (this.$store.getters.formData[item.pcode]) {
              this.$set(
                this.$store.getters.formData[item.pcode],
                item.code,
                val
              );
            } else {
              let obj = {};
              obj[item.code] = val;
              this.$store.getters.formData[item.pcode] = obj;
            }
          } else {
            this.$store.getters.formData[item.code] = val;
          }
        }
      });
      if (flag) {
        this.bindform.resetFields();
      }
      formData = Object.assign({}, this.$store.getters.formData);
      this.$store.commit({
        type: "SET_FORM_DATA",
        data: formData
      });
    },
    //获取签章
    getStamp(img) {
      if (img) {
        this.imgUrl = img;
        this.stamp = img;
      }
    },
    //失去焦点请求数据来源
    blur() {
      if (this.typecode) {
        let flag = false;
        for (var id in this.typecode) {
          let orgUserVo = {};
          this.typecode[id].forEach(code => {
            if (code == this.property.code) {
              flag = true;
              orgUserVo.formatCfgId = parseInt(id);
              orgUserVo.modelinstanceid = parseInt(
                this.$route.query.modelinstanceid
              );
              orgUserVo.objectMap = {};
              this.typecode[id].forEach(code => {
                if (this.$store.getters.formData[code]) {
                  orgUserVo.objectMap[code] = this.$store.getters.formData[
                    code
                  ];
                }
              });
            }
          });
          if (JSON.stringify(orgUserVo.objectMap) == "{}") flag = false;
          if (flag) {
            getUserInfo(orgUserVo)
              .then(res => {
                if (res.code == "success") {
                  if (JSON.stringify(res.result) !== "{}") {
                    this.bindform.resetFields();
                    let obj = {};
                    for (var a in res.result) {
                      if (res.result[a] || res.result[a] == 0) {
                        obj[a] = res.result[a];
                      }
                    }
                    this.formData = Object.assign(
                      {},
                      this.$store.getters.formData,
                      // obj
                      // TOIDO 
                      res.result
                    );
                    this.$store.commit({
                      type: "SET_FORM_DATA",
                      data: this.formData
                    });
                  }
                }
              })
              .catch(err => {
               showError(err);
              });
            flag = false;
          }
        }
      }
    }
  }
};
</script>
<style lang="less">
.orgIcon {
  color: #bfbfbf;
}
.myModal {
  .search {
    text-align: center;
    margin: 10px 0 20px 0;
    .ant-input-affix-wrapper {
      width: 40%;
    }
  }
  .ant-breadcrumb {
    cursor: pointer;
  }
  .selector {
    margin-top: 20px;
  }
  .selectOrg {
    width: 100%;
    display: flex;
    border: 1px solid #ddd;
    border-radius: 4px;
    &:hover {
      border-color: #40a9ff;
      box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
    }

    span {
      &:first-child {
        width: 83%;
        padding: 5px 20px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }
    .arrow_right {
      width: 17%;
      font-size: 16px;
      padding: 5px;
      text-align: center;
      cursor: pointer;
      color: #a9a9a9;
      background: rgba(0, 0, 0, 0.05);
    }
  }
  .activeOrg {
    border-color: #40a9ff;
    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
  }
}
</style>