<template>
  <div class="container">
    <a-input read-only class="code-one" v-model="showname" @click.native="()=>treeSelect = true">
      <a-icon slot="suffix" type="down" style="color: rgba(0,0,0,.25)" />
    </a-input>
    <a-modal title="字段选择" :destroyOnClose="true" :footer='null' @cancel='()=>treeSelect=false' :visible='treeSelect'  width='500px' :bodyStyle="{padding:'0px'}">
      <select-tree :searchObj="searchObj" :treeFields="fieldsTwo" @finish="finishHandle"></select-tree>
    </a-modal>

    <op-select-two
      v-if="defaultData.opListTwo"
      :defaultData="defaultData"
      :position="position"
      :searchObj="searchObj"
    ></op-select-two>
    <a-input
      type="number"
      v-model.number="defaultData.value"
      @change="handleChange"
      placeholder="请输入"
    />
  </div>
</template>
<script>
import FieldTwo from "./FieldTwo";
import OpSelectTwo from "./OpSelectTwo";
import { querylistop } from "@/person/api/integratedquery";
import { debounce, showError } from "@/framework/utils/index";
import { Popover, Input, Icon , Modal } from "ant-design-vue";
import SelectTree from '../components/SelectTree';
export default {
  name: "TypeOne",
  props: {
    position: {
      type: String,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    },
    searchObj: {
      type: String,
      required: true
    }
  },
  data(){
    return {
      treeSelect : false
    }
  },
  components: {
    AModal:Modal,
    APopover: Popover,
    AInput: Input,
    FieldTwo,
    AIcon: Icon,
    OpSelectTwo,
    SelectTree
  },
  created() {
    if (this.defaultData.op && !this.defaultData.opListTwo) {
      this.getListop(this.defaultData.field.key);
    }
  },
  computed: {
    fieldsTwo() {
      return this.$store.getters.fieldstwo || [];
    },
    showname() {
      return this.defaultData.field2 ? this.defaultData.field2.showname : "";
    }
  },
  provide() {
    return { setFieldTwo: this.setFieldTwo };
  },
  methods: {
    finishHandle(type,data){
      if(type == 'ok'){
        this.setFieldTwo(data);
      }
      this.treeSelect = false;
    },
    setFieldTwo(res) {
      this.getListop(res.key);
      this.$store.commit({
        type: "ADD_FIELD_TWO",
        position: this.position,
        field: res
      });
    },
    getListop(key) {
      let data = {
        arith: "",
        modelNs: this.searchObj,
        key,
        filterKey: this.defaultData.field.key,
        op: this.defaultData.op
      };
      querylistop(data)
        .then(res => {
          this.$store.commit({
            type: "SET_OP_LIST_TWO",
            position: this.position,
            data: res.result
          });
        })
        .catch(error => {
          showError(error);
        });
    },
    handleChange: debounce(function(e) {
      let value = parseInt(e.target.value);
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    }, 300)
  }
};
</script>
<style lang="less" scoped>
.container {
  display: flex;
  // flex: 3;
  width: 500px;
  .code-one {
    flex: 2;
    margin-right: 15px;
  }
  .ant-select {
    flex: 1;
    margin-right: 15px;
  }
  .ant-input {
    flex: 1;
  }
}
</style>