<template>
  <div class="wrap">
    <h2 v-if="settings&&settings.title" :style="{textAlign:'center'}">{{settings.title}}</h2>
    <div :id="id"></div>
  </div>
</template>
<script>
import * as G2 from "@antv/g2";
// 柱状图
export default {
  name: "BarChart",
  props: {
    // 数据
    dataTable: {
      type: Object
    },
    // 配置
    settings: {
      type: Object
    }
  },
  watch: {
    dataTable: {
      handler(v) {
        this.draw(v);
      },
      deep: true
    }
  },
  data() {
    return {
      id: Math.random().toString(36).substr(2),
      singleColumn: true,
      plot: undefined,
      color: ["#D15456","#5488D1","#EDBA55","#D48265","#91C7AE","#749F83","#BDA29A","#6E7074","#585470","#706254"]
    };
  },
  mounted() {
    this.draw(this.dataTable);
  },
  methods: {
    // keyCols :[]    [{column: "k0", key: "systype" ,showname: "系统类别"}]
    // rows :[]       [{k0: "党委", v0: 46},{k0: "人大" ,v0: 9}]
    // valueCols:[]   [{column: "v0" , showname: "记录数"}]
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = dataTable;
      this.singleColumn = keyCols.length == 1;
      return rows.map(item => {
        let key = keyCols[0];
        let names;
        if (keyCols.length) {
          names = [];
          for (let i = 1; i < keyCols.length; i++) {
            names.push(item[keyCols[i].column]);
          }
        }
        return {
          key: item[key.column],
          name: names && names.join("-"),
          value: item[valueCols[0].column] || 0
        };
      });
    },
    draw(dataTable) {
      let data = this.createData(dataTable);
      if (!data) {
        return false;
      }
      if (this.plot) {
        this.plot.destroy();
      }
      const chart = new G2.Chart({
        container: this.id,
        autoFit: true,
        appendPadding:[20,0,0,0]
      });
      chart.data(data);
      // X轴,Y轴标题别名
      chart.scale({
        key: {
          alias: dataTable.keyCols[0].showname
        },
        value: {
          alias: dataTable.valueCols[0].showname,
          nice: true
        }
      });
      // X 轴
      chart.axis("key", {
        title: {
          style: {
            fill: "#aaaaaa"
          }
        }
      });
      // Y 轴
      chart.axis("value", {
        title: {
          offset: 50,
          style: {
            fill: "#aaaaaa"
          }
        }
      });
      // 提示
      chart.tooltip({
        showMarkers: false
      });
      // 图例
      chart.legend(false);
      // 添加文本标注
      data.forEach(item => {
        chart.annotation().text({
          position: [item.key, item.value],
          content: item.value,
          style: {
            textAlign: "center"
          },
          offsetY: -10
        });
      });
      chart.interaction("active-region");
      //  geometry 图形
      let geometry = chart.interval();
      geometry.position("key*value");
      if (!this.singleColumn) {
        geometry
          .adjust([
            {
              type: "dodge",
              marginRatio: 0
            }
          ])
          .color("name", this.color);
      } else {
        geometry.color("key", this.color[0]);
      }
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 400px;
  display: flex;
  flex-direction: column;
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>