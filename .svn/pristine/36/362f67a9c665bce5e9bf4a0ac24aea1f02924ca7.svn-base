<template>
  <a-layout style="height:100%">
    <a-layout-content class="layoutcontent">
      <div class="contentbox">
        <div class="topbox">
          <div class="leftbox">
            <a-button icon="plus" type="primary" @click="newadd">新增</a-button>
            <a-button icon="delete" type="primary" style="margin-left:8px;" @click="fielddelete">删除</a-button>
          </div>
          <div class="rightbox">
            <ul>
              <li>
                <a-select
                  style="width:160px"
                  placeholder="请选择统计对象"
                  v-model="searchdata.target"
                  @change="typeChange"
                >
                  <a-select-option
                    v-for="(item,index) in targetlist"
                    :key="index"
                    :value="item.namespace"
                  >{{item.name}}</a-select-option>
                </a-select>
              </li>
              <li>
                <a-select style="width:160px" placeholder="请选择统计规则" v-model="searchdata.type">
                  <a-select-option value="0">自定义</a-select-option>
                  <a-select-option value="1">计算公式</a-select-option>
                </a-select>
              </li>
              <li>
                <a-input
                  allow-clear
                  placeholder="请输入字段名称或编码"
                  style="width: 200px"
                  v-model="searchdata.searchKey"
                />
              </li>
              <li>
                <a-button type="primary" @click="onSearch">搜索</a-button>
                <a-button style="margin-left:8px;" @click="onreset">重置</a-button>
              </li>
            </ul>
          </div>
        </div>
        <div class="tablecount">
          <a-table
            rowKey="id"
            :row-selection="rowSelection"
            :loading="loading"
            :columns="columns"
            :dataSource="pagination.rows"
            :pagination="false"
          >
            <span slot="action" class="operation" slot-scope="text, record">
              <a @click="edit(record)">编辑</a>
            </span>
          </a-table>
        </div>
        <div class="footer">
          <a-pagination
            v-if="pagination.rows && pagination.rows.length"
            showSizeChanger
            :showTotal="total => `总共：${total}条`"
            @showSizeChange="onShowSizeChange"
            :total="pagination.total"
            v-model="pagination.pagenum"
            @change="onPageChange"
          />
        </div>
      </div>
    </a-layout-content>
    <Statistics-Change
      :targetlist="targetlist"
      v-if="hackReset"
      style="display:none"
      :visible="visible"
      :codetype="codetype"
      :record="record"
      @getresh="getresh"
      @closeModal="Cancel"
    />
  </a-layout>
</template>
<script>
import {
  Layout,
  Pagination,
  Select,
  Table,
  Button,
  Input
} from "ant-design-vue";
import StatisticsChange from "./components/StatisticsChange";
import { fieldsearch, fieldtarget, deletefield } from "@/person/api/field";
import { showError } from "@/framework/utils/index";

export default {
  name: "StatisticsList",
  data() {
    return {
      rowSelection: {
        onChange: (selectedRowKeys, selectedRows) => {
          this.selectedRowKeys = selectedRowKeys;
        }
      },
      visible: false,
      codetype: null,
      record: "",
      selectedRowKeys: [],
      searchdata: {
        type: undefined,
        target: undefined,
        searchKey: null
      },
      columns: [
        {
          title: "序号",
          width: "5%",
          customRender: (text, record, index) => `${index + 1}`
        },
        {
          title: "字段名称",
          dataIndex: "name",
          width: "15%"
        },
        {
          title: "字段编码",
          dataIndex: "code",
          width: "25%"
        },
        {
          title: "字段分类",
          dataIndex: "sort",
          width: "15%"
        },
        {
          title: "统计对象",
          dataIndex: "target",
          width: "10%",
          customRender: function(target) {
            if (target == "organization") {
              return "组织";
            } else if (target == "user") {
              return "用户";
            }
          }
        },
        {
          title: "统计规则",
          dataIndex: "type",
          width: "10%",
          customRender: function(type) {
            if (type == 0) {
              return "自定义";
            } else if (type == 1) {
              return "计算公式";
            }
          }
        },
        {
          title: "启用",
          dataIndex: "enable",
          width: "10%",
          customRender: function(enable) {
            if (enable == true) {
              return "是";
            } else if (enable == false) {
              return "否";
            }
          }
        },
        {
          title: "操作",
          width: "25%",
          scopedSlots: { customRender: "action" }
        }
      ],
      loading: false,
      pagination: {
        rows: null,
        pagesize: 10,
        pagenum: 1,
        total: 0
      },
      targetlist: [],
      hackReset: true
    };
  },
  components: {
    ALayout: Layout,
    ALayoutContent: Layout.Content,
    APagination: Pagination,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATable: Table,
    AButton: Button,
    AInput: Input,
    StatisticsChange
  },
  created() {
    this.getresh();
    this.gettarget();
  },
  methods: {
    //删除
    fielddelete() {
      let that = this;
      if (this.selectedRowKeys.length > 0) {
        let data = this.selectedRowKeys;
        this.$confirm({
          title: "确认删除该行数据?",
          onOk() {
            deletefield(data)
              .then(res => {
                that.$notification.success({
                  message: "提示",
                  description: "删除成功!",
                  duration: 3
                });
                that.selectedRowKeys = [];
                that.getresh();
              })
              .catch(err => {
                showError(err);
              });
          },
          onCancel() {}
        });
      } else {
        this.$notification.warning({
          message: "提示",
          description: "请选择要删除的内容!",
          duration: 3
        });
      }
    },
    rebuileComponents() {
      // 销毁子标签
      this.hackReset = false;
      // 重新创建子标签
      this.$nextTick(() => {
        this.hackReset = true;
      });
    },
    edit(record) {
      this.rebuileComponents();
      this.record = record;
      this.record.type = this.record.type + "";
      this.record.inputtype = this.record.inputtype + "";
      this.visible = true;
      this.codetype = false;
    },
    //获取文件列表
    getresh() {
      let { pagenum, pagesize } = this.pagination;
      this.loadData(pagenum, pagesize);
    },
    //带参查询
    onSearch() {
      this.loadData(1, this.pagination.pagesize);
    },
    typeChange(value) {
      this.typevalue = value;
    },
    onPageChange(page, pagesize) {
      this.loadData(page, pagesize);
    },
    onShowSizeChange(current, size) {
      this.loadData(1, size);
    },
    loadData(pagenum, pagesize) {
      let params = {
        ...this.searchdata,
        needtotal: true,
        pagenum,
        pagesize
      };
      this.loading = true;
      fieldsearch(params)
        .then(res => {
          this.loading = false;
          this.pagination = res.result;
        })
        .catch(err => {
          this.loading = false;
          showError(err);
        });
    },
    gettarget() {
      fieldtarget()
        .then(res => {
          this.targetlist = res.result;
        })
        .catch(err => {
          showError(err);
        });
    },
    newadd() {
      this.rebuileComponents();
      this.record = "";
      this.visible = true;
      this.codetype = true;
    },
    Cancel() {
      this.visible = false;
      this.rebuileComponents();
    },
    onreset() {
      this.searchdata = { input: {} };
      this.loadData(1, this.pagination.pagesize);
    }
  }
};
</script>
<style lang="less" scoped>
.layoutcontent {
  height: 100%;
  padding: @layout-space-base;
  .contentbox {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    position: relative;
    height: 100%;
    width: 100%;
    background-color: white;
    padding-top: @layout-space-base;
    .topbox {
      padding: @content-padding-v @content-padding-h;
      width: 100%;
      height: auto;
      .leftbox {
        float: left;
      }
      .rightbox {
        float: right;
      }
      ul {
        margin: 0;
        white-space: nowrap;
      }
      li {
        display: inline-block;
        margin-left: 8px;
        white-space: nowrap;
        .name {
          line-height: 32px;
          padding-right: 5px;
          vertical-align: middle;
        }
        .ant-input-group.ant-input-group-compact,
        .ant-select,
        .ant-input,
        .ant-btn,
        .ant-input-affix-wrapper {
          display: inline-block;
          vertical-align: middle;
        }
      }
    }
  }
  .tablecount {
    padding: 0 @content-padding-h;
    flex-shrink: 1;
    min-height: 0;
    overflow-y: auto;
    margin-top: @layout-space-base;
    .operation {
      a {
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
  .footer {
    padding: @content-padding-v @content-padding-h;
    .ant-pagination {
      float: right;
      margin-bottom: 10px;
    }
  }
}
</style>