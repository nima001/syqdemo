<template>
  <div class="container">
    <a-input-group compact>
      <a-select v-model="input.type" style="width:42px;" :showArrow="false">
        <a-select-option value="">值</a-select-option>
        <a-select-option value="$"><icon-font type="fx"/></a-select-option>
        <a-select-option value="#"><icon-font color="#f39c2b" type="fx"/></a-select-option>
      </a-select>
      <template v-if="input.type">
        <a-input :value="value"
          read-only
          @click="showExprEditor = true"
          style="width:calc(100% - 42px)"
        />
      </template>
      <!-- TODO -->
      <a-input v-else
        v-model="input.value"
        @change="handleChange" 
        placeholder="多个值“,”隔开"
        style="width:calc(100% - 42px)"
      />
    </a-input-group>
    <equation-editor v-if="showExprEditor" :fnData="input.value" namespace="query"  @finish="onFinish"/>
  </div>
</template>
<script>
import { debounce } from "@/framework/utils/index";
import { Input,Select } from "ant-design-vue";
import IconFont from "@/framework/components/IconFont";
// 字符数组 in/nin
export default {
  name:"StringArray",
  data() {
    return {
      input: this.initInput(this.defaultData.value),
      oldValue: undefined,
      showExprEditor: false
    };
  },
  components: {
    AInput: Input,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    IconFont,
    EquationEditor:() => import('@person/components/EquationEditor')
  },
  props: {
    position: {
      type: String,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    }
  },
  computed:{
    value(){
      let {type, value} = this.input;
      if(type && value){
        return type + '{' + value + '}';;
      }else{
        return value;
      }
    }
  },
   watch: {
    'input.type'(vt, ovt){
      if(!ovt != !vt){
        let v = this.oldValue;
        this.oldValue = this.input.value;
        this.input.value = v;
      }
    },
    value(value){
      let data = undefined;
      if(this.input.type){
        data = value;
      }else{
        if(value){
          data = value.split(",");
          for (let i = 0; i < data.length; i++) {
            data[i] = data[i].replace(/\s/g, "");
          }
        }else{
          data = [];
        }
      }
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value:data
      });
    },
  },
  methods: {
    handleChange: debounce(function(e) {
      this.input.value = e.target.value;
    }, 300),
    /** 
     * value 类型   1. 公式(String)   2.数组   3.undefined
    */
    initInput(v){
      if(typeof(v) == 'string'){
        if(v.startsWith('${') && v.endsWith('}')){
          return { type: '$', value: v.substring(2, v.length-1) };
        }else if(v.startsWith('#{') && v.endsWith('}')){
          return { type: '#', value: v.substring(2, v.length-1) };
        }
      }else if(Object.prototype.toString.call(v) === '[object Array]'){
        return { type :'',value: v.toString()}
      }
      return { type: '', value: v};
    },
    onFinish(type, data) {
      this.showExprEditor = false;
      if (type == "ok") {
        this.input.value = data;
      }
    }
  }
};
</script>
<style lang="less" scoped>
.container {
  width: 320px;
}
</style>