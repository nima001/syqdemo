<template>
  <FormProvider :form="form">
    <SchemaField :schema="schema">
    </SchemaField>
  </FormProvider>
</template>
<script>
import { createForm, isVoidField, createEffectHook, onFormInputChange, onFormValuesChange } from '@formily/core'
import { FormProvider, createSchemaField, observer, useForm, useField, useFieldSchema, Schema } from '@formily/vue'
import { defineComponent, h, reactive } from '@vue/composition-api'
import components from './compLib'

import { ObjectfromEntries } from '@/framework/utils'
import {cloneDeep} from 'lodash'

// const GridLayout1 = observer(defineComponent({
//   setup (props, x) {
//     debugger
//     const form = useForm().value;
//     const schema = useFieldSchema().value
//     return () => {
//       const cols = x.slots.default();
//       // if(this.children){
//       //   this.children.forEach(item => {
//       //     if(!item.components || item.components.length == 0){//FIXME sunwen 编辑时还未添加组件
//       //       cols.push(h(Col, {
//       //         class: 'cmpt-panel',
//       //         props: {span: item.span || 0},
//       //       }))
//       //     }else{
//       //       let cmptList = this.createCmptList(item.components, createElement);
//       //       if(cmptList.length ){
//       //         cols.push(createElement(Col, {
//       //           class: 'cmpt-panel',
//       //           props: {span: item.span || 0},
//       //         }, cmptList))
//       //       }
//       //     }
//       //   })
//       // }
//       return h(Row, { 
//         class: 'wrapper', 
//         nativeOn: {
//           click: (e) => {
//             //选中schema
//           }
//         },
//         props: {gutter: 16, type: 'flex'} 
//       }, cols)
//       // return h(Form.Item, {
//       //   props: {
//       //     label: field.title,
//       //     help: field.errors?.length ? field.errors : undefined,
//       //     extra: field.description,
//       //     validateStatus: field.validateStatus,
//       //   }
//       // }, slots?.default())
//     }
//   }
// })) 

const formComponents = {};
Object.keys(components).forEach(name => {
  formComponents[name] = components[name].component;
})

//TODO 组件扩展
const { SchemaField } = createSchemaField({
  components: formComponents,
})

const onCustomEvent = createEffectHook(
  'schemaChange',
  (payload, form) => (listener) => {
    listener(payload, form)
  }
)

export default {
  name: 'Form',
  components: { 
    FormProvider, 
    SchemaField,
  },
  model: {
    event: 'change'
  },
  props: {
    config: Object,
    value: Object,
  },
  provide(){
    return {
      context: this.context,
    }
  },
  data() {
    return {
      initValue: undefined,
      context: {
        decorators: undefined,
      },
      form: undefined,
      schema: undefined,
    }
  },
  created(){
    // this.initValue = cloneDeep(this.value);
    console.log('form create', this.config)
    // this.initFrom(this.initValue)
  },
  watch: {
    value: {
      immediate: true,
      handler(v, oldv){
        if(v != this.initValue){
          this.initValue = cloneDeep(v);
          if(this.form){
            this.form.setValues(v, 'overwrite');
          }
        }
      }
    },
    config: {
      immediate: true,
      handler(v){
        this.createFormContext();
        this.schema = v && new Schema(v.schema || {});
        console.log('form config watched', v, this.initValue, this.context)
        this.initFrom(this.initValue);
      }
    },
  },
  methods: {
    initFrom(values){
      this.form = createForm({
        values,
        effects: (form) => {
          onCustomEvent((payload, ss) => {
            console.log(payload, ss);
            console.log(JSON.stringify(payload))
          });
          onFormValuesChange((form) => {
            console.log('onFormValuesChange', form);
            this.$emit('change', form.values);
          });
          onFormInputChange((form) => {
            console.log('onFormInputChange: ', form.values)
          });
        },
      })
    },
    createFormContext(){
      Object.assign(this.context, {decorators: undefined}, this.config);
    },
    submit(){

    }
  }
}
</script>
<style lang="less" scoped>

</style>