# 【规范】
## 命名
  1.命名 言简意赅 保证语义的前提下尽量缩短长度，不要使用自创的单词缩写。
		在特殊情况下允许使用拼音，使用拼音命名时不要使用首字母，且需加上py后缀
	2.文件夹一律使用小写
  3.index.js 或者 index.vue 等index文件首字符不要大写
  4.组件或类，统一使用大写字母开头的(PascalCase)命名规范
  5.其他非组件或类的，统一使用小写字母开头的(kebab-case)命名规范
  6.变量名或方法名，统一使用小写字母开头的(pascalCase)命名规范
  7.图片等静态资源文件命名按 [类型]-[模块功能(公共资源可省略)]-[名称]-[状态/描述(不需要是可省略)].png 的形式命名。
    正例：icon-report-book.png  icon-report-book-active.png  bg-user-head-default.png 
    反例：s1.png  book.png
  8.组件标签和属性，统一使用小写字母开头的(kebab-case)命名规范
  9.样式的class id，统一使用小写字母开头的(kebab-case)命名规范
  10.路由路径一律小写

  更多Vue相关规范 参考Vue规范说明：https://cn.vuejs.org/v2/style-guide/

## 样式
  1.style标签上需添加scoped。特殊情况下不添加scoped的，所有样式需写到具体功能的命名空间下。
  2.样式书写严格按照dom结构和顺序嵌套书写，公共样式写到头部。后续dom结构变更，样式结构需同步变更。
  3.全局定义名称简单的class请需慎重，建议不要写。
    例如：.name .hand .active 这样的class。可以为其添加一个命名空间
        .workflow-form{
          .name{
            //style
          }
        }
  4.同一个class下如果有很多样式请按照如下顺序书写：
    （1）位置属性：position left top right bottom z-index display float overflow clear 等
    （2）大小：width height padding margin 等
    （3）文字样式：font-size font-family font-style font-weight font-varient color 等
    （4）文本属性：text-align vertical-align text-wrap text-transform text-indent text-decoration letter-spacing word-spacing white-space text-overflow 等
    （5）背景：background border 等
    （6）css3中新增属性：content box-shadow border-radius animation transform 等
    （7）伪元素：hover active 等
  5.样式的主题，在theme中定义，在设置背景，边距，颜色时，尽量考虑使用主题中定义的公共变量。**（theme中每一个配置请熟知）**
    公共变量请查阅antdesign定义标准：https://github.com/vueComponent/ant-design-vue/blob/master/components/style/themes/default.less
    如theme未定义，严格按照antdesign规范添加改写

## import导入
  1.导入的文件顺序请按照如下顺序书写：
    （1）第三方组件
    （2）自定义组件
    （3）第三方工具
    （4）自定义工具
    （5）api接口
    （6）样式文件
  2.禁止同级别模块之间跨模块导入，如果有跨模块引用的需求，请考虑解耦方案

## 属性和方法
  1.vue对象一下常用的属性建议按如下顺序书写
    （1）name
    （2）components
    （3）props、data、compute、provide/inject
    （4）watch
    （5）beforeCreated、created等生命周期方法
    （6）methods
  2.methods下方法过多时（超过5个）建议按如下顺序书写，并且可适当的在各类方法之前添加显眼的注释分隔
    （1）页面初始化相关方法
    （2）页面事件处理方法
    （3）获取数据或接口请求相关方法
    （4）工具方法，工具方法建议在方法名称前添加“_”

# 【项目】
## 项目结构
  > theme [主题定义]
  > src [源码路径]
  >> framework [框架] 包含 首页/菜单/权限/基础/工具等
  >>> api [接口]
  >>> assets [静态资源]
  >>> components [模块内公共组件]
  >>> router [路由]
  >>> store [vuex]
  >>> style [公共样式]
  >>> utils [模块内工具]
  >>> views [页面]
  >>> widgets [首页控件]
  >>> main.js [模块入口文件]
  >> login [登录模块]
  >>> ... [模块内目录同framework]
  >> person [人员系统模块]
  >>> ... 
  >> salary [工资模块]
  >>> ... 
  >>> workflow [工作流模块]
  >>> ... 

## 服务端接口请求
  服务端请求在request.js中，对请求接口、认证参数、返回值解析统一封装处理
  例如:
  ``` javascript
    request({
      url: '/person/user',
      method: 'get',
      params: {
        id: 1
      }
    }).then(({result:user}) => {
      //在这里处理数据
      this.user = user;
    }).catch(error => {
      //在这里处理错误
      showError(error);
    })
  ``` 

## 路由
  1.模块下的路由必须以模块名称作为前缀
  2.路由跳转尽量使用 path 不使用name 跨模块之间的跳转禁止使用name
  3.路由meta配置
    auth: auth 需授权 login 需登录 public或不配置 公开
    path: 导航路径，不配置将不显示面包屑导航

## 公共Store
  1.config ui配置
  2.session 用户登录会话
  3.permit 路由/功能鉴权
  4.dict 常量字段
  其它模块需导入BaseModules
  * 持久化数据默认在登出清除，如需要登出不清除在state下配置persiste为true
  
## 组件/插件
  公共组件见目录 framework/components
  公共插件见目录 framework/plugins

  开发公共组件必须抽象化，定义高度可扩展的参数，组件公共化优先级：
  1.framework/components
  2.[模块]/components
  3.[模块]/views/[功能]/components

  任何vue文件请必须在导出的vue对象前加上注释说明以下内容
  1.文件功能及说明
  2.对外提供的事件
  3.传入的参数（传入的参数也可在props内的属性后添加）
  4.作者和时间

## 工具方法
  1.单个组件内使用的工具方法写在组件的methods下
  2.某一功能下通用的方法，在 [模块]/views/[功能] 文件夹下创建js文件
  3.某模块通用的方法，写在 [模块]/utils 下
  4.整个项目通用的方法，写在 framework/utils 下 

## 解耦方案
  1.路由解耦（约定路由地址，不同模块根据路由地址跳转）
    典型案例 登录、登出
  2.本地存储解耦（约定数据格式将数据保存到localStorage/Cookie等本地存储，不同模块读/写数据）
    典型案例 权限、常量字典
  3.编译解耦（在编译过程中按照约定规则自动注入依赖）
    典型案例 首页控件

## 运行与打包
  1.安装
    npm install
  2.配置
    修改.env 文件或在系统的环境变量中设置如下参数：
    VUE_APP_MODULES [打包的模块，多个模块‘,’隔开，未指定将打包所有非二次开发的模块]
    VUE_APP_PROJECT_NAME [项目名（用于识别服务端项目）]
    VUE_APP_PROJECT_PATH [项目部署地址，默认根据项目名设置，如需部署到根路径设置为空]
    VUE_APP_PROJECT_PLUGIN [个性化项目插件名称]
    VUE_APP_CONFIG_UI_URL [服务端配置加载地址，默认使用/api/config/v1/config/ui/{项目名}] 
    VUE_APP_THEME [项目使用的主题，参见theme.js]
    以下为服务端配置
    api.url [接口地址，默认使用/api]<!--部分接口使用cookie,确保cookie正常发送,建议不要配置绝对路径保持前端和接口域名相同-->
    idm.url [单点登录地址，默认为空（不需要单点登录）]
    idm.servicecode [单点登录接入码，time和sign参数临放在服务器配置中]
    project.title [项目显示中文名]
    project.logo [项目显示图标下载地址]
    home.page [登录成功后跳转的页面相对地址，默认为空（根目录）]
    custom.icon [自定义图标配置，例如组织、用户]
    unittype.unit [单位的单位类型]
    unittype.dept [科室的单位类型]
  4.开发运行
    npm run serve --modules=login,person
  5.打包
    npm run pro-build --modules=login,person --projectPath=person
  6.部署
    打包后是按模块打包成多个入口文件，需要nginx按模块名代理到不同的入口文件
    参考配置如下：
		server {
    	listen 80;

      #登录模块
			location = /部署项目地址/login {
				alias /opt/person_ui/;
				try_files login.html /部署项目地址/login.html;
			}
			location /部署项目地址/login/ {
				alias /opt/person_ui/;
			#	index login.html;
				try_files $uri $uri/ /部署项目地址/login.html;
			}
			#人员模块
			location = /部署项目地址/person {
				alias /opt/person_ui/;
				try_files person.html /部署项目地址/person.html;
			}
			location /部署项目地址/person/ {
				alias /opt/person_ui/;
			#	index person.html;
				try_files $uri $uri/ /部署项目地址/person.html;
			}   
			#默认跳转
			location = /部署项目地址 {
				alias /opt/person_ui/;
				try_files index.html /部署项目地址/index.html;
			}
			location /部署项目地址/ {
				alias /opt/person_ui/;
			#	index index.html;
				try_files $uri $uri/ /部署项目地址/index.html;
			}
		}
  * 命令行参数说明：
    命令行的参数将根据驼峰转换“_”后转换成大写添加“VUE_APP_”前缀替换.env中的配置（即命令行的配置优先级最高）
    例如：--projectPath 将替换 .env 中的 VUE_APP_PROJECT_PATH 参数

## 二次开发
  对某一模块进行二次开发，在模块的同级目录创建 [模块名]-[项目] 的文件夹。
  例如: 绍兴人员系统二次开发  person-shaoxing
  1.如何二次开发
    ● 路由入口重写 
      每个二次开发目录和标准模块一样会有一个单独的main文件入口，所以只需要改写路由配置入口即可重写整个功能或新增一个功能
      这种方式针对改动较大的功能是比较有效的
    ● 单个文件重写
      有时我们需要改写一个小功能，比如某个组件添加一个按钮或改样式，这时通过路由入口切入就比较费劲
      借助于plugin-cover-loader，在二次开发目录下添加和需重写组件同路径同名的文件即可重写该组件
  2.二次开发打包参数：modules和projectPlugin
    打包二次开发可使用下面两种方式
    ● 指定projectPlugin
      npm run pro-build --modules=login,person --projectPlugin=yuhang  
      将会查找login,person下面是否有yuhang的二次开发包
    ● 直接指定模块包 
      npm run pro-build --modules=login,person-yuhang
      如果直接指定的二次开发包和projectPlugin指定的不同，优先采用modules指定的

