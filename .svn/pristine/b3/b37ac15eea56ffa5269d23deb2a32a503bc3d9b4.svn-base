<template>
  <a-form-item :disabled="!!disabled" :class="{editor:!editor}">
    <div class="group-panel">
      <template v-if="list && list.length">
        <div class="group-item" v-for="(item,index) in list" :key="index">
          <div class="remove"  @click="removeItem(item,index)" v-if="editor">
            <a-icon type="close" />
          </div>
          <a-row :gutter="24">
            <a-col :span="lg.span" v-for="(lg,index) in properties" :key="index+Math.random()">
              <component :is="lg.type" :key="index" v-bind="lg" :data="item"  />
            </a-col>
          </a-row>
        </div>
      </template>
      <template v-else>
        <empty-data></empty-data>
      </template>
    </div>
    <a-button v-if="editor"
      type="dashed" @click="addGroup" :disabled="!!disabled" :style="{width:'100%',margin:'6px 0px'}">
      <a-icon type="plus" />添加
    </a-button>
  </a-form-item>
</template>
<script>
import {Form,Input,Table,Button,Icon,Modal,Row,Col} from "ant-design-vue";
import { mixins } from "@formdesign/views/mixin/index";
import get from "lodash/get";
import set from "lodash/set";
import moment from "moment";
import cloneDeep from "lodash/cloneDeep";
import { components, initDataProps } from "../common";
import EmptyData from "@framework/components/EmptyData";
import Vue from "vue";
export default {
  title: "自定义表单组组件",
  mixins: [mixins],
  components: {
    AFormItem: Form.Item,
    AButton: Button,
    AIcon: Icon,
    ARow: Row,
    ACol: Col,
    EmptyData,
    ...components
  },
  props: {
    // 表单组配置
    properties: {
      type: Array,
      required: true
    },
    // table的label
    label: {
      type: String,
      required: true
    },
    disabled:{
      type:Boolean
    }
  },
  data() {
    return {
      visible: false,
      initFormData: Object.assign({}, initDataProps({}, this.properties)),
      editIndex: undefined
    };
  },
  provide() {
    const _this = this;
    return {
      formData: new Vue({
        data() {
          return {
            data: cloneDeep(_this.initFormData),
            formItem: [],
            editor: _this.editor
          };
        }
      })
    };
  },
  computed: {
    // 数据源
    list() {
      return get(this.formData.data, this.code) || [];
    }
  },
  watch:{
    list(){
      //  刷新收集的组件内部的子组件
      this._provided.formData.formItem = []
      this.$forceUpdate()
    },
    editor(v){
      this._provided.formData.editor = v;
    }
  },
  methods: {
    // 内部子组件验证
    validateChildren() {
      // 表单项目
      let formList = this._provided.formData.formItem;
      let validator = [];
      (formList || []).forEach(ele => {
        if(ele.validateField){
          validator.push(ele.validateField());
        }
      });
      return Promise.all(validator).then(result => {
        let arr = [];
        result.forEach(item => {
          if(Array.isArray(item)){
            arr = [...arr, ...item];
          }else if(item){
            arr.push(item);
          }
        })
        return arr;
      });
    },
    async validate(callback) {
      if(this.required && !this.list.length){//列表空验证
        callback({ code: this.code, status: 'error', message: `${this.name || this.code}不能为空`})
        return;
      }
      let result = await this.validateChildren();
      callback(result)
    },
    // 添加组数据
    addGroup() {
      if (get(this.formData.data, this.code) == undefined) {
        set(this.formData.data, this.code, []);
      }      
      this.formData.data[this.code].push(cloneDeep(this.initFormData));
    },
    // 删除table指定行数据
    removeItem(item,index) {
      this.formData.data[this.code].splice(index,1)
    }
  }
};
</script>
<style lang="less" scoped>
.ant-form-item {
  margin-bottom: 0;
  &.editor{
    position: relative;
    &::before{
      position: absolute;
      left: 0px;
      top: 0px;
      content: '';
      width: 100%;
      height: 100%;
      display: block;
      z-index: 3;
    }
  }
  .group-panel {
    .group-item {
      position: relative;
      &:hover {
        outline: 1px dashed @primary-2;
        .remove {
          display: block;
          cursor: pointer;
        }
      }
      .remove {
        position: absolute;
        right: 0;
        top: 0;
        z-index: 100;
        width: 16px;
        height: 16px;
        padding-left: 4px;
        padding-bottom: 4px;
        line-height: 12px;
        font-size: 12px;
        border-bottom-left-radius: 12px;
        background: fade(#666, 10%);
        color: #666;
        display: none;
        &:hover {
          color: @error-color;
        }
      }
    }
  }
}
</style>