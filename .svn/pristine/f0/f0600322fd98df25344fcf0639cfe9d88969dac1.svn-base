<template>
  <div class="edit-template">
    <a-form class="template-form" :form="form">
      <a-form-item label="评估内容">
        <a-input
          v-decorator="['content', 
            { rules: [{ required: true, message: '请输入评估内容'}],
            initialValue: templateInfo ? templateInfo.content : undefined
          }]"
        />
      </a-form-item>
      <a-form-item label="分类">
        <a-select
          v-decorator="['type', 
            { rules: [{ required: false, message: '请选择分类'}], 
            initialValue: templateInfo ? templateInfo.type : undefined
          }]"
          >
          <a-select-option value="机构设置">机构设置</a-select-option>
          <a-select-option value="编制调整">编制调整</a-select-option>
          <a-select-option value="职数调整">职数调整</a-select-option>
          <a-select-option value="职责调整">职责调整</a-select-option>
        </a-select>
      </a-form-item>
      <a-form-item label="评估项">
        <a-select
          mode="multiple"
          style="width: 100%"
          v-decorator="['items', 
            { rules: [{ required: false, message: '请选择评估项'}],
            initialValue: templateInfo ? templateInfo.items : undefined 
          }]"
        >
          <a-select-option v-for="(i,index) in itemArr" :key="index" :value="i.value">
            {{i.text}}
          </a-select-option>
        </a-select>
      </a-form-item>
      
    </a-form>
  </div>
</template>
<script>
import { Input, Icon, Form, Select } from "ant-design-vue";
import { findTem } from "@/person-shaoxing/api/manage";
import { showError } from '../../../../framework/utils';
export default {
  name: 'editTemlate',
  props: ['id'],
  components: {
    AInput: Input,
    AIcon: Icon,
    AForm: Form,
    AFormItem: Form.Item,
    ASelect: Select,
    ASelectOption: Select.Option,
  },
  data() {
    return {
      templateInfo: undefined,
      itemArr: [
        {value: 'baseInfo', text: "基本情况"},
        {value: 'staff', text: "编制情况"},
        {value: 'staffChange', text: "编制调整情况"},
        {value: 'staffBlacklist_new', text: "是否列入机构编制审批黑名单(新设)"},
        {value: 'staffBlacklist_yet', text: "是否列入机构编制审批黑名单(已设)"},
        {value: 'staffViolate_new', text: "是否存在机构编制违规问题情况(新设)"},
        {value: 'staffViolate_yet', text: "是否存在机构编制违规问题情况(已设)"},
        {value: 'orgLimit_newxz', text: "区域机构限额(新设行政)"},
        {value: 'orgLimit_newsy', text: "区域机构限额(新设事业)"},
        {value: 'orgCase_new', text: "内设机构情况(新设)"},
        {value: 'orgCase_yet', text: "内设机构情况(已设)"},
        {value: 'orgNamenotation', text: "事业单位机构名称命名规范"},
        {value: 'orgListednumber', text: "挂牌机构数量"},
        {value: 'orgStaffcase_newxz', text: "同类机构编制比对情况(新设行政)"},
        {value: 'orgStaffcase_yetxz', text: "同类机构编制比对情况(已设行政)"},
        {value: 'orgStaffcase_newsy', text: "同类机构编制比对情况(新设事业)"},
        {value: 'orgStaffcase_yetsy', text: "同类机构编制比对情况(已设事业)"},
        {value: 'compileLimit_newxz', text: "区域内编制限额(新设行政)"},
        {value: 'compileLimit_yetxz', text: "区域内编制限额(已设行政)"},
        {value: 'compileLimit_newsy', text: "区域内编制限额(新设事业)"},
        {value: 'compileLimit_yetsy', text: "区域内编制限额(已设事业)"},
        {value: 'orgLeadernumber_new', text: "行政机构领导职数配置(新设)"},
        {value: 'orgLeadernumber_yet', text: "行政机构领导职数配置(已设)"},
        // {"D": "是否存在机构编制问题情况(已设)"},
        // {"E": "是否列入机构编制审批黑名单(新设)"},
        // {"F": "是否列入机构编制审批黑名单(已设)"},
        // {"G": "机构限额判定(新设行政)"},
        // {"H": "机构限额判定(新设事业)"},
        // {"I": "综合性内设机构不超过内设机构总数33%(已设)"},
        // {"J": "综合性内设机构不超过内设机构总数33%(新设)"},
        // {"k": "编制限额判定(新设行政)"},
        // {"L": "编制限额判定(已设行政)"},
        // {"M": "编制限额判定(新设事业)"},
        // {"N": "编制限额判定(已设事业)"},
        // {"O": "不同地区同类机构编制比对情况(新设行政)"},
        // {"P": "不同地区同类机构编制比对情况(新设事业)"},
        // {"Q": "行政机构领导职数配置规则(新设)"},
        // {"R": "行政机构领导职数配置规则(已设)"}
      ]
    }
  },
  beforeCreate() {
    this.form = this.$form.createForm(this);
  },
  created() {
    if(this.id) {
      this.getDetail();
    }
  },
  methods: {
    getDetail() {
      findTem(this.id)
      .then(({result}) => {
        this.templateInfo = result;
      })
      .catch(err => {
        showError(err);
      })
    },
    getFormValue(){
      return new Promise((resolve, reject) => {
        this.form.validateFields((error, values) => {
          if(error){
            reject({code:'form_validate_fail', message: '表单验证失败'});
          }else{
            let items = values.items ? values.items.join(',') : undefined;
            let value = {
              content: values.content,
              type: values.type,
              items
            };
            resolve(value);
          }
        })
      })
    }
  }
}
</script>
<style lang="less" scoped>
.edit-template{
  height: 100%;
  display: flex;
  flex-direction: column;
  .template-form{
    flex: auto;
    min-height: 0;
    overflow: auto;
    padding: @content-padding-v @content-padding-h;
  }
}
</style>