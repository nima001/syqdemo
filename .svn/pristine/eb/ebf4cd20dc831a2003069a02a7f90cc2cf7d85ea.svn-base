<template>
  <div class="multiwrap">
    <a-modal
      title="人员选择"
      v-model="visible"
      :footer="null"
      :width="800"
      :bodyStyle="{ height: '600px', padding: '0'}"
    >
      <org-user-select :mode="mode" :showDept='true' :selected="selected" :maxSelect="800" @finish="selectUser" />
    </a-modal>

    <a-input-group compact>
      <a-select v-model="input.type" style="width:42px;" :showArrow="false">
        <a-select-option value="">值</a-select-option>
        <a-select-option value="$"><icon-font type="fx"/></a-select-option>
        <a-select-option value="#"><icon-font color="#f39c2b" type="fx"/></a-select-option>
      </a-select>
      <template v-if="input.type">
        <a-input :value="value"
          read-only
          @click="showExprEditor = true"
          style="width:calc(100% - 42px)"
        />
      </template>
      <div class="wrapCmpt" @click="showModal" v-else style="width:calc(100% - 42px);min-height:'32px';">
        <multi-select :list="input.value||[]" @delFilter="filterValue"></multi-select>
      </div>
    </a-input-group>
    <equation-editor v-if="showExprEditor" :fnData="input.value" namespace="query"  @finish="onFinish"/>

  </div>
</template>
<script>
import OrgUserSelect from "@/framework/components/OrgUserSelect";
import MultiSelect from "../../../components/MultiSelect";
import { Input, Select,Modal } from "ant-design-vue";
import IconFont from "@/framework/components/IconFont";
//  引用类型多选(人员)
export default {
  name:"ReferUserMulti",
  data() {
    return {
      visible: false,
      selected: [],
      input: this.initInput(this.defaultData.value),
      oldValue: undefined,
      showExprEditor: false
    };
  },
  props: {
    position: {
      type: String,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    }
  },
  components: {
    AModal: Modal,
    OrgUserSelect,
    MultiSelect,
    AInput: Input,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    IconFont,
    EquationEditor:() => import('@person/components/EquationEditor')
  },
  computed: {
    mode() {
      let { datasource, key } = this.defaultData.field;
      let deptArr = ['dept','workdept','admin@user.dept','admin@user.workdept'];
      return datasource == "user" ? "user" : deptArr.includes(key) ? "dept" : "org";
    },
    value(){
      let {type, value} = this.input;
      if(type && value){
        return type + '{' + value + '}';
      }else{
        return value;
      }
    }
  },
  watch:{
    'input.type'(vt, ovt){
      if(!ovt != !vt){
        let v = this.oldValue;
        this.oldValue = this.input.value;
        this.input.value = v;
      }
    },
    value(value){
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    }
  },
  methods: {
    showModal() {
      this.visible = !this.visible;
      this.selected = this.input.value || [];
    },
    selectUser(type, list) {
      this.visible = false;
      if (type == "ok" && list.length) {
        let value = this.filterData(list);
        this.$store.commit({
          type: "SET_VALUE",
          position: this.position,
          value
        });
        this.input.value = value
      }
    },
    filterData(arr) {
      let arrList = [];
      for (let i = 0; i < arr.length; i++) {
        let obj = {};
        obj._id = arr[i]._id;
        obj.username = arr[i].username;
        arrList.push(obj);
      }
      return arrList;
    },
    filterValue(_id) {
      let arrList = this.input.value;
      let newValue = arrList.filter(item => {
        return _id != item._id;
      });
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value: newValue
      });
    },
    onFinish(type, data) {
      this.showExprEditor = false;
      if (type == "ok") {
        this.input.value = data;
      }
    },
    initInput(v){
      if(typeof(v) == 'string'){
        if(v.startsWith('${') && v.endsWith('}')){
          return { type: '$', value: v.substring(2, v.length-1) };
        }else if(v.startsWith('#{') && v.endsWith('}')){
          return { type: '#', value: v.substring(2, v.length-1) };
        }
      }
      return { type: '', value: v};
    }
  }
};
</script>
<style lang="less" scoped>
.multiwrap {
  width: 320px;
  /deep/.wrapCmpt{
  border: 1px solid #d9d9d9;
  padding: 0px 10px;
  border-radius: 4px;
  background: #fff;
  cursor: pointer;
  box-sizing: border-box;
  border-top-left-radius: 0px;
  border-bottom-left-radius:0px;
  }
}
</style>