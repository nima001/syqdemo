<template>
  <a-layout class="monitorstrategyinfo">
    <a-spin :spinning="spinning" wrapperClassName="form-submit-spin" :delay="300">
      <div class="monitorstrategy-form">
        <div class="body">
          <a-form class="form" :form="form" >
            <div class="title-bar">基本信息</div>
            <a-form-item label="策略名称:" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }">
              <a-input type="text" v-decorator="['name',{initialValue: record.name||'', rules:[{required: true, message:'请输入策略名称'}]}]" />
            </a-form-item>
            <a-form-item label="校验对象:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}">
              <a-select 
                v-decorator="['checkobj',{initialValue: record.checkobj||'', rules:[{required:true,message:'请选择校验对象'}]}]" 
                placeholder="请选择校验对象" @change="checkobjChange">
                <a-select-option v-for="(item,index) in checkobjectList" :key="index" :value="item.value" >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="策略类型:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
              <a-select 
                v-decorator="['strategytype',{initialValue: record.strategytype ||'', rules:[{required:true,message:'请选择策略类型'}]}]" 
                placeholder="请选择策略类型" @change="strategytypeChange" >
                <a-select-option v-for="(item,index) in strategytypeList" :key="index" :value="item.value" >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="运行状态:" :label-col="{ span: 2 }" :wrapper-col="{ span: 5}" >
              <a-switch 
                v-decorator="['runstatus', { initialValue: record.runstatus === 1, valuePropName: 'checked'}]"
                checkedChildren="已启用" unCheckedChildren="已停用" />
            </a-form-item>
            <a-form-item label="策略描述" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }" >
              <a-textarea :rows="5" v-decorator="['description',{initialValue: record.description}]" placeholder="请输入该规则描述信息"/>
            </a-form-item>
            <div class="title-bar">规则内容</div>
            <a-form-item label="校验方式:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
              <a-select
                v-decorator="['checktype',{initialValue: record.checktype, rules:[{required:true,message:'请选择校验方式'}]}]"
                placeholder="请选择校验方式" @change="onChecktypeChange" >
                <a-select-option v-for="(item,index) in checktypeList" :key="index" :value="item.value" >
                  {{item.text}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <a-form-item label="预设方案:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" v-if="initData.checktype === 2">
              <a-select
                v-decorator="['strategyvalue',{initialValue: record.strategyvalue, rules:[{required:true,message:'请选择预设方案'}]}]"
                placeholder="请选择预设方案" @change="strategyValueChange" >
                <a-select-option v-for="(item,index) in presetList" :key="index" :value="item.strategyvalue" >
                  {{item.name}}
                </a-select-option>
              </a-select>
            </a-form-item>
            <div class="presetContent" v-if="initData.checktype === 1">
              <a-form-item label="策略规则:" :label-col="{ span: 2 }" :wrapper-col="{ span: 4}" >
                <a-button class="selectBtn" @click="()=>showQueryModal = true">
                  <a-icon type="plus-circle" />规则配置
                </a-button>
                <a-input type="hidden" v-decorator="['customqueryid',{initialValue: record.customqueryid, rules:[{required:true,message:'请设置过滤条件'}]}]" />
              </a-form-item>
              <a-form-item label="机构字段" :label-col="{ span: 2 }" :wrapper-col="{ span: 4 }">
                <a-button class="selectBtn" @click="()=>orgFieldVisible = true" :disabled="!targetid" >
                  <a-icon type="plus-circle" />选择字段
                </a-button>
                <a-input type="hidden" v-decorator="['orgfield',{initialValue: record.orgfield}]" />
              </a-form-item>
              <a-form-item label="策略替换" :label-col="{ span: 2 }" :wrapper-col="{ span: 10 }" >
                <a-radio-group @change="onReplaceChange" :disabled="!targetid"
                  v-decorator="['replace',{initialValue: record.replace, rules:[ {required:true,message:'请选择是否替换'}] }]" >
                  <a-radio :value="1"> 是 </a-radio>
                  <a-radio :value="0"> 否 </a-radio>
                </a-radio-group>
              </a-form-item>
              <a-form-item label="替换字段" :label-col="{ span: 2 }" :wrapper-col="{ span: 4 }" v-if="initData.replace === 1" >
                <a-button class="selectBtn" @click="()=>replaceFieldVisible = true" :disabled="!targetid">
                  <a-icon type="plus-circle" />选择字段
                </a-button>
                <a-input type="hidden" v-decorator="['replacefield',{initialValue: record.replacefield, rules:[{required: true, message: '请选择替换字段'}]}]" />
              </a-form-item>
            </div>
            <div class="title-bar">触发设置</div>
            <a-form-item label="触发方式" :label-col="{ span: 2 }" :wrapper-col="{ span: 3 }" >
                <a-checkbox @change="onTaskAutoRunChange" v-decorator="['autorun',{initialValue: record.autorun === 1,valuePropName: 'checked'} ]">自动触发</a-checkbox>
            </a-form-item>
            <a-form-item label="触发时间" :label-col="{ span: 2 }" :wrapper-col="{ span: 4 }" v-show="initData.autorun === 1" >
              <a-input v-decorator="['frequency',{initialValue: record.frequency,rules:[{required:true,message:'请填设置发频率'}]}]" />
            </a-form-item>
            <a-form-item label="问题描述" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }" >
              <a-textarea :rows="5" 
                v-decorator="['warntemplate',{initialValue: record.warntemplate,rules:[{required:true, message:'请填写问题描述模板'}]}]" 
                placeholder="运行监测问题列表显示内容（支持参数加文本编辑）"
              ></a-textarea>
              <!-- read-only @click="()=>setWarnTemplateVisible = true" -->
            </a-form-item>
            <a-form-item label="推送方式" :label-col="{ span: 2 }" :wrapper-col="{ span: 10 }" >
              <a-checkbox-group :options="noticetypeList" v-decorator="['noticetype',{initialValue: record.noticetype ? record.noticetype.split(',') : []}]" />
            </a-form-item>
            <a-form-item label="自定义模板" :label-col="{ span: 2 }" :wrapper-col="{ span: 12 }">
              <a-textarea :rows="5" 
                v-decorator="['msgtemplate',{initialValue: record.msgtemplate}]" 
                placeholder="运行监测问题消息通知模板"
              ></a-textarea>
              <!-- read-only @click="()=>setMsgTemplateVisible = true" -->
            </a-form-item>
          </a-form>
        </div>
        <div class="footer">
          <a-button type="primary" @click="handleSubmit">提 交</a-button>
        </div>
      </div>
    </a-spin>
    <!--添加数据集(综合查询)-->
    <a-modal v-model="showQueryModal" 
      class="exper-query-model" @cancel="()=>showQueryModal = false" :footer="null" :destroyOnClose="true" 
      width="90%" :style="{minWidth:'1100px'}" :bodyStyle="{padding:'10px 0 0 0', height: '80vh'}">
      <IntegratedQuery :query="2081" namespace="monitorstrategy" :copySource="false" @save="callBack" />
    </a-modal>
    <!--机构字段选择-->
    <a-modal title="机构字段选择" :destroyOnClose="true" :footer='null' :visible='orgFieldVisible' @cancel='()=>orgFieldVisible=false' :width='800' :bodyStyle="{padding: '0px'}">
      <select-field :multi='false' :targetid="targetid" :defaultSelected="orgSelected" @finish="orgFinishHandle"/>
    </a-modal>
    <!--替换字段选择-->
    <a-modal title="替换字段选择" :destroyOnClose="true" :footer='null' :visible='replaceFieldVisible' @cancel='()=>replaceFieldVisible=false' :width='800' :bodyStyle="{padding: '0px'}">
      <select-field :multi='false' :targetid="targetid" :defaultSelected="replaceSelected" @finish="replaceFinishHandle"/>
    </a-modal>
    <!--问题显示内容设置-->
    <equation-editor v-if="setWarnTemplateVisible" 
      namespace='monitorstrategy'
      v-model="warntemplateDatasets"
      :fnData="initData.warntemplate"
      :selfFields='customqueryFields' 
      @finish="setWarnTemplateFinishHandle">
    </equation-editor>
    <!--消息模板设置-->
    <equation-editor v-if="setMsgTemplateVisible" 
      namespace='monitorstrategy'
      :fnData="initData.msgtemplate"
      @finish="setMsgTemplateFinishHandle">
    </equation-editor>
  </a-layout>
</template>
<script>
import { Layout, Spin, Form, Row, Col, Button, Input, Select, Checkbox, Switch, Icon, Radio, Modal} from "ant-design-vue";
import { getMonitorStrategy, addMonitorStrategy, updateMonitorStrategy,listPresets} from "@/person/api/monitor";
import IntegratedQuery from "@/person/views/integratedquery/query";
import SelectField from '@/person/views/integratedquery/components/SelectField';
import { queryById } from "@/person/api/integratedquery";
import EquationEditor from "@/person/components/EquationEditor";
import { showError } from "@/framework/utils/index";
import { log } from 'util';
export default {
  components: {
    ALayout: Layout,
    ASpin: Spin,
    AForm: Form,
    AFormItem: Form.Item,
    AButton: Button,
    AInput: Input,
    ARow: Row,
    ACol: Col,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATextarea: Input.TextArea,
    ACheckbox: Checkbox,
    ACheckboxGroup: Checkbox.Group,
    ASwitch: Switch,
    AIcon: Icon,
    ARadio: Radio,
    ARadioGroup: Radio.Group,
    AModal: Modal,
    IntegratedQuery,
    SelectField,
    EquationEditor,
  },
  data() {
    let checkobjectList = [
      {text:"人员",value:1},
      {text:"机构",value:2}
    ];
    return {
      spinning: false,
      record: {
        noticetype: "sysmsg",
        autorun: 0,
        replace: 0,
      },

      checkobjectList: checkobjectList ,
      strategytypeList: [],
      checktypeList: [],
      noticetypeList: [],
      presetMap: {},
      presetList:[],

      initData: {
        checkobj: null,
        strategytype: null,
        checktype: null,
        strategyvalue: null,
        replace: null,
        autorun: 0,
        warntemplate: "",
        msgtemplate: "",
        customqueryid: null,
      },

      showQueryModal: false,
      orgFieldVisible: false,
      orgSelected: [],
      replaceFieldVisible: false,
      replaceSelected: [],
      targetid: null,
      warntemplateDatasets:[{"queryid":3,"name":"a","desc":"原数据"}],
      customqueryFields: [],
      setWarnTemplateVisible: false,
      setMsgTemplateVisible: false,
    };
  },
  beforeCreate() {
    this.form = this.$form.createForm(this);
  },
  created(){
    this.dictList();
    let id = this.$route.query.id;
    if(!id){
      this.preSetMap(null,null,false);
    }
    this.getMonitorStrategy(id);
  },
  methods:{
    //获取常量
    dictList(){
      this.strategytypeList = this.$store.getters.dict("person.monitor.strategytype");
      this.checktypeList = this.$store.getters.dict("person.monitor.checktype");
      this.noticetypeList = (this.$store.getters.dict("person.messagechannel") || []).map(item => ({label:item.text, value:item.value}));
    },
    //将预定方案转换成map集合
    preSetMap(checkobj, strategytype, reset){
      this.presetMap = {};
      listPresets({...{},checkobj,strategytype}).then(resp => {
        this.presetList = resp.result;
        resp.result.forEach(item => {
          this.presetMap[item.strategyvalue] = item;
        });
        //重新设置预定义策略数据值
        if(reset){
          if(this.presetMap[this.initData.strategyvalue]){
            this.form.setFieldsValue({"strategyvalue": this.initData.strategyvalue});
          }else{
            this.form.setFieldsValue({"strategyvalue": null});
          }
        }
      })
    },
    //获取表单数据
    getMonitorStrategy(id){
      if(!id){
        return;
      }
      this.record.id = id;
      getMonitorStrategy(id).then(resp => {
        this.record = resp.result;
        this.initData = {...this.record};
        if(this.initData.customqueryid){
          this.getTargetid(this.initData.customqueryid);
        }
        this.orgSelected = this.initData.orgfield ? JSON.parse(this.initData.orgfield) : [];
        this.replaceSelected = this.initData.replacefield ? JSON.parse(this.initData.replacefield) : [];
        this.preSetMap(this.initData.checkobj, this.initData.strategytype, false);
      });
    },
    //提交表单
    handleSubmit(){
      this.form.validateFields((err, values) => {
        if (!err) {
          this.spinning = true;
          this.record = {...this.record,...values};
          this.record.runstatus = this.record.runstatus ? 1 : 0;
          this.record.autorun = this.record.autorun ? 1 : 0;
          this.record.frequency = this.record.autorun ? this.record.frequency : '';
          this.record.noticetype = this.record.noticetype.toString();

          if(this.record.id){
            values.id = this.record.id;
            updateMonitorStrategy(this.record).then(resp => {
              this.spinning = false;
              this.$notification.success({
                message: "提示",
                description: "修改成功!",
                duration: 3
              });
            }).catch(err => {
              this.spinning = false;
              showError(err);
            })
          }else{
            addMonitorStrategy(values).then(resp => {
              this.spinning = false;
              this.record.id = resp.result;
              this.$notification.success({
                message: "提示",
                description: "添加成功!",
                duration: 3
              });
            }).catch(err => {
              this.spinning = false; 
              showError(err); 
            })
          }
        }
      });
    },
    //校验对象变更
    checkobjChange(value){
      this.initData.checkobj = value;
      this.preSetMap(this.initData.checkobj, this.initData.strategytype, true);
    },
    //策略类型变更
    strategytypeChange(value){
      this.initData.strategytype = value;
      this.preSetMap(this.initData.checkobj, this.initData.strategytype, true);
    },
    //校验方式变更修改
    onChecktypeChange(value){
      this.initData.checktype = value;
    },
    //选择的策略变更修改
    strategyValueChange(value){
      if(value === this.record.strategyvalue){
        this.form.resetFields(['checkobj','strategytype','warntemplate']);
      }else{
        let {checkobj, strategytype, warntemplate} = this.presetMap[value];
        this.form.setFieldsValue({...{},checkobj,strategytype,warntemplate});
      }
      this.initData.strategyvalue = value;
    },
    //是否替换单选框选项变更的时候
    onReplaceChange(e){
      this.initData.replace = e.target.value;
    },
    //是否自动运行变更的时候
    onTaskAutoRunChange(e){
      if(e.target.checked){
        this.initData.autorun = 1;
        this.form.validateFields(['frequency'], { force: true });
      }else{
        this.initData.autorun = 0;
      }
    },
    callBack(query) {
      this.initData.customqueryid = query.id
      this.targetid = query.target.id;
      this.customqueryFields = query.fields;
      this.form.setFieldsValue({'customqueryid': query.id});
      this.showQueryModal = false;
    },
    orgFinishHandle(type,data){
      if(type == 'ok'){
        console.log(data);
        this.orgSelected = [];
        this.orgSelected.push(data);
      }
      this.orgFieldVisible = false;
      this.form.setFieldsValue({'orgfield': JSON.stringify(this.orgSelected)});
    },
    replaceFinishHandle(type,data){
      if(type == 'ok'){
        this.replaceSelected = [];
        this.replaceSelected.push(data);
      }
      this.replaceFieldVisible = false;
      this.form.setFieldsValue({'replacefield': JSON.stringify(this.replaceSelected)});
    },
    getTargetid(queryid){
      queryById(queryid).then(res => {
        this.customqueryFields = res.result.fields;
        this.targetid = res.result.target.id;
      }).catch(err => {
        showError(err);
      })
    },
    setWarnTemplateFinishHandle(type, expression){
      if(type == 'ok'){
        this.initData.warntemplate = expression;
        this.form.setFieldsValue({'warntemplate': expression});
      }
      this.setWarnTemplateVisible = false;
    },
    setMsgTemplateFinishHandle(type, expression){
      if(type == 'ok'){
        this.initData.msgtemplate = expression;
        this.form.setFieldsValue({'msgtemplate': expression});
      }
      this.setMsgTemplateVisible = false;
    }
  }
};
</script>
<style lang="less" scoped>
.monitorstrategyinfo{
  height: 100%;
  padding: @layout-space-base;
  .form-submit-spin{
    height: 100%;
    /deep/.ant-spin-container{
      height: 100%;
    }  
  }
  .monitorstrategy-form{
    height: 100%;
    display: flex;
    flex-direction: column;
    background-color: @white;
    border-radius: @border-radius-base;
    padding: 10px 0;
    > .body{
      flex-shrink: 10;
      -webkit-flex-shrink: 10;
      min-height: 0;
      overflow: auto;
      .form{
        padding: 0 10px;
        .title-bar {
          margin: 10px 0;
          line-height: 1em;
          border-left: 5px solid @primary-color;
          font-size: 18px;
          text-indent: 5px;
          color: @primary-color;
        }
        .selectBtn{
          border: @primary-color dashed 1px;
          width: 100%;
          .anticon{
            color: @primary-color;
          }
        }
      }
    }
    .footer{
      padding: @padding-sm @padding-lg;
      text-align: center;
      margin-top: 10px;
      button:first-child{
        margin-right: 20px;
      }
    }
  }
}
</style>