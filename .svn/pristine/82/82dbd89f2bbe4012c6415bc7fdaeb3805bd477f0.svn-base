import notification from 'ant-design-vue/es/notification'
import 'ant-design-vue/lib/notification/style'

// 接口统一错误提示
export function showError (error) {
  if (typeof error.code === 'number') {
    // 生成环境 http状态错误不提示
    return
  }
  notification.error({
    message: '提示',
    description: error.message || '未知错误' + (error.code || ''),
    duration: 2
  })
}

/**
 * 移除字符串指定开头的字符
 * @param {String} str 字符串
 * @param {String} start 需移除的字符
 */
export function removeStart (str, start) {
  if (str && start) {
    if (str.startsWith(start)) {
      str = str.substr(start.length)
    }
  }
  return str
}

/**
 * 日期格式
 * @param {Date} date 日期
 * @param {String} fmt 格式 yyyy-MM-dd hh:mm:ss
 */
export function dateFormat (date, fmt) {
  var o = {
    'M+': date.getMonth() + 1,
    'd+': date.getDate(),
    'h+': date.getHours(),
    'm+': date.getMinutes(),
    's+': date.getSeconds(),
    'q+': Math.floor((date.getMonth() + 3) / 3),
    S: date.getMilliseconds()
  }
  if (/(y+)/.test(fmt)) {
    fmt = fmt.replace(
      RegExp.$1,
      (date.getFullYear() + '').substr(4 - RegExp.$1.length)
    )
  }
  for (var k in o) {
    if (new RegExp('(' + k + ')').test(fmt)) {
      fmt = fmt.replace(
        RegExp.$1,
        RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)
      )
    }
  }
  return fmt
}

// 异步加载js
export function asyncLoadJs (url) {
  return new Promise((resolve, reject) => {
    let hasLoaded = document.getElementById('idmjsLink')
    if (hasLoaded) {
      resolve()
      return
    }
    let script = document.createElement('script')
    script.type = 'text/javascript'
    script.src = url
    script.id = 'idmjsLink'
    document.body.appendChild(script)
    script.onload = () => {
      resolve()
    }
    script.onerror = () => {
      reject()
    }
  })
}

// 身份证格式校验
export function checkIdcard (idcode) {
  var weight_factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
  var check_code = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']
  var code = idcode + ''
  var last = idcode[17]
  var seventeen = code.substring(0, 17)
  var arr = seventeen.split('')
  var len = arr.length
  var num = 0
  for (var i = 0; i < len; i++) {
    num = num + arr[i] * weight_factor[i]
  }
  var resisue = num % 11
  var last_no = check_code[resisue]
  var idcard_patter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/
  var format = idcard_patter.test(idcode)
  return !!(last === last_no && format)
}

// 手机号格式校验
export function validatePhoneNumber (str) {
  const reg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/
  return reg.test(str)
}

// 邮箱格式校验
export function validateEmail (str) {
  const reg = /^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/
  return reg.test(str)
}

// 函数防抖
export function debounce (fn, delay) {
  var timer = null
  var delay = delay || 200
  return function () {
    var args = arguments
    var that = this
    clearTimeout(timer)
    timer = setTimeout(function () {
      fn.apply(that, args)
    }, delay)
  }
}

// 生成指定长度的字符串
export function randomStr (n) {
  var chars = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
    'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z' ]
  var res = ''
  for (var i = 0; i < n; i++) {
    var id = Math.ceil(Math.random() * 25)
    res += chars[id]
  }
  return res
}

// 生成uuid
export function guid () {
  function S4 () {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)
  }
  return S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4()
}

// 数组转对象 [{key:'name',value:'张三'}]=> {name:'张三'}
export function objFromArr (arr = []) {
  let obj = {}
  for (let i = 0; i < arr.length; i++) {
    let item = arr[i]
    obj[item.key] = item.value
  }
  return obj
}
