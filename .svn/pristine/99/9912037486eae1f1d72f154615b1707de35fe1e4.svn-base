<template>
  <div class="body">
    <div class="tools">
      <a-select v-model="stateselect" allowClear :style="{width:'200px'}" @change="getList"  placeholder="选择服务状态">
        <a-select-option :value="item.value" v-for="(item, index) in stateList" :key="index">{{item.name}}</a-select-option>
      </a-select>
      <a-input v-model="namelike" allowClear :style="{width:'200px'}" placeholder="请输入服务名称" @pressEnter="getList"/>
      <a-button type="primary" @click="getList">搜索</a-button>
      <a-button type="primary" @click="resetsearch">重置</a-button>
    </div>
      <div v-if="hasPermit('/dev/manage/service') && serviceListData.length > 0">
        <ul class="serve">
          <li v-for="item in serviceListDataFilter" :key="item.id">
            <div>
              <h2>{{ item.name }}</h2>
              <p>
                {{ item.desc }}
                <span @click="serviceDetail(item.id)">详情</span>
              </p>
            </div>
            <div>
              <p v-if="hasPermit('/dev/manage/service/modify')">
                <span :style="colors(item.state)">{{ serviceState(item.state) }}</span>
                <span v-if="inUse" @click="servicePort(item)">查看</span>
              </p>
            </div>
          </li>
        </ul>
      </div>
      <!-- <div v-else-if="hasPermit('AuditServiceList') && verifyList.length > 0">
        <div class="radio-check">
          <a-radio-group v-model="verifyState" @change="onChange">
            <a-radio :value="1">待审核</a-radio>
            <a-radio :value="2">已审核</a-radio>
          </a-radio-group>
        </div>
        <ul
          class="serve"
          v-infinite-scroll="loadMore"
          infinite-scroll-disabled="busy"
          infinite-scroll-distance="10"
        >
          <li v-for="item in verifyListFilter" :key="item.id">
            <div>
              <h5>{{ item.name }}</h5>
              <p>
                {{ item.desc }}
                <span @click="serviceDetail(item.id)">详情</span>
              </p>
            </div>
            <div>
              <p v-if="hasPermit('AuditServiceList')">
                <span :style="colors(item.state)">{{ verifyServiceState(item.state) }}</span>
                <span @click="servicePort(item)">查看</span>
              </p>
            </div>
          </li>
        </ul>
      </div> -->
    <a-empty v-if="!spinning && serviceListData.length <= 0 && verifyList.length <= 0"></a-empty>
    <a-modal title="服务详情" v-model="serviceVisible" :footer="null" :bodyStyle="{ height: '500px', padding: '24px' }">
      <p>
        <span>服务名称:</span>
        {{ serviceDetails.name }}
      </p>
      <p>
        <span>服务编码:</span>
        {{ serviceDetails.code }}
      </p>
      <p>
        <span>服务描述:</span>
        {{ serviceDetails.desc }}
      </p>
      <p>
        <span>服务来源:</span>
        {{ serviceDetails.from == 0 ? "平台" : "第三方" }}
      </p>
      <p>
        <span>服务地址:</span>
        {{ serviceDetails.url }}
      </p>
    </a-modal>
  </div>
</template>
<script>
import {Modal,Empty,Spin,Radio,Select,Input,Button} from "ant-design-vue";
import cloneDeep from "lodash/cloneDeep";
import {serviceList,serviceDetail} from "../../api/service";
import { showError } from "@/framework/utils";
export default {
  data() {
    return {
      // 开发服务列表
      serviceListData: [],
      pagenum: 1,
      pagesize: 10,
      serviceVisible: false,
      // 服务详情
      serviceDetails: {},
      busy: false,
      // 审核服务列表
      verifyList: [],
      total: "",
      spinning: true,
      verifyState: 1,
      stateselect: undefined,
      namelike: "",
      stateList:[
        {name:'未开通',value:0},
        {name:'已开通',value:2},
        {name:'审核中',value:1},
        {name:'审核未通过',value:4}
      ]
    };
  },
  created() {
    this.getList();
  },
  components: {
    AModal: Modal,
    AEmpty: Empty,
    ASpin: Spin,
    ASelect: Select,
    ASelectOption: Select.Option,
    AInput: Input,
    AButton: Button
  },
  computed: {
    serviceListDataFilter() {
      //  审核员
      if (this.hasPermit("AuditServiceList")) {
        if (this.verifyState == 1) {
          let data = this.serviceListData.filter(function(item) {
            return item.state == 1;
          });
          return data;
        } else {
          return this.serviceListData.filter(function(item) {
            return item.state != 1;
          });
        }
      } else {
        return this.serviceListData;
      }
    },
    verifyListFilter() {
      if (this.hasPermit("AuditServiceList")) {
        if (this.verifyState == 1) {
          return this.verifyList.filter(function(item) {
            return item.state == 1;
          });
        } else {
          return this.verifyList.filter(function(item) {
            return item.state != 1;
          });
        }
      } else {
        return this.verifyList;
      }
    },
    //判断应用状态是否为可编辑状态
    inUse(){
      let state = this.$store.getters.appInfo.state;
      return !(state === 1 || state === 2);
    }
  },
  methods: {
    colors(state) {
      switch (state) {
        case 0:
          return "color:#999";
        case 1:
          return "color:#faad14";
        case 2:
          return "color:#0dbc79";
        case 3:
          return "color:#0dbc79";
        case 4:
          return "color:#f5222d";
        default:
          return;
      }
    },
    loadMore() {
      this.busy = true;
      if (this.pagenum * this.pagesize < this.total) {
        this.pagenum++;
        this.getList();
      } else {
        this.busy = false;
      }
    },
    // 服务详情
    serviceDetail(id) {
      serviceDetail(id)
        .then(res => {
          this.serviceDetails = res.result;
          this.serviceVisible = true;
        })
        .catch(err => {
          showError(err);
        });
    },
    // 服务状态
    serviceState(state) {
      switch (state) {
        case 0:
          return "未开通";
        case 1:
          return "待审核";
        case 2:
          return "已开通";
        case 3:
          return "待下线";
        case 4:
          return "审核未通过";
        default:
          return "";
      }
    },
    verifyServiceState(state) {
      switch (state) {
        case 1:
          return "待审核";
        default:
          return "已审核";
      }
    },
    // 接口列表查看
    servicePort(item) {
      let pathstr = "";
      if (item.state == 0) {
        pathstr = "/dev/manage/service/apply";
      } else {
        pathstr = "/dev/manage/service/accessInfo";
      }
      this.$router.push({
        path: pathstr,
        query: {
          code: item.code,
          state: item.state,
          serviceId: item.id,
          url: item.url
        }
      });
    },
    // 组织服务
    serviceOrg() {
      this.$router.push("/dev/serviceOrg");
    },
    // 用户服务
    userService() {
      this.$router.push("/dev/userService");
    },
    // 获取服务列表
    getList() {
      if (this.hasPermit("/dev/manage/service")) {
        let data = {
          appid: this.$store.state.appinfo.appInfo.id,
          state: this.stateselect,
          name: this.namelike
        };
        // 开发者角色
        serviceList(data)
          .then(res => {
            this.serviceListData = res.result;
            this.spinning = false;
            this.busy = false;
          })
          .catch(err => {
            showError(err);
            this.busy = false;
          });
      }
      //  else if (this.hasPermit("AuditServiceList")) {
      //   // 审核员角色
      //   verifyServiceList(this.$store.state.appinfo.appInfo.id)
      //     .then(res => {
      //       this.verifyList = Array.from(
      //         new Set([...this.verifyList, ...res.result])
      //       );
      //       this.spinning = false;
      //       this.busy = false;
      //     })
      //     .catch(err => {
      //       showError(err);
      //       this.busy = false;
      //     });
      // }
    },
    //重置
    resetsearch() {
      this.stateselect = "";
      this.namelike = "";
      this.getList();
    }
  }
};
</script>
<style lang="less" scoped>
  .body{
    height: 100%;
    overflow-y: auto;
    .tools {
      display: flex;
      justify-content: flex-end;
      padding: @content-padding-v 0px 0px;
      .ant-input-affix-wrapper,Button{
        margin-left: @layout-space-base;
      }
    }
    .serve {
      padding: 0;
      overflow-y: auto;
      margin: 0 auto;
      li {
        list-style: none;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 50px 0 30px;
        border-bottom: 1px solid #f0f0f0;
        &:nth-of-type(2n) {
          background: #f9f9f9;
        }
        .fail {
          color: #f5222d;
        }
      }
      span {
        color: rgba(0, 0, 0, 0.65);
        font-weight: normal;
        margin-left: 20px;
      }
      p {
        margin-top: 10px;
        span {
          color: @primary-color;
          cursor: pointer;
        }
      }
      h5 {
        color: #171717;
        font-weight: bold;
      }
    }
  }
</style>
