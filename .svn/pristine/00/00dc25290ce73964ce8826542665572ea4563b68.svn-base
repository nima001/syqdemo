<template>
  <div class="content">
    <div class="header">
    <div class="left"></div>
    <ul class="right">
      <li>
        <dict-select v-model="search.category" 
          dict="person.work.taskcategory" allowClear
          placeholder="所有分类" style="width: 105px"/>
      </li>
      <li>
        <a-select v-model="search.statusIn" @change="changeStatus" placeholder="所有状态" style="width: 105px">
          <a-select-option v-for="item in statusList" :key="item.value">{{item.label}}</a-select-option>
        </a-select>
      </li>
      <li>
        <a-range-picker v-model="search.deadtime"
          :placeholder="['开始时间', '截止时间']"
          style="width: 240px"
        /> 
      </li>
      <li>
        <a-range-picker v-model="search.createtime"
          :placeholder="['发布开始时间', '发布结束时间']"
          style="width: 240px"
        /> 
      </li>
      <li>
        <UserSelect :search.sync="search" :title="'请选择发布人'" :name="'createusername'" :value="'createuser'" @changesearch="changesearch"/>
      </li>
      <li>
        <a-input v-model="search.searchkey" allowClear placeholder="输入关键词查询"/>
      </li>
        <li><a-button type="primary" @click="onSearch()">搜索</a-button></li>
        <li><a-button @click="resetSeach()">重置</a-button></li>
    </ul>
    </div>
    <div class="body">
    <a-table
        rowKey="id"
        :columns="columns"
        :dataSource="page.rows"
        :pagination="false"
        :loading="loading"
        @change="sorterChange"
    >
        <div slot="index" slot-scope="text,record,index" class="index">
        <span class="toped" v-if="!record.readed"><img style="height: 10px;" src="../../../assets/img/icon-bussiness-new-message.png"/></span>
        <span>{{ (page.pagenum - 1) * page.pagesize + index + 1 }}</span>
        </div>
        <div slot="customtitle" slot-scope="text,record" class="title">
        <span :title="text">{{text}}</span>
        <span class="assist" v-if="record.isassist">协办</span>
        </div>
        <div slot="endtime" slot-scope="text,record">
        <span>{{text && text.substr(0, 10)}}</span>
        <span v-if="record.timelimit == 2" class="will expire">临</span>
        <span v-else-if="record.timelimit == 3" class="expire">超</span>
        </div>
        <div slot="opts" slot-scope="record">
        <a @click="showDetails(record)">查看</a>
        </div>
    </a-table>
    </div>
    <div class="footer">
    <a-pagination 
        v-if="page.rows && page.rows.length"
        :current="page.pagenum"
        :total="page.total"
        :pageSize="page.pagesize"
        showSizeChanger
        :showTotal="total => `总共：${total}条`"
        @change="onPageChange"
        @showSizeChange="onShowSizeChange"
    />
    </div>
    <DetailModal :showModal.sync="showModal" :recordData.sync="record"/>
  </div>
</template>
<script>
import { Modal, Icon, Table, Pagination, Select, DatePicker, Input, Button } from 'ant-design-vue'
import DictSelect from '@framework/components/DictSelect'
import UserSelect from './UserSelect';
import DetailModal from './DetailModal'
import { cloneDeep, uniq, has } from 'lodash'
import { showError } from '@/framework/utils'
import { queryWorkTask, worktaskdetails } from '@/person-shaoxing/api/workTask'


/**
 * 我的任务
 */
export default {
  props: {
    tasktypeList: {
      type: Array,
      default:()=> {
        return []
      }
    },
    tasktype: {
      type: Number
    }
  },
  components: {
    AModal: Modal,
    AIcon: Icon,
    ATable: Table,
    APagination: Pagination,
    ASelect: Select,
    ASelectOption: Select.Option,
    ARangePicker: DatePicker.RangePicker,
    AInput: Input,
    AButton: Button,
    DictSelect,
    UserSelect,
    DetailModal
  },
  data(){
    return {
      statusList: [
        { value: 1, label: '进行中'},
        { value: 2, label: '已完成'},
        { value: 3, label: '已撤销'},
      ],
      showModal: false,
      record: {},
      columns: [
        { title: '序号', width: 50, scopedSlots: { 
          customRender: "index" 
        }},
        { title: '标题', dataIndex: 'title', scopedSlots: {
          customRender: "customtitle" 
        }},
        { title: '分类', dataIndex: 'category', customRender: this.dictRender("person.work.taskcategory")},
        { title: '发布人', dataIndex: 'createusername'},
        { title: '协办处室', dataIndex: 'asistorgnames', customRender: this.asistorgRender()},
        { title: '协办人', dataIndex: 'asistusernames'},
        { title: '截止时间', dataIndex: 'deadtime',
          defaultSortOrder: 'ascend', SortOrder: 'ascend', sortDirections: ['descend', 'ascend'], sorter: true, scopedSlots: { 
            customRender: "endtime" 
          },
        },
        { title: '发布时间', dataIndex: 'createtime', 
          sortDirections: ['descend', 'ascend'], sorter: true, customRender: (text) => {
            return text && text.substr(0, 10)
          }
        },
        { title: '状态', dataIndex: 'status', customRender: (text) => {
          let s = this.statusList.find(item => item.value == text);
          return s && s.label;
        }},
        { title: '操作', scopedSlots: { 
          customRender: "opts" 
        }},
      ],
      loading: true,
      search: {
        orders: [{orderby: 'deadtime', ordertype: 'ASC'}],
        tasktype: undefined,
        category: undefined,
        statusIn: [1],
        createtime: undefined,
        deadtime: undefined,
        createuser: undefined,
        createusername: undefined,
        searchkey: undefined,//模糊匹配
      },
      page: {
        rows: [],
        pagesize: 20,
        pagenum: 1,
        total: 0,
      },
      showSelectUser: false,
    }
  },
  watch: {
    tasktypeList: {
      immediate: true,
      handler(list){
        if(list && list.length && !this.search.tasktype){//任务类型常量加载到后才加载数据
          this.search.tasktype = list[0].value;
          this.loadData(1, this.page.pagesize);
        }
      }
    },
    tasktype(val) {
      this.onTypeChange(val);
    },
    search: {
      deep: true,
      handler(val) {
        return val;
      }
    },
  },
  created(){
    //Empty
  },
  methods: {
    sorterChange(pagination, filters, sorter) {
      if(has(sorter,'order')) {
        this.search.orders = [{orderby: sorter.field, ordertype: sorter.order==='ascend'?'ASC':'DESC'}];
      }else {
        this.search.orders = undefined;
      }
      this.loadData(this.page.pagenum, this.page.pagesize);
    },
    changesearch(name,value,id,username) {
      this.$set(this.search,name,username);
      this.$set(this.search,value,id);
    },
    changeStatus(val) {
      this.search.statusIn = [val];
    },
    onTypeChange(type){
      this.search.tasktype = type;
      this.resetSeach();
    },
    onPageChange(pagenum, pagesize) {
      this.loadData(pagenum, pagesize);
    },
    onShowSizeChange(current, pagesize) {
      this.loadData(1, pagesize);
    },
    onSearch() {
      this.loadData(1, this.page.pagesize);
    },
    resetSeach(){
      Object.keys(this.search).forEach((key) => {
        if(key != 'tasktype' && key!= 'statusIn') this.search[key] = undefined;
      });
      this.loadData(1, this.page.pagesize);
    },
    dictRender(key) {
      return (text, row, index) => {
        let v = this.$store.getters.dictKey(key, text);
        text = (v && v.text) || "";
        return <span title={text}>{text}</span>;
      };
    },
    asistorgRender() {
      return (text, row, index) => {
        if(text) {
          let newText = text.split(',');
          let uniqText = uniq(newText);
          return <span>{uniqText.join(',')}</span>;
        }else{
          return <span>{""}</span>;
        }
      }
    },
    showDetails(item){
      this.loading = true;
      this.record = {};
      this.record.id = item.id;
      this.record.tabtype = 1;
       worktaskdetails(this.record).then(({result})=>{
        this.loading = false;
        this.record = cloneDeep(result);
        this.record.id = item.id;
        this.record.tabtype = 1;
        this.showModal = true;
      }).catch((err)=>{
        this.loading = false;
        this.record = {};
        showError(err);
      })
    },
    loadData(pagenum, pagesize){
      if(!this.search.tasktype){
        //任务类型未设置时，不查询数据
        return;
      }
      this.loading = true
      let params = Object.assign({
        pagenum, pagesize, 
        needtotal: true,
      }, this.search);
      if(params.createtime){
        let [start, end] = params.createtime;
        params.createtimestart = start;
        params.createtimeend = end;
        params.createtime = undefined;
      }
      if(params.deadtime){
        let [start, end] = params.deadtime;
        params.deadtimestart = start;
        params.deadtimeend = end;
        params.deadtime = undefined;
      }
      queryWorkTask(params).then(({result}) => {
        this.page = result;
      }).catch(error => {
        showError(error);
      }).finally(() => {
        this.loading = false;
      })
    }
  }
}
</script>
<style lang="less" scoped>
.content{
  width: 100%;
  display: flex;
  flex-direction: column;
  padding: 10px 0;
  .header{
    padding: @content-padding-v @content-padding-h;
    overflow: hidden;
    & > .left{
      float: left;
      margin-bottom: 8px;
    }
    & > .right{
      float: right;
      margin-bottom: 8px;
    }
    li{
      display: inline-block;
      margin-left: 5px;
    }
    .clear-user{
      color: @disabled-color;
      font-size: 0.9em;
    }
  }
  .body{
    padding: 0 @content-padding-h;
    flex: 0 1 auto;
    overflow-y: auto;
    /deep/.ant-table  {
      .ant-table-thead{
        tr th.ant-table-row-cell-break-word:first-child {
          text-align: center;
        }
      }
      tr {
        th:first-child {
          text-align: center;
        }
        td {
          & .title span.assist{
            font-size: 0.9em;
            padding: 0 2px;
            color: @primary-color;
            border: 1px solid @primary-color;
            border-radius: @border-radius-base;
            margin-left: 4px;
          }
          &:not(:nth-child(2)) .title{
            display: flex;
            span:first-child {
              display: inline-block;
              max-width: 100px;
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
            }
            
          }
        }
        td:first-child {
          .index {
            display: flex;
            justify-content: space-between
          }
        }
        td:last-child {
          white-space: nowrap;
        }
        td:nth-child(2) {
          max-width: 100px;
          .title {
            display: flex;
            white-space: nowrap;
            overflow: hidden;
            span:first-child {
              overflow: hidden;
              text-overflow: ellipsis;
              display: inline-block;
            }
          }
        }
      }
      .expire{
        display: inline-block;
        width: 1.4em;
        margin-left: 4px;
        border: 1px solid @accent-color;
        border-radius: @border-radius-base;
        line-height: 1.4em;
        font-size: 0.8em;
        text-align: center;
        color: @accent-color;
        &:not(.will){
          border-color: @error-color;
          color: @error-color;
        }
      }
    }
  }
  .footer{
    padding: @content-padding-v @content-padding-h;
    .ant-pagination{
      float: right;
    }
  }
}
</style>