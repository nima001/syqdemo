<template>
  <div class="wrap" :id="id">
    <a-spin :spinning="loading"></a-spin>
  </div>
</template>
<script>
import { Scene, PointLayer } from "@antv/l7";
import { CityLayer } from "@antv/l7-district";
import { GaodeMap } from "@antv/l7-maps";
import { orgCountReport } from "@/person-shaoxing/api/orgStaffReport";
import { showError } from "@framework/utils";
import { Spin } from "ant-design-vue";
export default {
  data() {
    return {
      id: Math.random().toString(32).substr(2),
      adcode: [
        { code: "330602", NAME_CHN: "越城区" },
        { code: "330603", NAME_CHN: "柯桥区" },
        { code: "330604", NAME_CHN: "上虞区" },
        { code: "330624", NAME_CHN: "新昌县" },
        { code: "330681", NAME_CHN: "诸暨市" },
        { code: "330683", NAME_CHN: "嵊州市" }
      ],
      key: [
        "_id@organization.statistic.dzhgzl_xe",
        "_id@organization.statistic.dzjgzl_sy",
        "_id@organization.statistic.xzjjjg_xe",
        "_id@organization.statistic.xzjjjg_sy",
        "_id@organization.statistic.syjjjg_xe",
        "_id@organization.statistic.syjjjg_sy"
      ],
      loading: true
    };
  },
  components: {
    ASpin: Spin
  },
  mounted() {
    orgCountReport()
      .then(res => {
        this.createData(res.result, () => {
          this.draw();
        });
      })
      .catch(err => {
        showError(err);
      })
      .finally(() => {
        this.loading = false;
      });
  },
  methods: {
    createData(dataTable, fn) {
      let { header, rows } = dataTable;
      let valueCols = header.filter(item => {
        return this.key.includes(item.key);
      });
      let list = (rows || []).map(item => {
        let obj = {};
        for (let i = 0; i < valueCols.length; i++) {
          let cur = valueCols[i];
          obj[cur.key] = item[cur["column"]] || 0;
          obj.name = item.name;
        }
        return obj;
      });
      for (let i = 0; i < this.adcode.length; i++) {
        let adcodeItem = this.adcode[i];
        for (let j = 0; j < list.length; j++) {
          let listItem = list[j];
          if (adcodeItem.NAME_CHN == listItem.name) {
            adcodeItem.dz_limit =
              listItem["_id@organization.statistic.dzhgzl_xe"];
            adcodeItem.dz_real =
              listItem["_id@organization.statistic.dzjgzl_sy"];
            adcodeItem.xz_limit =
              listItem["_id@organization.statistic.xzjjjg_xe"];
            adcodeItem.xz_real =
              listItem["_id@organization.statistic.xzjjjg_sy"];
            adcodeItem.sy_limit =
              listItem["_id@organization.statistic.syjjjg_xe"];
            adcodeItem.sy_real =
              listItem["_id@organization.statistic.syjjjg_sy"];
          }
        }
      }
      fn();
    },
    draw() {
      const scene = new Scene({
        id: this.id,
        logoVisible: false,
        map: new GaodeMap({
          pitch: 0,
          style: "blank",
          center: [120.582633, 29.988245],
          zoomEnable:false
        })
      });
      //scene 初始化完成事件,地图加载完成触发,scene 初始化完成添加 Layer
      scene.on("loaded", () => {
        this.drawCity(scene);
        this.drawPoint(scene);
      });
    },
    // 画地图
    drawCity(scene) {
      let cityLayer = new CityLayer(scene, {
        autoFit: true,
        data: this.adcode,
        joinBy: ["adcode", "code"],
        adcode: ["330000", "330600"],
        depth: 3,
        // 分界线颜色
        stroke: "#f6d2b7",
        label: {
          field: "NAME_CHN",
          textAllowOverlap: false,
          color: "#333",
          size: 14
        },
        fill: {
          color: "#f9e9cb",
          activeColor: "#de3234"
        },
        popup: {
          enable: true,
          Html: props => {
            return `<ul>
                      <li><h2>${props.NAME_CHN}</h2></li>
                      <li style='font-size:14px;'>党政机构：限额&nbsp;<span style="color:#d15456">${props.dz_limit}</span>，实有&nbsp;<span style="color:#5488d1">${props.dz_real}</span></li>
                      <li style='font-size:14px;'>局级行政机构：限额&nbsp;<span style="color:#d15456">${props.xz_limit}</span>，实有&nbsp;<span style="color:#5488d1">${props.xz_real}</span></li>
                       <li style='font-size:14px;'>局级事业机构：限额&nbsp;<span style="color:#d15456">${props.sy_limit}</span>，实有&nbsp;<span style="color:#5488d1">${props.sy_real}</span></li>
                      </ul>`;
          }
        }
      });
    },
    // 画点
    drawPoint(scene) {
      const pointLayer = new PointLayer({
        zIndex: 999999,
        autoFit: true
      })
        .source(
          [
            {
              name: "越城区",
              longitude: 120.582633,
              latitude: 29.988245,
              unit_price: 71469.4
            }
          ],
          {
            parser: {
              type: "json",
              x: "longitude",
              y: "latitude"
            }
          }
        )
        .shape("name", ["hexagram"])
        .size("unit_price", [10, 25])
        .color("name", ["#de3234"])
        .style({
          opacity: 1,
          strokeWidth: 2
        });
      scene.addLayer(pointLayer);
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 100%;
  overflow: hidden;
  .ant-spin {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}
</style>