<template>
  <div class="container">
    <a-input-group compact>
      <a-select v-model="input.type" :showArrow="false">
        <a-select-option value="">值</a-select-option>
        <a-select-option value="$"><custom-icon type="fx"/></a-select-option>
        <a-select-option value="#"><custom-icon color="#f39c2b" type="fx"/></a-select-option>
      </a-select>
      <a-input :value="showValue"
        read-only
        @click="showSelect"
        :placeholder="input.type ? '' : '(空)'"
      />
    </a-input-group>
    <a-modal
      :title="`选择${defaultData.field.name}`"
      v-model="selectVisible"
      :footer="null"
      :width="500"
      :bodyStyle="{ height: '600px', padding: '0'}"
    >
      <org-user-select :mode="mode" :showDept="true" @finish="finishSelected" />
    </a-modal>
    <equation-editor v-if="experVisible" :selfFields='contextFields' :fnData="input.value" namespace="query" @finish="onFinish"/>
  </div>
</template>
<script>
import { Select, Input, Modal } from "ant-design-vue";
import CustomIcon from "@/framework/components/CustomIcon";
import OrgUserSelect from "@/person/components/OrgUserSelect";

//引用数据
export default {
  name: "ReferValue",
  components: {
    AInput: Input,
    AInputGroup: Input.Group,
    ASelect: Select,
    ASelectOption: Select.Option,
    CustomIcon,
    AModal: Modal,
    OrgUserSelect,
    EquationEditor:() => import('@person/components/EquationEditor/index')
  },
  props: {
    position: {
      type: String,
      required: true
    },
    defaultData: {
      required: true
    }
  },
  data() {
    return {
      selectVisible: false,
      experVisible: false,
      input: this.initInput(this.defaultData.value),
      oldValue: undefined,
    };
  },
  inject:['contextFields'],
  computed: {
    mode() {
      let { datasource, key } = this.defaultData.field;
      //FIXME sunwen 后续支持所有引用类型选择
      let deptArr = ['dept','workdept','admin@user.dept','admin@user.workdept'];
      return datasource == "user" ? "user" : deptArr.includes(key) ? "dept" : "org";
    },
    showValue(){
      let {type, value} = this.input;
      if(type){
        return value && (type + '{' + value + '}');
      }else if(this.mode == 'user'){
        return value && value.username || value;
      }else{
        return value && value.name || value;
      }
    },
    value(){
      let {type, value} = this.input;
      if(type && value){
        return type + '{' + value + '}';
      }else{
        return value;
      }
    }
  },
  watch: {
    'input.type'(vt, ovt){
      if(!ovt != !vt){
        let v = this.oldValue;
        this.oldValue = this.input.value;
        this.input.value = v;
      }
    },
    value(value){
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    }
  },
  methods: {
    initInput(v){
      if(typeof(v) == 'string'){
        if(v.startsWith('${') && v.endsWith('}')){
          return { type: '$', value: v.substring(2, v.length-1) };
        }else if(v.startsWith('#{') && v.endsWith('}')){
          return { type: '#', value: v.substring(2, v.length-1) };
        }
      }
      return { type: '', value: v};
    },
    showSelect(){
      if(this.input.type){
        this.experVisible = true;
      }else{
        this.selectVisible = true;
      }
    },
    finishSelected(type, list) {
      this.selectVisible = false;
      if(type == 'ok' && list.length){
        if(this.mode == 'user'){
          this.input.value = { _id: list[0]._id, username: list[0].username };
        }else{
          this.input.value = { _id: list[0]._id, name: list[0].name };
        }
      }
    },
    onFinish(type, data) {
      this.experVisible = false;
      if (type == "ok") {
        this.input.value = data;
      }
    }
  }
};
</script>
<style lang="less" scoped>
.container {
  width: 300px;
  .ant-input-group-compact{
    display: flex;
  }
}
</style>