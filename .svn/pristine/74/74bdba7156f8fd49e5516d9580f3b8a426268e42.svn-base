<template>
  <div class="cell">
    <div class="cell-top">
      <p class="title">数据</p>
    </div>
    <ul>
      <template v-if="outerFields.length != 0">
        <li class="selfField" v-for="(item,index) in outerFields" :key="`${index}${item.name}`" @click.stop="editorParams(item,2)">
          <div class="unite">
            <div class="left">
              <a-tooltip placement="topLeft">
                <template slot="title">
                  <span>{{item.name}}</span>
                </template>
                <span>{{`${item.desc}（${item.name}）`}}</span>
              </a-tooltip>
            </div>
          </div>
        </li>
        <li class="divider"></li>
      </template>
      <li class="fields" v-for="(item,index) in filterDatasList" :key="index" @click.stop="editorParams(item,2)">
        <a-tooltip placement="topLeft" :mouseLeaveDelay="0">
          <template slot="title">
            <span>{{item.name}}</span>
          </template>
          <span>{{`${item.desc}（${item.name}）`}}</span>
        </a-tooltip>
      </li>
    </ul>
  </div>
</template>
<script>
import { Tooltip,Divider } from "ant-design-vue";
import { mixins } from "./minxin";
import { mapState } from "vuex";
import { getFields } from "@person/api/booklet";
import { getQuery } from "@person/api/integratedquery";
import { getHeader } from "@person/api/chart";
import {showError} from "@framework/utils/index";
import Bus from "@/framework/utils/EventBus";
//  作用域数据
export default {
  components: {
    ATooltip: Tooltip,
    ADivider:Divider
  },
  mixins: [mixins],
  data() {
    return {
      /**
       * 作用域数据分三种情况  :
       * 1.外部传入  outerFields
       * 2.请求     ajaxFields
       * 3.过滤数据源(foreach字段,模板编辑器特有功能) , sourceFields
       * 注 : 显示取三种情况合集
       */
      outerFields: this.getFieldsScopeData(),
      ajaxFields: [],
      sourceFields: []
    };
  },
  props: {
    selfFields: {
      type: Array,
      default: ()=>{
        return []
      }
    },
    foreach: {
      type: Object
    },
    dataSource: {
      type: Array
    }
  },
  computed: {
    ...mapState({
      scopedDataList: state => state.query.scopeData
    }),
    // 作用域数据去重
    filterDatasList() {
      let hash = {};
      let list = [...this.ajaxFields, ...this.sourceFields];
      const newArr = list.reduce((item, next) => {
        hash[next.name] ? "" : (hash[next.name] = true && item.push(next));
        return item;
      }, []);
      return newArr;
    }
  },
  mounted() {
    this.getFieldsList();
    this.getFieldsBySource();
    Bus.$on("saveScopeData",this.save)
  },
  methods: {
    save(){
      this.$store.commit({
          type:'SET_SCOPE_DATA',
          data:[...this.outerFields,...this.ajaxFields]
      })
    },
    // 获取作用域数据 (ajaxFields)
    getFieldsList() {
      getFields(this.namespace, this.contextParams)
      .then(res => {
        this.ajaxFields = [...res.result, ...this.scopedDataList]
      })
      .catch(err => {
        showError(err);
      });
    },
    //TODO 根据foreach字段获取作用域数据(sourceFields)
    getFieldsBySource() {
      if (this.foreach) {
        //  dataSource 不会重名(name),所以arr的length 只会为0 或 1
        let item = this.dataSource.find((item) => item.name == this.foreach.expr);
        if (item) {
          if(item.aggregate){
            getHeader(item.queryid).then(({result}) => {
              let header = [...result.keyCols, ...result.valueCols];
              this.sourceFields = [
                { name: this.foreach.index, desc: "索引" },
                ...header.map(item => ({
                  name: this.checkStr(item.column) ? `${this.foreach.item}['${item.column}']` : `${this.foreach.item}.${item.column}`,
                  desc: item.showname
                })),
              ];
            })
          }else{
            getQuery(arr[0].queryid).then(res => {
              let looplist = [];
              res.result.fields.forEach((item, index) => {
                let obj = {};
                obj.name = this.checkStr(item.key) ? `${this.foreach.item}['${item.key}']` : `${this.foreach.item}.${item.key}`;
                obj.desc = item.showname;
                looplist.push(obj);
              });
              this.sourceFields = [{ name: this.foreach.index, desc: "索引" },...looplist];
            }).catch(err => {
              showError(err);
            });
          }
        }
      }
    },
    getFieldsScopeData(){//外部传入参数 按照Property格式 例如：{ code: 'org', name: '单位', require: true, ...}
      return (this.selfFields || []).map(item => {
        return {
          name: item.code,
          desc: item.name
        }
      })
    }
  }
};
</script>
<style lang='less' scoped>
.cell {
  width: 100%;
  border: 1px solid @border-color-base;
  margin-top: @padding-md;
  height: 360px;
  display: flex;
  flex-direction: column;
  &-top {
    display: flex;
    align-items: center;
    background: #d1d1d180;
    border-bottom: 1px solid #d9d9d9;
    p {
      width: 40%;
      margin: 0px;
      height: 30px;
      line-height: 30px;
      text-indent: 10px;
    }
  }
  ul {
    flex: 1;
    width: 100%;
    overflow-y: auto;
    margin: 0px;
    li {
      padding: 0px 10px;
      width: 100%;
      height: 30px;
      line-height: 30px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      &:not(.divider):hover {
        background: #d1d1d180;
        cursor: pointer;
      }
      &.fields {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      &.divider {
        width: 100%;
        height: 1px;
        background: #e8e8e8;
      }
      &.selfField {
        .unite {
          display: flex;
          .left {
            flex: 1;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
          }
          .right {
            width: 40px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            i {
              cursor: pointer;
              padding: 0px 2px;
              color: @primary-color;
            }
          }
        }
      }
    }
  }
}
</style>