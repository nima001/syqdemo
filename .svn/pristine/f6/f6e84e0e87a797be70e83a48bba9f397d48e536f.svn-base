<template>
  <div class="wrap">
    <h2 v-if="title" :style="{textAlign:'center'}">{{title}}</h2>
    <div :id="id"></div>
  </div>
</template>
<script>
import * as G2 from "@antv/g2";
import BaseMixin from "./BaseMixin"
import { maxBy, minBy, cloneDeep } from 'lodash';
/**
 * rangeControl:范围控制
 */
export default {
  icon: 'chart-line',
  title: '折线图',
  name: "LineChart",
  mixins: [BaseMixin],
  data() {
    return {
      id: Math.random().toString(36).substr(2),
      plot: undefined,
    };
  },
  computed: {
    colors(){
      let colors = this.$store.getters.getConfig('chart.colors');
      if(colors){
        try{
          colors = JSON.parse(colors)
          if(colors && colors.length){
            return colors;
          }
        }catch(err){

        }
      }
      return ["#D15456","#5488D1","#EDBA55","#D48265","#91C7AE","#749F83","#BDA29A","#6E7074","#585470","#706254"]
    },
  },
  mounted() {
    this.draw(this.data);
  },
  watch: {
    data: {
      handler(v) {
        this.draw(v);
      },
      deep: true
    }
  },
  methods: {
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = dataTable;
      return rows.map(item => {
        let key = keyCols[0];
        let names;
        if (keyCols.length) {
          names = [];
          for (let i = 1; i < keyCols.length; i++) {
            names.push(item[keyCols[i].column]);
          }
        }
        return {
          key: item[key.column],
          type: names && names.join("-"),
          value: item[valueCols[0].column] || 0
        };
      });
    },
    draw(dataTable) {
      let data = this.createData(dataTable);
      if (!data) {
        return;
      }
      if (this.plot) {
        this.plot.destroy();
      }
      const chart = new G2.Chart({
        container: this.id,
        autoFit: true,
        appendPadding: [20, 0, 20, 0]
      });

      chart.data(data);
      chart.scale({
        key: {
          range: [0, 1]
        },
        value: {
          nice: true,
        },
      });
      // X 轴
      chart.axis("key", {
        title: {
          style: {
            fill: "#aaaaaa"
          }
        }
      });
      // Y 轴
      chart.axis("value", {
        title: {
          style: {
            fill: "#aaaaaa"
          },
        },
      });
      let max, min = undefined;
      if(this.settings.rangeControl) {
        max = cloneDeep(maxBy(this.data.rows, (o)=> { return o.v0 }));
        min = cloneDeep(minBy(this.data.rows, (o)=> { return o.v0 }));
        if(max.v0===min.v0) {
          let num = (min.v0)/2;
          min.v0-=num;
          max.v0+=num;
        }
      }
      // X轴,Y轴标题别名
      chart.scale({
        key: {
          alias: dataTable.keyCols[0].showname
        },
        value: {
          alias: dataTable.valueCols[0].showname,
          nice: true,
          minLimit: this.settings.rangeControl?min.v0:0,
          maxLimit: this.settings.rangeControl?max.v0:undefined,
        }
      });
      chart.legend(false);
      chart.tooltip({
        showCrosshairs: true,
        shared: true
      });
      //新增tooltip配置
      chart
        .line()
        .position("key*value")
        .tooltip("value")
        .color("type", this.colors)
        .shape("smooth");
      //新增tooltip配置
      chart
        .point()
        .position("key*value")
        .tooltip("value")
        .color("type", this.colors)
        .shape("circle");
      chart.render();
      this.plot = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  height: 400px;
  display: flex;
  flex-direction: column;
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>