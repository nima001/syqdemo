<template>
  <div class="itemwrap">
    <!-- <div class="field" v-bind:class="[depth % 2 != 0 ? 'red':'yellow']"> -->
    <div class="field">
      <div class="column-one">
        <a-input read-only class="code-one" v-model="showname" @click.native="()=>treeSelect = true">
          <a-icon slot="suffix" type="select"/>
        </a-input>
        <a-modal title="字段选择" :destroyOnClose="true" :footer='null' @cancel='()=>treeSelect=false' :visible='treeSelect'
          width='500px' :bodyStyle="{height: '600px', padding:'0px'}">
          <select-field :targetid="target.id" @finish="finishHandle"/>
        </a-modal>
      </div>
      <op-select class="selectList" :defaultData="defaultData" :position="position" :targetid="target.id"/>
      <component v-if="cType" :is="cType" :target="target" :position="position" :defaultData="defaultData"/>
      <custom-icon class="opIcon" type="delete" @click.native="delByPosition"/>
    </div>
    <div class="relation" v-if="index < length-1">
      <select-component :keys="position" :relationop="relationop"></select-component>
      <span class="split" @click="split($event)" v-if="depth != 0">拆分</span>
      <span class="union" @click="union($event)" v-if="length>2">组合</span>
      <a-icon type="plus-circle" class="opIcon" @click.native="addByPosition"/>
    </div>
  </div>
</template>
<script>
import { querylistop } from "@person/api/integratedquery";
import { comType } from "@person/utils/index";
import SelectComponent from "./SelectComponent";
import OpSelect from "../fields/OpSelect";
import NumberArith from '../fields/NumberArith';
import NumberArray from '../fields/NumberArray';
import NumberBetween from '../fields/NumberBetween';
import NumberValue from '../fields/NumberValue';
import BooleanValue from '../fields/BooleanValue';
import DateBetween from "../fields/DateBetween";
import DateValue from "../fields/DateValue";
import StringArray from '../fields/StringArray';
import StringValue from "../fields/StringValue";
import DictArray from '../fields/DictArray';
import DictValue from "../fields/DictValue";
import ReferArray from '../fields/ReferArray';
import ReferValue from "../fields/ReferValue";
import { Popover, Input, Tooltip, Icon, Modal} from "ant-design-vue";
import { showError } from "@/framework/utils/index";
import CustomIcon from "@/framework/components/CustomIcon";
import SelectField from './SelectField';

export default {
  name: "QueryItem",
  props: {
    length: {
      type: Number,
      required: true
    },
    position: {
      type: String,
      required: true
    },
    depth: {
      type: Number,
      required: true
    },
    defaultData: {
      type: Object,
      required: true
    },
    relationop: {
      type: String,
      required: true
    },
    target: {
      type: Object,
      required: true,
      default: () => ({})
    }
  },
  data(){
    return{
      treeSelect:false,
    }
  },
  provide() {
    return { setField: this.setField };
  },
  components: {
    APopover: Popover,
    AInput: Input,
    ATooltip: Tooltip,
    AIcon: Icon,
    AModal:Modal,
    SelectComponent,
    OpSelect,
    NumberArith,
    NumberArray,
    NumberBetween,
    NumberValue,
    BooleanValue,
    DateBetween,
    DateValue,
    StringArray,
    StringValue,
    DictArray,
    DictValue,
    ReferArray,
    ReferValue,
    CustomIcon,
    SelectField
  },
  created() {
    if (this.defaultData.op && !this.defaultData.opList) {
      this.getListop(this.defaultData.field.key);
    }
  },
  computed: {
    index() {
      return parseInt(this.position.split("_").pop());
    },
    cType() {
      return comType(this.defaultData.field, this.defaultData.op);
    },
    showname() {
      return this.defaultData.field ? this.defaultData.field.showname : "";
    }
  },
  methods: {
    finishHandle(type,data){
      if(type == 'ok'){
        this.setField(data);
      }
      this.treeSelect = false;
    },
    setField(res) {
      this.getListop(res.key);
      this.$store.commit({
        type: "ADD_FIELD",
        position: this.position,
        field: res
      });
    },
    addByPosition() {
      this.$store.commit({
        type: "ADD_BY_POSITION",
        data: this.position
      });
    },
    delByPosition() {
      this.$store.commit({
        type: "DEL_BY_POSITION",
        data: this.position
      });
    },
    getListop(key) {
      querylistop({
        targetid: this.target.id,
        key
      }).then(res => {
        this.opList = res.result;
        this.$store.commit({
          type: "SET_OP_LIST",
          position: this.position,
          data: res.result
        });
      }).catch(error => {
        showError(error);
      });
    },
    changeValue(e) {
      let val = e.target.value;
      let value =
        this.defaultData.field.datatype == 2 && !isNaN(val)
          ? parseInt(val)
          : val;
      this.$store.commit({
        type: "SET_VALUE",
        position: this.position,
        value
      });
    },
    split(position) {
      this.$store.commit({
        type: "SPLIT",
        position: this.position
      });
    },
    union(position) {
      this.$store.commit({
        type: "UNION",
        op: this.relationop,
        position: this.position
      });
    }
  }
};
</script>
<style lang="less" scoped>
.itemwrap {
  .field {
    display: flex;
    align-items: center;
    .column-one {
      flex: none;
      width: 320px;
      height: 30px;
      margin-right: 10px;
      position: relative;
      /deep/ input {
        cursor: pointer;
        border-top-left-radius: 0px;
        border-bottom-left-radius: 0px;
      }
      svg{
        width: 12px;
        height: 12px;
      }
    }
    .selectList {
      flex: none;
      width: 120px;
      margin-right: 10px;
    }
    .opIcon {
      flex: none;
      width: 20px;
      height: 20px;
      color: @primary-color;
      cursor: pointer;
      &:hover {
        color: fade(@primary-color, 75%);
      }
      &:last-child {
        margin-left: 10px;
      }
    }
    .anticon {
      font-size: 16px;
      padding: 5px;
      cursor: pointer;
    }
  }
  .relation {
    display: flex;
    align-items: center;
    margin: 15px 0px;
    .opIcon {
      cursor: pointer;
      color: @primary-color;
      width: 20px;
      height: 20px;
      font-size: 18px;
      &:hover {
        color: fade(@primary-color, 75%);
      }
      &:last-child {
        margin-left: 14px;
      }
    }
    span {
      width: 72px;
      height: 32px;
      text-align: center;
      line-height: 32px;
      background: #9e9e9e3d;
      border: 1px solid #9e9e9e3d;
      border-radius: 4px;
      cursor: pointer;
      color: #666;
      margin-left: 15px;
      transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
      &:hover {
        border-color: @primary-color;
      }
    }
  }
}
</style>