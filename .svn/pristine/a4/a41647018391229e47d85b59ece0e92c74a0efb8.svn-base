<template>
  <div class="chart-layout">
    <div class="layout-content">
      <div class="settings-panel">
        <settingpanel
          :options="options"
          @qlsxdiStrict="qlsxdiStrict"
          @regionsubmit="regionsubmit"
          @orglinesubmit="orglinesubmit"
          @datelinesubmit="datelinesubmit"
          @orgsubmit="orgsubmit"
          @changeActive="changeActive"
          @qlsxsearchCode="qlsxsearchCode"
          :selectedItems.sync="this.selectedItems"
        />
      </div>
      <div class="content-panel">
        <contentpanel
          :active="active"
          :values="values"
          :options="options"
          :result="this.result"
          :chartTypes="this.chartTypes"
          :selectedItems="this.selectedItems"
          :queryData="this.queryData"
          :chartType="this.chartType"
          :tableData="this.tableData"
          :columns="this.columns"
          :loading="this.loading"
          :pagination.sync="this.pagination"
          :title="this.title"
          :settings="this.settings"
          @qlsxdiStrict="qlsxdiStrict"
          @qlsxHistory="qlsxHistory"
          @qlsxsearchOrg="qlsxsearchOrg"
          @qlsxlineTable="qlsxlineTable"
          @qlsxdateLine="qlsxdateLine"
          @loadGraphics="loadGraphics"
          @changeType="changeType"
          @changeSelectItem="changeSelectItem"
        />
      </div>
    </div>
  </div>
</template>

<script>
import {
  qlsxdistrict,
  qlsxhistory,
  qlsxline,
  qlsxlinetable,
  qlsxdateline,
  qlsxsearchorg,
  qlsxsearchcode,
} from "@/person-shaoxing/api/assessment";
import { cloneDeep, assign, uniqBy, sortBy, groupBy } from "lodash";
import { orglinequery } from "@/person-shaoxing/api/information";
import { showError } from "../../../../framework/utils";
import settingpanel from "./settingpanel.vue";
import contentpanel from "./contentpanel.vue";
import table from '../../../../salary/views/salarydefend/table';
import { uiConfigsCookies } from '../../../../framework/utils/auth';
export default {
  components: {
    settingpanel,
    contentpanel,
  },
  data() {
    return {
      active: 0, //左侧菜单选中项
      options: [
        //左侧菜单 methodname属性可用于分页调用方法
        { name: "区域整体情况", methodname: "qlsxdiStrict", choose: true },
        {
          name: "按区域查看部门历史明细",
          methodname: "qlsxHistory",
          choose: false,
        },
        {
          name: "按时间查看部门变化情况",
          methodname: "qlsxdateLine",
          choose: false,
        },
        {
          name: "按权力基本码对比具体事项",
          methodname: "qlsxsearchOrg",
          choose: false,
        },
        {
          name: "按条线部门对比具体事项",
          methodname: "qlsxlineTable",
          choose: false,
        },
        { name: "按单个事项查看发布情况", choose: false },
      ],
      selectedItems: 1, //区域选择框默认值
      queryData: undefined, //统计结果数据表
      chartType: "bar-chart", //数据选中的显示类型
      settings:{},
      chartTypes: [
        //决定显示哪个图表
        { type: "bar-chart", icon: "bar-chart", choose: true, disabled: false },
        { type: "line-chart", icon: "line-chart", choose: false, isabled: true },
        { type: "pie-chart", icon: "pie-chart", choose: false, disabled: true },
        { type: "table", icon: "table", choose: false, disabled: false },
      ], //数据显示类型
      columns: [
        {
          title: "",
          dataIndex: "rows",
          key: "rows",
        },
      ], //表头数据
      tableData: [], //表格数据
      loading: false,
      result: [], //请求回来的数据
      districts: [], //按权利查询表头的区域数据
      title: {}, //按单个事项查看发布情况表头
      pagination: {
        pagenum: 1,
        pagesize: 10,
        total: 0,
        needtotal: true,
      }, //分页信息
      values: {}, //（非第一个）选中菜单项，点击头部下拉框需要的参数
    };
  },
  computed: {
    dict() {
      return this.$store.getters.dict("person.business.businesstype");
    },
    district() {
      return this.$store.getters.dict("usermanage.org.district");
    },
  },
  watch:{
    dict(val){
      return val;
    },
    district(val){
      return val;
    }
  },
  created() {
    this.qlsxdiStrict(1);
  },
  methods: {
    onChange(pagenum, pagesize) {
      //页数修改回调
      assign(this.pagination, { pagenum, pagesize });
      this.qlsxHistory(this.pagination);
    },
    choose(index) {
      //左侧菜单项选择
      if (index === 0 && this.active !== 0) {
        this.qlsxdiStrict(this.selectedItems);
      } else if (index === 4) {
        this.orglineQuery();
      }
      this.active = index;
    },
    changeType(values) {
      this.chartType = values;
    },
    changeSelectItem(values) {
      this.selectedItems = values;
    },
    //动态显示图表icon
    showIcon(condition) {
      this.chartTypes.forEach((item) => {
        if (item.disabled) {
          item.disabled = false;
        }
      });
      condition.forEach((item) => {
        this.chartTypes[item].disabled = true;
      });
    },
    changeActive(values) {
      this.active = values;
      this.tableData = [];
      this.queryData = undefined;
    },
    /**处理数据 开始*/
    //区域整体情况/按区域查看部门历史明细
    loadtableData(result) {
      if(this.chartType === 'line-chart'){
        this.chartType = 'bar-chart';
      }
      let filter = [];
      result.forEach((item, index) => {
        filter.push({text: item.name,value: item.name});
        //表格数据
        let row = { rows: item.name, total: item.total }; //初始化行数据
        this.dict.forEach((dictItem) => {
          //循环查找出每一列的数据
          row[dictItem.key] = item.data[dictItem.key];
        });
        this.tableData.push(row);
        //表头数据
        if (this.columns.length === 1) {
          for (let tableitem in item.data) {
            let title = "";
            if (tableitem !== "total") {
              title = this.dict.find((finditem) => finditem.key == tableitem).text;
              this.columns.push({
                title: `${title}`,
                key: `${tableitem}`,
                dataIndex: `${tableitem}`,
                sorter: this.active===0?(a, b) => a[tableitem] - b[tableitem]:undefined,
              });
            }
          }
          this.columns.push({
            title: "总计",
            key: "total",
            dataIndex: "total",
            sorter: this.active===0?(a, b) => a.total - b.total:undefined,
          });
        }
      });
      if(this.active === 0){
        this.columns[0].filters = filter;
        this.columns[0].onFilter= (value, record) => record.rows.indexOf(value) === 0;
      }
    },
    //按条线部门对比事项
    loadorgtableData(result) {
      this.columns = [
        {
          title: "权力基本码",
          dataIndex: "quanlicode",
          key: "quanlicode",
        },
        {
          title: "权力事项名称",
          dataIndex: "name",
          key: "name",
        },
      ];
      result.forEach((item, index) => {
        this.columns.push({
          title: () => {
            return (
              <div>
                <p style="margin-bottom:0">{item.name}</p>
                <p style="margin-bottom:0;">({item.total})</p>
              </div>
            )
          },
          dataIndex: `check${index}`,
          key: `check${index}`,
          align: 'center',
          scopedSlots: { customRender: "check" },
        });
      });
      //调用接口处理表格数据
      this.qlsxLine(this.pagination);
    },
    //按时间查看部门变化
    loaddatetableData(result) {
      result.forEach((item, index) => {
        //初始化行数据
        let row = {
          rows: item.date.split("-")[1] + "月份",
          total: item.total,
        };
        this.dict.forEach((dictItem) => {
          //循环查找出每一列的数据
          row[dictItem.key] = item.data[dictItem.key];
        });
        this.tableData.push(row);
        //表头数据
        if (this.columns.length === 1) {
          for (let tableitem in item.data) {
            let title = "";
            if (tableitem !== "total") {
              title = this.dict.find((finditem) => finditem.key == tableitem).text;
              this.columns.push({
                title: `${title}`,
                key: `${tableitem}`,
                dataIndex: `${tableitem}`,
              });
            }
          }
          this.columns.push({
            title: "总计",
            key: "total",
            dataIndex: "total",
          });
        }
      });
    },
    //处理子节点数据
    loadchildren(orgname,index,childnode){
      for(let a in orgname){
        let names = {};
        //处理父节点数据
        names[orgname[a][0].district] = orgname[a][0].orgname;
        assign(this.tableData[index], names);
        //处理子节点数据
        if(orgname[a].length>1){
          //删除第一行数据，将剩下的数据放入children属性中
          orgname[a].splice(0,1);
          orgname[a].forEach((nameItem,nameIndex)=>{
            nameItem[nameItem.district] = nameItem.orgname;
            if(this.active===5){
              this.$delete(nameItem, 'district');
            }
            //当orgname[a]里不止一行数据的时候需要另起一行
            if(nameIndex !== 0){
              childnode.push({});
            }
            assign(childnode[nameIndex],nameItem);
          });
          // 合并数据
          this.tableData[index].children = childnode;
        }
      }
    },
    //按权利基本码对比事项
    loadsearchorgData(result) {
      this.columns = [
        {
          title: "权力基本码",
          dataIndex: "quanlicode",
          key: "quanlicode",
        },
        {
          title: "权力事项名称",
          dataIndex: "name",
          key: "name",
        },
      ];
      this.districts.forEach((items) => {
        this.columns.push({
          title: items.text,
          dataIndex: items.value,
          key: items.value,
        });
      });
      this.result.forEach((Items, index) => {
        let orgname = [];
        let childnode = [{}];
        this.tableData.push({
          quanlicode: Items.quanlicode,
          name: Items.name,
        });
        this.districts.forEach((disItem,disIndex)=>{
          //按名称分组
          orgname = groupBy(Items.orgList,'district');
        });
        //处理子节点数据
        this.loadchildren(orgname,index,childnode);
      });
    },
    //按单个事项查看发布情况
    loadcodesearchData(result) {
      this.pagination.total = 0;
      this.showIcon([0, 1, 2]);
      this.chartTypes.forEach((item) => {
        item.choose = false;
        if (item.type === "table") {
          //设置选中
          item.choose = true;
          this.chartType = item.type;
        }
      });
      this.columns = [
        {
          title: "地区",
          dataIndex: "district",
          key: "district",
        },
      ];
      let that = this;
      this.tableData = [{ district: "公布情况(家数)" }];
      this.district.forEach((item) => {
        that.columns.push({
          title: item.text,
          dataIndex: item.value,
          key: item.key,
        });
        that.tableData[0][`${item.value}`] = 0;
        //计算公布情况（家数）
        result.orgList.forEach((orgitem, index) => {
          if (orgitem.district === item.value) {
            that.tableData[0][`${item.value}`] += 1;
          }
        });
      });
      let orgname = [];
      let childnode = [{}];
      this.tableData.push({district: "公布部门"});
      orgname = groupBy(result.orgList,'district');
      //处理子节点数据
      this.loadchildren(orgname,1,childnode);
    },
    //处理图数据
    loadchartData(result) {
      this.queryData = {
        data: {
          keyCols: [{ column: "k0", key: "strict", showname: "区域" }],
          rows: [],
          valueCols: [
            {
              column: "v0",
              showname: "记录数",
            },
          ],
        },
      };
      result.forEach((item, index) => {
        //查询字典项，图表数据 区域整体情况最后一个数据为 总计 ，所以要用条件区分开
        if (this.active === 0) {
          //区域整体情况
          if (index !== result.length - 1) {
            this.queryData.data.rows.push({
              k0: item.name,
              v0: item.total,
            });
          }
        } else if (this.active === 2) {
          //按时间查看部门变化情况
          if (index === 0) {
            this.queryData = {
              data: {
                keyCols: [{ column: "k0", key: "date", showname: "时间" }],
                rows: [],
                valueCols: [
                  {
                    column: "value",
                    showname: "记录数",
                  },
                ],
              },
            };
          }
          let Index = 1;
          for (let tableitem in item.data) {
            if (tableitem !== "total") {
              let showname = this.dict.find(
                (finditem) => finditem.key == tableitem
              ).text;
              //避免keyCols数据冗余，只在result第一次循环的时候添加
              if (index === 0) {
                this.queryData.data.keyCols.push({
                  column: `k${Index}`,
                  key: tableitem,
                  showname: showname,
                });
              }
              //利用空对象添加每一组值
              let obj = {};
              obj.k0 = `${item.date.split("-")[1]}月份`;
              obj[`k${Index}`] = showname;
              obj.value = item.data[tableitem];
              this.queryData.data.rows.push(obj);
              Index++;
            }
          }
        } else {
          this.queryData.data.rows.push({
            k0: item.name,
            v0: item.total,
          });
        }
      });
    },
    loadGraphics(result) {
      //根据选中状态动态切换图表显示数据
      this.chartTypes.forEach((item) => {
        //判断选中
        if (item.choose) {
          //获取表格数据
          this.columns = [{ title: "", dataIndex: "rows", key: "rows" }];
          //调用方法处理表格数据
          if (this.active === 4) {
            //按条线部门对比
            this.loadorgtableData(result);
          } else if (this.active === 2) {
            //按时间查看部门变化情况
            //按时间排序
            result = sortBy(result, function (item) {
              return item.date;
            });
            this.tableData = [];
            this.loaddatetableData(result);
          } else if (this.active === 3) {
            //按权利基本码对比具体事项
            this.tableData = [];
            this.loadsearchorgData(result);
          } else {
            //区域整体情况
            this.tableData = [];
            this.loadtableData(result);
          }
          //获取图表数据
          this.loadchartData(result);
        }
      });
    },
    /**接受子组件提交事件 开始**/
    initpagination() {
      //初始化pagination
      this.pagination = {
        pagenum: 1,
        pagesize: 10,
        total: 0,
        needtotal: true,
      };
    },
    //按区域查看部门历史明细 提交
    regionsubmit(values) {
      this.showIcon([0, 1, 2]);
      let date = "";
      if (!values.date && this.active === 1) {
        let myDate = new Date();
        date += myDate.getFullYear() + "-"; //获取完整的年份(4位,1970-????)
        date += myDate.getMonth() + 1 + "-01"; //获取当前月份(0-11,0代表1月)
        values.date = date;
      }
      this.initpagination();
      assign(this.pagination, values);
      this.pagination.type = this.selectedItems;
      this.qlsxHistory(this.pagination);
    },
    //按条线部门对比具体事项 提交
    orglinesubmit(values) {
      this.showIcon([1, 2]);
      this.initpagination();
      assign(this.pagination, values);
      this.qlsxlineTable(this.pagination);
    },
    //按时间查看部门变化情况 提交
    datelinesubmit(values) {
      this.showIcon([2]);
      this.initpagination();
      this.pagination.type = this.selectedItems;
      assign(this.pagination, values);
      this.qlsxdateLine(this.pagination);
    },
    //按权利基本码独对比具体事项 提交
    orgsubmit(values) {
      this.showIcon([0, 1, 2]);
      this.chartTypes.forEach((item) => {
        item.choose = false;
        if (item.type === "table") {
          //设置选中
          item.choose = true;
          this.chartType = item.type;
        }
      });
      this.initpagination();
      assign(this.pagination, values);
      this.pagination.districts = [];
      this.districts = [];
      values.districts.forEach((item) => {
        this.pagination.districts.push(item.value);
        this.districts.push(item);
      });
      this.qlsxsearchOrg(this.pagination);
    },
    /**  接口数据调用 开始 **/
    //区域整体情况
    qlsxdiStrict(type) {
      this.settings.title="区域整体情况";
      this.showIcon([1, 2]);
      this.loading = true;
      qlsxdistrict(type)
        .then((res) => {
          this.loading = false;
          if (res.result) {
            this.result = res.result;
            this.pagination.total = 0;
            this.loadGraphics(this.result);
          } else {
            this.tableData = [];
            this.queryData = undefined;
          }
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //区域查看部门历史
    qlsxHistory(data) {
      this.loading = true;
      this.values = data;
      qlsxhistory(data)
        .then((res) => {
          this.loading = false;
          this.result = cloneDeep(res.result.rows);
          assign(this.pagination, res.result);
          this.chartTypes.forEach((item) => {
            item.choose = false;
            if (item.type === "table") {
              //设置选中
              item.choose = true;
              this.chartType = item.type;
            } else {
              this.tableData = [];
              this.queryData = undefined;
            }
          });
          this.loadGraphics(this.result);
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //按条线部门对比具体事项
    qlsxLine(data) {
      this.loading = true;
      this.settings.title="按条线部门对比具体事项";
      qlsxline(data)
        .then((res) => {
          this.loading = false;
          if (res.result) {
            assign(this.pagination, res.result);
            this.tableData = [];
            this.result = res.result.rows.forEach((item, index) => {
              let row = {};
              row.quanlicode = item.quanlicode;
              row.name = item.name;
              item.orgList.forEach((item) => {
                this.result.forEach((Item, index) => {
                  if (Item.statistickey == item.orgid) {
                    row[`check${index}`] = true;
                  }
                });
              });
              this.tableData.push(row);
            });
          } else {
            this.tableData = [];
            this.queryData = undefined;
          }
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //条线部门表头
    qlsxlineTable(data) {
      this.loading = true;
      qlsxlinetable(data)
        .then((res) => {
          this.loading = false;
          if (res.result.length) {
            this.result = cloneDeep(res.result);
            this.loadGraphics(this.result);
          } else {
            this.tableData = [];
            this.queryData = undefined;
          }
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //按时间查看部门变化情况
    qlsxdateLine(data) {
      this.loading = true;
      this.values = data;
      qlsxdateline(data)
        .then((res) => {
          this.loading = false;
          this.pagination.total = 0;
          if (res.result.length) {
            this.result = res.result;
            this.loadGraphics(this.result);
          } else {
            this.tableData = [];
            this.queryData = undefined;
          }
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //按权利基本码对比具体事项
    qlsxsearchOrg(data) {
      this.loading = true;
      this.values = data;
      qlsxsearchorg(data)
        .then((res) => {
          this.loading = false;
          assign(this.pagination, res.result);
          if (res.result) {
            this.result = res.result.rows;
            this.loadGraphics(this.result);
          } else {
            this.tableData = [];
            this.queryData = undefined;
          }
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    //按单个事项查看发布情况
    qlsxsearchCode(data) {
      this.title = data.title;
      this.loading = true;
      qlsxsearchcode(data)
        .then((res) => {
          this.loading = false;
          this.loadcodesearchData(res.result);
        })
        .catch((err) => {
          this.loading = false;
          showError(err);
        });
    },
    /** 接口数据调用 结束 **/
  },
};
</script>
<style scoped lang="less">
.chart-layout {
  height: 100%;
  width: 100%;
  display: flex;
  padding: @layout-space-base;
  .layout-content {
    flex: 1;
    width: 100%;
    display: flex;
    .settings-panel {
      height: 100%;
      max-width: 248px;
      min-width: 248px;
      width: 248px;
      display: flex;
      flex-direction: column;
      padding: 10px;
      border-radius: @border-radius-base;
      background: #ffffff;
      margin-right: @layout-space-base;
      .active {
        color: @primary-color;
      }
      .title-option {
        ul {
          margin-bottom: 0;
          li {
            margin-top: @padding-xs;
            cursor: pointer;
          }
        }
      }
      .selectcontent {
        margin-top: 24px;
      }
    }
    .content-panel {
      height: 100%;
      display: flex;
      min-width: 0;
      flex-direction: column;
      flex: 1;
      background: #ffffff;
      border-radius: @border-radius-base;
      .top-right {
        padding: @content-padding-v @content-padding-h;
        box-shadow: 0px 3px 6px 0px @primary-1;
        display: flex;
        justify-content: space-between;
        .left {
          margin: 10px 0;
        }
        .right {
          margin: 10px 0;
          display: flex;
          align-items: center;
          justify-content: space-around;
          .icon {
            display: flex;
            align-self: center;
            justify-content: center;
            border: 1px solid #e8e8e8;
            border-radius: @border-radius-base;
            padding: @padding-xs / 4;
            margin-right: @padding-xs / 2;
            transition: all 0.5s;
            /deep/.anticon {
              color: #e8e8e8;
              cursor: pointer;
              font-size: 20px;
            }
          }
          .icon.choose {
            border: 1px solid @primary-color;
            /deep/.anticon {
              color: @primary-color;
            }
          }
        }
      }
      .content-right {
        flex: 1;
        padding: @content-padding-v @content-padding-h;
        /deep/.ant-pagination {
          float: right;
          margin-top: 10px;
        }
      }
    }
  }
}
</style>