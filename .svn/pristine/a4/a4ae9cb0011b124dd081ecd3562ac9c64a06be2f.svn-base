<template>
    <div class="flowdesign">
      <div class="content">
        <div class="canvas" ref="canvas"></div>
      </div>
    </div>
</template>
<script>
import {Layout,Button} from "ant-design-vue";
import BpmnModeler from 'bpmn-js/lib/Modeler';
import { CustomModeler } from "../components/customModeler";
import { defaultXml } from './defaultXml';


export default {
  name: "flowDesign",
  components: {
    ALayout: Layout,
    BpmnModeler,
    AButton: Button
  },
  props:{
    data:{
      type: Object,
      default: {}
    }
  },
  data () {
    return {
      bpmnModeler: null,
      flowChart: defaultXml
    }
  },
  mounted () {
    this.init();
    //加载数据
    this.loadData();
  },
  methods: {
    init(){
      //创建画布
      const canvas = this.$refs.canvas;
      this.bpmnModeler = new CustomModeler({
        container: canvas,
        keyboard: {
          bindTo: window
        },
        additionalModules: [
          {
            // 禁止双击节点出现label编辑框
            labelEditingProvider: ["value", ""]
          }
        ]
      });
      //创建流程图
      this.createFlowChart();
    },
    createFlowChart () {
      // 将字符串转换成图显示出来
			this.bpmnModeler.importXML(this.flowChart).then(() =>{
        //添加监听事件
        this.addEventBusListener();
        // 自适应屏幕
        this.bpmnModeler.get('canvas').zoom('fit-viewport');
      }).catch((err) => {
        this.$notification.error({
          message: "提示",
          description: "流程加载失败！",
          duration: 3
        });
        console.warn(err);
      });
    },
    loadData(){
      let id = this.$route.query.id;
      console.log(id);
    },
    addEventBusListener() {
      let that = this;
      const eventBus = this.bpmnModeler.get('eventBus');
      console.log(eventBus._listeners);
      //需要监听的事件集合
      const eventTypes = [
        'shape.added', 'shape.remove',
        'connection.added','connection.remove',
        'element.click', 'element.changed'
      ];
      //挂载事件
      eventTypes.forEach(function(eventType) {
        eventBus.on(eventType, function(e) {
          //跳过根元素
          if (!e || e.element.type == 'bpmn:Process') return;
          switch (eventType){
            case 'shape.added': that.addShape(e); break;
            case 'shape.remove': that.removeShape(e); break;
            case 'connection.added': that.addConnection(e); break;
            case 'connection.remove': that.removeConnection(e); break;
            case 'element.click': that.clickElement(e); break;
            case 'element.changed': that.elementChanged(e); break;
            default:
              break;
          }
        });
      });
    },
    addShape(e){
      let shape = this.getShape(e.element.id);
      console.log('添加图形', e, shape);
    },
    removeShape(e){
      console.log('移除图形',e);
      // let shape = this.getShape(e.element.id);
      // if (shape) {
      //   console.log('移除图形', e, shape);
      // }
    },
    addConnection(e){
      console.log('添加连线', e);
      // let shape = this.getShape(e.element.id);
      // if (shape) {
      //   console.log('添加连线', e, shape);
      // }
    },
    removeConnection(e){
      console.log('移除连线', e);
      // let shape = this.getShape(e.element.id);
      // if (shape) {
      //   console.log('移除连线', e, shape);
      // }
    },
    clickElement(e){
      let shape = this.getShape(e.element.id);
      if (shape) {
        console.log('点击元素', e, shape);
      }
      this.exchangeId(e);
    },
    elementChanged(e) {
     console.log('元素变更', e);
      // let shape = this.getShape(e.element.id);
      // console.log(shape);
      // if (!shape) {
      //   // 若是shape为null则表示删除, 无论是shape还是connect删除都调用此处
      //   console.log('无效的shape')
      //   // 由于上面已经用 shape.removed 检测了shape的删除, 因此这里只判断是否是线
      //   if (this.isSequenceFlow(shape.type)) {
      //     console.log('删除了线')
      //   }
      // }
      // if (!this.isInvalid(shape.type)) {
      //   if (this.isSequenceFlow(shape.type)) {
      //     console.log('改变了线')
      //   }
      // }
    },
    preExecute(e){
      console.log('执行前', e);
    },
    getShape(id) {
      var elementRegistry = this.bpmnModeler.get('elementRegistry')
      return elementRegistry.get(id)
    },
    isInvalid (param) { // 判断是否是无效的值
      return param === null || param === undefined || param === ''
    },
    isSequenceFlow (type) { // 判断是否是线
      return type === 'bpmn:SequenceFlow'
    },
    exchangeId(e){
      const modeling = this.bpmnModeler.get('modeling');
      var elementRegistry = this.bpmnModeler.get('elementRegistry')
      var shape = e.element ? elementRegistry.get(e.element.id) : e.shape;
      modeling.updateProperties(shape, {
        name: '我是修改后的Task名称'
      })
    },
    async saveBpmn(e){
      const { xml } = await this.bpmnModeler.saveXML({ format: true });
      console.log(xml);
    }
  }
}

</script>
<style lang="less"  scoped>
@import '~bpmn-js/dist/assets/diagram-js.css';
@import '~bpmn-js/dist/assets/bpmn-font/css/bpmn-embedded.css';
@import '~bpmn-js-properties-panel/dist/assets/bpmn-js-properties-panel.css';
.flowdesign{
  height: 100%;
  width: 100%;
  // background: white;
  // overflow: auto;
  // background-image: linear-gradient(
  //     90deg,
  //     rgba(220, 220, 220, 0.5) 6%,
  //     transparent 0
  //   ),
  //   linear-gradient(rgba(192, 192, 192, 0.5) 6%, transparent 0);
  // background-size: 12px 12px;
  // -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  .content{
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    .canvas{
      width: 100%;
      height: 100%;
      /deep/ .bjs-powered-by {
        display: none;
      }
    }
  }
}
</style>