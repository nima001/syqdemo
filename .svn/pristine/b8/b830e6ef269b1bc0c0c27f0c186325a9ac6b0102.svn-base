<template>
    <div class="body">
      <div>
        <div>
          <p v-show="allow" class="applytext">请选择需要申请的接口：</p>
          <div class="tools">
            <a-select allowClear v-show="allow" v-model="actionstate" @change="getActionList" class="tsearch">
              <a-select-option value="0">所有接口</a-select-option>
              <a-select-option value="1">选中接口</a-select-option>
              <a-select-option value="2">待审核接口</a-select-option>
            </a-select>
            <a-select allowClear v-model="actiontag" @change="getActionList" class="tsearch">
              <a-select-option value>接口标签</a-select-option>
              <a-select-option
                :value="key"
                v-for="(value, key) in actiontagsMap"
                :key="key"
              >{{value}}</a-select-option>
            </a-select>
            <a-input allowClear v-model="namelike" placeholder="请输入接口名称" class="tsearch" @pressEnter="getActionList"/>
            <a-button type="primary" @click="getActionList" >搜索</a-button>
            <a-button type="primary" @click="resetsearch" :style="{marginLeft:'10px'}">重置</a-button>
          </div>
          <a-table :row-selection="rowSelection" :columns="columns" :data-source="data" rowKey="id">
            <span slot="name" slot-scope="text, record">
              <p>
                <span class="actionname">{{text}}</span>
                <span @click="actionDetail(record)" class="actiondetil">详情</span>
              </p>
            </span>
            <span slot="acstate" slot-scope="text">
              <span>{{stateMap[text]}}</span>
            </span>
          </a-table>
          <div>
            <article>
              <p class="applytext">用途说明：</p>
            </article>
            <a-form :form="form">
              <a-form-item>
                <a-textarea 
                  :autoSize="false"
                  :rows="4"
                  :class="allow?'':'input'"
                  :readOnly="!allow"
                  v-decorator="[
                'desc',
                {
                  rules: [{ required: true, message: '请输入用途说明' }],
                  initialValue: descform.desc,
                },
              ]"
                />
              </a-form-item>
            </a-form>
            <div v-if="descform.faildesc != undefined">
              <article>
                <p style="color:red;">审核退回原因：{{descform.faildesc}}</p>
              </article>
            </div>
          </div>
        </div>
        <!-- <a-button @click="back">返回</a-button> -->
        <div class="nextstepdiv" v-show="allow">
          <a-button type="primary" class="nextstep" @click="nextstep">下一步</a-button>
        </div>
      </div>
    <!-- 接口详情接口 -->
    <a-modal
      :centered="true"
      title="接口详情"
      v-model="actionVisible"
      :footer="null"
      :bodyStyle="{ height: '500px', padding: '24px' }"
    >
      <p>
        <span>接口名称:</span>
        {{ actionData.name }}
      </p>
      <p>
        <span>模块名称:</span>
        {{ actionData.module }}
      </p>
      <p>
        <span>接口地址:</span>
        {{ actionData.url }}
      </p>
      <p>
        <span>接口权限类型:</span>
        {{ actionstateMap[actionData.permit]}}
      </p>
      <p>
        <span>接口标签:</span>
        {{ actionData.tags }}
      </p>
      <p>
        <span>接口版本号:</span>
        {{ actionData.version }}
      </p>
    </a-modal>
    </div>

</template>

<script>
import { Layout, Button, Input, Form, Select, Table } from "ant-design-vue";
import { appliedList, serviceDesc } from "../../api/service";
import { showError } from "@/framework/utils";
const allowcolumns = [
  {
    title: "接口名称",
    dataIndex: "name",
    width: "35%",
    scopedSlots: { customRender: "name" }
  },
  {
    title: "标签",
    dataIndex: "age",
    width: "15%"
  },
  {
    title: "接口地址",
    dataIndex: "address",
    width: "40%"
  }
];
export default {
  components: {
    ALayout: Layout,
    AButton: Button,
    AInput: Input,
    ATextarea: Input.TextArea,
    AForm: Form,
    AFormItem: Form.Item,
    ASelect: Select,
    ASelectOption: Select.Option,
    ATable: Table
  },
  props: {
    allow:{
      type:Boolean
    }
  },
  data() {
    return {
      // allow: false,
      descform: {},
      //接口状态下拉框标识
      actionstate: "0",
      actiontag: "",
      actiontagsMap: [],
      namelike: "",
      selectedRowKeys: [],
      //从接口获取选择的key
      apiSelectKeys: [],
      desc: "",
      columns: [
        {
          title: "接口名称",
          dataIndex: "name",
          width: "35%",
          scopedSlots: { customRender: "name" }
        },
        {
          title: "标签",
          dataIndex: "age",
          width: "15%"
        },
        {
          title: "接口地址",
          dataIndex: "url",
          width: "40%"
        },
        {
          title: "状态",
          dataIndex: "state",
          width: "10%",
          scopedSlots: { customRender: "acstate" },
          customCell: (record, rowIndex) => {
            //在此处可以修改单元格中的样式
            return { style: this.colors(record.state) }; //return 想要设置的样式
          }
        }
      ],
      data: [],
      //接口详情窗口
      actionVisible: false,
      actionData: {},
      //接口状态
      stateMap: {
        "0": "未开通",
        "1": "待审核",
        "2": "使用中",
        "4": "退回"
      },
      actionstateMap: {
        "0": "公开",
        "1": "登录",
        "2": "授权"
      },
      verifystate: this.$route.query.verifystate ? parseInt(this.$route.query.verifystate) : this.$route.query.verifystate,
      form: this.$form.createForm(this)
    };
  },

  computed: {
    rowSelection() {
      if (this.allow || this.verifystate === 0) {
        return {
          //选择的keys
          selectedRowKeys: this.selectedRowKeys,
          //接口选择修改
          onChange: this.changeSelectedRow,
          getCheckboxProps: record => {
            let props = {
              disabled: record.name === "Disabled User", 
              name: record.name
            };
            return props;
          }
        };
      } else {
        return null;
      }
    }
  },
  mounted() {
    this.changeActionState();
    this.getAppliedList();
    this.getActionDesc();
  },
  methods: {
    //获取action列表事件
    getActionList() {
      this.getAppliedList();
    },
    // 调取已申请的api接口
    getAppliedList() {
      var data = {
        appid: this.$store.getters.appInfo.id,
        name: this.namelike,
        module: this.$route.query.code,
        serviceId: this.$route.query.serviceId,
        tag: this.actiontag,
        type: this.actionstate
      };
      appliedList(data)
        .then(res => {
          this.spinning = false;
          let result = res.result;
          if (result) {
            if (this.allow) {
              let array = [];
              result.forEach(item => {
                if (item.state != 0) {
                  array.push(item.id);
                }
              });
              this.apiSelectKeys = array;
              this.selectedRowKeys = [...this.apiSelectKeys];
            }
          }
          // 审核人员
          if (this.hasPermit("InterfaceAudit")) {
            let arr = result.devApiVos || [];
            this.data = arr.filter(function(item) {
              return item.selected == 1;
            });
          } else {
            // 开发人员
            this.data = result;
          }
        })
        .catch(err => {
          showError(err);
        });
    },
    //获取状态信息
    getActionDesc() {
      let data = {
        appid: this.$store.getters.appInfo.id,
        serviceid: this.$route.query.serviceId
      };
      serviceDesc(data)
        .then(res => {
          this.descform = res.result;
        })
        .catch(err => {
          showError(err);
        });
    },
    //重置
    resetsearch() {
      this.namelike = "";
      this.actiontag = "";
      this.changeActionState();
      this.getAppliedList();
    },

    // colors
    colors(state) {
      switch (state) {
        case 0:
          return "color:#999 !important";
        case 1:
          return "color:#faad14";
        case 2:
          return "color:#0dbc79";
        case 3:
          return "color:#0dbc79";
        case 4:
          return "color:#f5222d";
        default:
          return;
      }
    },
    //展示接口详细信息
    actionDetail(data) {
      this.actionData = data;
      this.actionVisible = true;
    },
    //下一步操作
    nextstep() {
      if (
        this.rowSelection.selectedRowKeys.sort().toString() ==
        this.apiSelectKeys.sort().toString()
      ) {
        showError({ message: "申请接口未改变或未勾选" });
        return;
      }
      this.form.validateFields((err, values) => {
        if (!err) {
          this.desc = values.desc;
          this.$emit("changeCurrent", 1);
        }
      });
    },
    //接口选择修改
    changeSelectedRow(selectedRowKeys) {
      this.selectedRowKeys = selectedRowKeys;
    },
    //接口状态值判断 从不同的页面跳转来赋不同的值
    // 从审核页面的已审核转入，显示已选择的接口
    //从审核页面待审核跳转展示 待审核接口
    //从修改页面跳转展示 已选择的接口、
    //从待申请展示所有接口
    changeActionState() {
      if (this.verifystate === 1) {
        this.actionstate = "1";
      } else if (this.verifystate === 0) {
        this.actionstate = "2";
      } else {
        if (this.allow) {
          this.actionstate = "0";
        } else {
          this.actionstate = "1";
        }
      }
    }
  }
};
</script>
<style lang='less' scoped>
  .body {
    width: 100%;
    height: 100%;
    .applytext {
      font-size: 16px;
      margin-bottom: 5px;
      margin-left: 5px;
    }
    .tools {
      display: flex;
      justify-content: flex-end;
      margin-bottom: 10px;
      .tsearch {
        margin: 0 10px;
        width: 160px;
      }
    }
    .nextstepdiv {
      width: 400px;
      margin: 0 auto;
      .nextstep {
        margin-top: 5px;
        width: 400px;
      }
    }
    p {
      margin-bottom: 0;
      .actionname {
        font-size: 15px;
      }
      .actiondetil {
        font-size: 10px;
        padding-top: 10px;
        color: @primary-color;
        cursor: pointer;
        margin-left: 10px;
      }
    }
    .input {
      border: none;
    }
  }
</style>