<template>
  <div>
    <!-- 机构职责 -->
    <div class="details-tree" v-if="list">
      <h4 style="margin-bottom: 10px; font-weight: 700">{{ title }}</h4>
      <ul v-for="(item, index) in dutieslist" :key="index" class="tree-ul">
        <!-- 第一层 -->
        <span class="tree-ul-li" style="font-weight: 700">{{
          item.type === 0 ? "三定" : "变更"
        }}</span>
        <li v-for="(i, inx) in item.result" :key="inx" class="tree-ul-s">
          <!-- 第二层 -->
          <span
            class="tree-ul-li"
            v-for="(t, tnx) in typearr"
            :key="tnx"
            v-show="i.type == t.value"
            >{{ t.text }}</span
          >
          <ul class="tree-ul-a">
            <!-- 第三层 -->
            <span
              class="tree-ul-span audiot_style"
              v-html="brightenKeyword(i.content)"
            ></span>
          </ul>
          <div class="ul-a-button">
            <a-button @click="watchDetails(i)">查看详情</a-button>
          </div>
        </li>
      </ul>
      <ul v-for="(c, cnx) in childrenlist" :key="cnx" class="tree-ul">
        <!-- 第一层 -->
        <span class="tree-ul-li" style="font-weight: 700">{{ c.orgname }}</span>
        <li
          v-for="(s, snx) in c.duties"
          :key="snx"
          class="tree-ul"
          style="margin-top: 10px"
        >
          <!-- 第二层 -->
          <span class="tree-ul-li">{{ s.type === 0 ? "三定" : "变更" }}</span>
          <ul v-for="(a, anx) in s.result" :key="anx" class="tree-ul-s">
            <!-- 第三层加组织图标 -->
            <span
              class="tree-ul-li"
              v-for="(p, pnx) in typearr"
              :key="pnx"
              v-show="a.type == p.value"
              >{{ p.text }}</span
            >
            <div class="ul-a-button" v-if="!a.children">
              <a-button @click="watchDetails(a)">查看详情</a-button>
            </div>
            <li class="tree-ul-a">
              <!-- 第四层 -->
              <span
                class="tree-li-span audiot_style"
                v-html="brightenKeyword(a.content)"
              ></span>
            </li>
            <div class="ul-a-button" v-if="a.children">
              <a-button @click="watchDetails(a)">查看详情</a-button>
            </div>
          </ul>
        </li>
      </ul>
    </div>
    <!-- 权力清单 -->
    <div class="details-tree" v-if="list.node">
      <ul
        v-for="(item, idex) in list.node"
        :key="idex"
        :style="item.children ? '' : 'width: 90%;min-height: 32px;'"
        :class="item.children ? 'tree-ul' : 'tree-ul-s tree-ul'"
      >
        <span class="tree-ul-li" style="font-weight: 700">{{
          item.title
        }}</span>
        <div class="ul-a-button" v-if="!item.children" style="float: right">
          <a-button @click="watchDetails">查看详情</a-button>
        </div>
        <li v-for="(i, inx) in item.children" :key="inx" class="tree-ul-s">
          <span class="tree-ul-li">{{ i.title }}</span>
          <div class="ul-a-button">
            <a-button @click="watchDetails(i)">查看详情</a-button>
          </div>
        </li>
      </ul>
    </div>
    <!-- 定岗定员定责 -->
    <div class="details-tree" v-if="list.tree">
      <ul
        v-for="(item, inex) in list.tree"
        :key="inex"
        :style="item.children ? '' : 'width: 90%;min-height: 32px;'"
        :class="item.children ? 'tree-ul' : 'tree-ul-s tree-ul'"
      >
        <!-- 第一层 -->
        <span class="tree-ul-li" style="font-weight: 700"
          >【{{ item.title }}】</span
        >
        <div class="ul-a-button" v-if="!item.children" style="float: right">
          <a-button>查看详情</a-button>
        </div>
        <li
          v-for="(s, snx) in item.children"
          :key="snx"
          :class="!s.children ? 'tree-ul' : 'tree-ul-s'"
          :style="
            s.children
              ? 'margin-top: 10px;'
              : 'width: 90%;min-height: 32px;margin-top: 10px;'
          "
        >
          <!-- 第二层 -->
          <span class="tree-ul-li">{{ s.title }}</span>
          <div class="ul-a-button" v-if="!s.children" style="float: right">
            <a-button>查看详情</a-button>
          </div>
          <ul
            v-for="(a, anx) in s.children"
            :key="anx"
            :class="s.children ? 'tree-ul' : 'tree-ul-s'"
            :style="
              s.children
                ? 'margin-top: 10px;min-height: 32px;'
                : 'width: 90%;min-height: 32px;margin-top: 10px;'
            "
          >
            <!-- 第三层 -->
            <span class="tree-ul-li">{{ a.title }}</span>
            <div class="ul-a-button" v-if="s.children">
              <a-button>查看详情</a-button>
            </div>
          </ul>
        </li>
      </ul>
    </div>
    <a-modal
      title="查看详情"
      :visible="visible"
      @cancel="close"
      :footer="null"
      v-if="detailsData"
      width="800px"
      :bodyStyle="{ padding: '15px', height: '500px', overflow: 'auto' }"
    >
      <div class="detailsmodal">
        <div class="details-top">
          <div>
            <p class="pcss" :title="detailsData.documentVo.title">
              <span>相关文件：</span>
              {{ detailsData.documentVo.title }}
            </p>
            <span style="color: #c9c9c9">
              <span style="margin-right: 20px">{{
                detailsData.documentVo.num
              }}</span>
              <span>{{ detailsData.documentVo.dispatchdate }}</span>
            </span>
          </div>
          <a-button @click="downloadFile(detailsData.documentVo.fileuri)"
            >下载文件</a-button
          >
        </div>
        <div>
          <span
            v-for="(e, enx) in typearr"
            :key="enx"
            v-show="detailsData.documentVo.type == e.value"
            >{{ e.text }}:</span
          >
          <p
            v-html="transformationContent(detailsData.content)"
            style="line-height: 25px"
          ></p>
        </div>
      </div>
    </a-modal>
  </div>
</template>
<script>
import { Input, Icon, Button, Empty, Modal } from "ant-design-vue";
import { getorgfuncdesc } from "@/person-shaoxing/api/analysis";
import { download } from "@/framework/api/file";
export default {
  name: "",
  components: {
    AIcon: Icon,
    AButton: Button,
    AModal: Modal,
  },
  props: ["list", "title", "inputvalue","typearr"],
  data() {
    return {
      visible: false,
      detailsData: null,
    };
  },
  computed: {
    dutieslist() {
      let value = [];
      this.list.forEach(function (item) {
        value = item.duties;
      });
      return value;
    },
    childrenlist() {
      let value = [];
      this.list.forEach(function (item) {
        value = item.children;
      });
      return value;
    },
  },
  created() {
  },
  methods: {
    //判断搜索记录是否包含某个关键字
    brightenKeyword(content) {
      // inputvalue为搜索框中的value
      let inputvalue = this.inputvalue;
      let index = content.indexOf(inputvalue);
      if (content.length < 250) {
        const Reg = new RegExp(inputvalue, "g");
        let res = "";
        res = content.replace(
          Reg,
          `<span style="color: #d60002;">${inputvalue}</span>`
        );
        return res;
      } else if (index < 20) {
        let newtext = content.slice(index, index + 125);
        let newcontent = `......${newtext}......`;
        const Reg = new RegExp(inputvalue);
        let res = "";
        res = newcontent.replace(
          Reg,
          `<span style="color: #d60002;">${inputvalue}</span>`
        );
        return res;
      } else {
        let newtext = content.slice(index - 15, index + 225);
        let newcontent = `......${newtext}......`;
        const Reg = new RegExp(inputvalue);
        let res = "";
        res = newcontent.replace(
          Reg,
          `<span style="color: #d60002;">${inputvalue}</span>`
        );
        return res;
      }
    },
    watchDetails(item) {
      this.visible = true;
      getorgfuncdesc(item.id).then((res) => {
        this.detailsData = res.result;
      });
    },
    close() {
      this.visible = false;
    },
    transformationContent(content) {
      //原始字符串
      let string = content;
      //替换所有的换行符
      string = string.replace(/\r\n/g, "<br>");
      string = string.replace(/\n/g, "<br>");
      string = string.replace(/(\r\n)|(\n)/g, "<br>");
      //替换所有的空格（中文空格、英文空格都会被替换）
      string = string.replace(/\s/g, " ");
      //输出转换后的字符串
      return string;
    },
    //下载文件
    downloadFile(fileuri) {
      if (fileuri) {
        download(fileuri);
      }
    },
  },
};
</script>
<style lang="less" scoped>
.details-tree {
  .tree-ul {
    margin-left: 30px;
    border-left: 1px dashed @primary-color;
    .titlecolor {
      color: @primary-color;
    }
    .tree-ul-s {
      min-height: 32px;
      width: 90%;
      border-left: 1px dashed @primary-color;
      margin: 10px 0px 0px 30px;
      .tree-ul-a {
        margin-left: @layout-space-base;
        width: 85%;
        display: inline-flex;
      }
      .ul-a-button {
        float: right;
        // margin: auto;
      }
    }
    // 竖线
    .tree-ul-li {
      position: relative;
      padding-left: 18px; // 缩进量
      //   border-left: 1px dashed @primary-color;
    }
    // 竖线
    .tree-ul-li::before {
      content: "";
      height: 100%;
      width: 1px;
      position: absolute;
      left: -1px;
      top: -12px;
      border-width: 1px;
      border-left: 1px dashed @primary-color;
    }
    // 当前层最后一个节点的竖线高度固定
    .tree-ul-li:last-child::before {
      height: 38px; // 可以自己调节到合适数值
    }
    // 横线
    .tree-ul-li::after {
      content: "";
      // width: 24px;
      width: 16px;
      height: 20px;
      position: absolute;
      left: 0px;
      top: 10px;
      border-width: 1px;
      border-top: 1px dashed @primary-color;
    }
    //去掉最下面的虚线
    &:last-child {
      border-left: 1px dashed white;
    }
    .tree-ul-s {
      &:last-child {
        border-left: 1px dashed white;
      }
    }
  }
}
.detailsmodal {
  .details-top {
    display: flex;
    justify-content: space-between;
    margin-bottom: @layout-space-base;
    .pcss {
      width: 600px;
      overflow: hidden;
      margin: 0;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
  }
}
</style>