<template>
  <accordion-layout>
    <div slot="navTitle" class="nav-title">
      <a v-for="item in types" 
        :key="item.key"
        :class="{selected: filter.type == item.value}"
        @click="onTypeChange(item.value)"
      >{{item.text}}</a>
    </div>
    <div slot="nav" class="nav-panel">
      <div class="title">分析条件</div>
      <div class="header">
        <empty-data v-if="analyzeList && analyzeList.length == 0"/>
        <template v-if="subjects">
          <div class="label">主题</div>
          <ul>
            <li v-for="item in subjects" :key="item" 
              :class="{selected: filter.subject == item}"
              @click="filter.subject = item"
            >{{item}}</li>
          </ul>
        </template>
        <template v-if="scopetypes">
          <div class="label">范围</div>
          <ul>
            <li v-for="item in scopetypes" :key="item" 
              :class="{selected: filter.scopetype == item}"
              @click="filter.scopetype = item"
            >{{item}}</li>
          </ul>
        </template>
        <prop-value-form v-if="scope && scope.length" :properties="scope" class="scopes-select" ref="scopeData"/>
      </div>
      <div class="title">分析内容</div>
      <div class="body">
        <a-spin v-if="loading"/>
        <content-select v-else-if="content && content.length" 
          v-model="contentSelected"
          :content="content"
          class="content-select"
        />
        <empty-data v-else/>
      </div>
      <div class="footer">
        <a-button type="primary" style="width:100%" @click="doReport">确定</a-button>
      </div>
    </div>
    <div slot="content" class="content">
      <div class="header">
        <a-dropdown-button class="export" type="primary" :disabled="!docTree" size="small" @click="doExport('pdf')">
          <a-icon :type="exporting ? 'loading' : 'export'"/>导出
          <a-icon slot="icon" type="more"/>
          <a-menu slot="overlay" @click="doExport($event.key)">
            <a-menu-item key="pdf"><a-icon type="file-pdf" />导出PDF</a-menu-item>
            <a-menu-item key="word"><a-icon type="file-word" />导出Word</a-menu-item>
          </a-menu>
        </a-dropdown-button>
      </div>
      <div class="body">
        <!-- <div class="form-bg"> -->
          <div class="form-wrap">
            <div class="empty" v-if="!formConfig">请选择条件和内容生成分析报告</div>
            <template v-else> 
              <form-display ref="formDisplay"
                :formConfig="formConfig" 
                :formData="formData" 
                :showAnchor="false" 
                style="margin: 96px 120px"
                :bodyStyle="{padding: 0, overflow: 'unset'}"
              >
                <ant-chart slot="chart" slot-scope="props" v-bind="props"/>
                <report-template slot="template" slot-scope="props" v-bind="props" />
                <document-title slot="titleBar" slot-scope="props" v-bind="props"/>
              </form-display>
              <!-- <div class="loading-mask" v-if="contentCount > 0"></div> -->
            </template>
          </div>
          <!-- <a-spin v-if="formConfig && contentCount > 0" class="loading" size="large" tip="正在分析"/> -->
        <!-- </div> -->
      </div>
    </div>
  </accordion-layout>
</template>
<script>
import { Spin, Button, Select, Dropdown, Menu, Icon } from 'ant-design-vue'
import AccordionLayout from '@framework/components/AccordionLayout'
import EmptyData from '@framework/components/EmptyData'
import PropValueForm from '@person/components/PropValueForm'
import ContentSelect from './components/ContentSelect'
import FormDisplay from "@formdesign/views/FormDisplay";
import { components } from '@person/components/formdesign'
import { get } from "lodash";
import { showError } from '@framework/utils'
import {convertHtmlToFileAsync} from '@framework/api/file'
import { analysisquery, analysisscopequery, analysiscontentquery} from '@person/api/statistics'

export default {
  components: {
    AButton: Button,
    ASpin: Spin,
    ASelect: Select,
    ASelectOption: Select.Option,
    ADropdownButton: Dropdown.Button,
    AMenu: Menu,
    AMenuItem: Menu.Item,
    AIcon: Icon,
    AccordionLayout,
    EmptyData,
    PropValueForm,
    ContentSelect,
    FormDisplay,
    ...components,
  },
  data(){
    return {
      list: [],
      filter: {
        type: undefined,
        subject: undefined,
        scopetype: undefined,
      },
      loading: false,
      scope: undefined,//分析范围
      content: undefined,//分析内容
      contentSelected: [],
      formData: {},
      formConfig: undefined,
      docTree: undefined,
      exporting: false,
    }
  },
  created(){
    this.initData();
  },
  computed: {
    types(){
      let ts = this.$store.getters.dict('analyze.report.analyzetype');
      if(ts && ts.length > 3){//取前面3个
        return [ts[0], ts[1], ts[2]];
      }else{
        return ts
      }
    },
    analyzeList(){
      let { type, subject, scopetype } = this.filter;
      if(type){
        return this.list.filter(item => {
          return (item.type == type && (!subject || (item.subject == subject 
            && (!scopetype || item.scopetype == scopetype))));
        });
      }
    },
    subjects(){
      let { type } = this.filter; 
      if(type){
        let arr = [];
        this.list.forEach(item => {
          if(item.type == type){
            if(!arr.find(e => e == item.subject)){
              arr.push(item.subject);
            }
          }
        })
        this.filter.subject = arr[0];
        if(arr.length > 1){
          return arr;
        }
      }
    },
    scopetypes(){
      let { type, subject } = this.filter; 
      if(type && (subject || !this.subjects)){
        let arr = [];
        this.list.forEach(item => {
          if(item.type == type && (!subject || item.subject == subject)){
            if(!arr.find(e => e == item.scopetype)){
              arr.push(item.scopetype);
            }
          }
        })
        this.filter.scopetype = arr[0];
        if(arr.length > 1){
          return arr;
        }
      }
    },
    analyzeTarget(){
      if(this.analyzeList){
        if(this.analyzeList.length == 1){//列表只有一条数据时
          return this.analyzeList[0];
        }else{
          let { type, subject, scopetype } = this.filter; 
          if(type && subject && scopetype){//所有条件都选择了返回列表第一条
            return this.analyzeList[0];
          }
        }
      }
    }
  },
  watch: {
    analyzeTarget(analyze){
      this.contentSelected = [];
      this.docTree = undefined;
      this.formConfig = undefined;
      this.formData = {};
      if(analyze){
        this.loadScopeAndContent(analyze);
      }
    },
    types(types){
      if(!this.filter.type && types && types.length){
        this.filter.type = types[0].value;
      }
    },
  },
  methods:{
    initData(){
      if(this.types && this.types.length){
        this.filter.type = this.types[0].value;
      }
      analysisquery({}).then(({result}) => {
        this.list = result || [];
      }).catch(error => {
        showError(error);
      });
    },
    loadScopeAndContent(analyze){
      this.loading = true;
      Promise.all([
        analysisscopequery({analyzeid: analyze.id}),
        analysiscontentquery({analyzeid: analyze.id})
      ]).then(([scope, content]) => {
        this.scope = scope.result;
        this.content = content.result;
      }).catch(error => {
        showError(error);
      }).finally(() => {
        this.loading = false;
      })
    },
    onTypeChange(type){
      if(this.filter.type != type){
        this.filter = {type, subject: undefined, scopetype: undefined}
      }
    },
    async doReport(){
      if(!this.analyzeTarget){
        this.$message.info('请选择条件筛选分析模板');
        return;
      }
      if(this.loading){
        this.$message.info('正在加载分析内容，请稍后');
        return;
      }
      if(!this.content || !this.content.length){
        this.$message.info('该模板暂无可分析的内容');
        return;
      }
      if(this.contentSelected.length == 0){
        this.$message.info('请选择报告内容');
        return;
      }
      let data = {}, form = [];
      let scopeData = this.$refs.scopeData;
      if(scopeData){
        try{
          data = await scopeData.getFieldsValue();
        }catch(error){
          this.$message.info(error);
          return;
        }
      }
      let indexArr = [];
      this.contentSelected.forEach(id => {
        let c = this.content.find(item => item.id == id);
        if(c){
          indexArr.push(c.lindex);
        }
      });
      this.content.forEach(item => {
        let selected = indexArr.some(idx => item.lindex <= idx && idx < item.rindex);
        if(selected){
          if(item.form){
            form = [...form, ...JSON.parse(item.form)];
            if(item.data){
              data = Object.assign(data, JSON.parse(item.data));
            }
          }
        }
      });
      this.formData = data;
      this.docTree = this.getDocTree(form);
      this.formConfig = form;
    },
    getDocTree(form){//获取文档结构树，并将文档标题按规则添加序号
      let queue = [...form], path = [{level: 0, index: 0, children: []}];
      while(queue.length > 0){
        let item = queue.shift();
        if(item.type == 'titleBar'){//给标题添加序号
          let level = item.level >= 1 ? item.level : 1;//默认为1级标题
          let parent;//父节点
          for(let i = path.length - 1; i >= 0; i--){//根据标题级别查找父节点
            let node = path[i];
            if(node.level < level){
              parent = node;
              break;
            }else{
              path.pop();
            }
          }
          parent.index++;
          let ordinal = '';
          path.forEach(item => {
            ordinal += ordinal ? '.' + item.index : item.index;
          })
          item.name = ordinal + ' ' + item.name;
          let node = { level, title: item.name, index: 0, children: []};
          parent.children.push(node);
          path.push(node);
        }else if (item.type == "chart" || item.type == 'template') {
          path[path.length - 1].children.push(item);
        } else if (item.children) {//布局，循环布局内的组件
          for(let i = item.children.length - 1; i >= 0; i--){
            let child = item.children[i];
            if(child.components){
              queue = child.components.concat(queue);
            }
          }
        }
      }
      return path[0].children;
    },
    convertSheet(list, data, error = []){
      let sheets = [];
      list.forEach(item => {
        if(item.type == 'chart'){
          let c = get(data, item.code);
          if(c && c.image){
            sheets.push({
              title: get(c, 'settings.title'),
              showtitle: true,
              image: c.image
            })
          }else{
            error.push(item.name);
          }
        }else if(item.type == 'template'){
          let c = get(data, item.code);
          if(c && c.template){
            sheets.push({
              html: c.template
            })
          }else{
            error.push(item.name);
          }
        }else if(item.children){
          sheets.push({
            title: item.title,
            showtitle: true,
            children: this.convertSheet(item.children, data, error)
          });
        }
      })
      return sheets;
    },
    async doExport(type){
      if(this.exporting){
        this.$message.info('正在导出中，请稍后');
        return
      }
      try {
        this.exporting = true;
        let data = await this.$refs.formDisplay.submit();
        let error = [];
        let sheets = this.convertSheet(this.docTree, data, error);
        if(error.length){
          try {
            await new Promise((resolve, reject) => {
              this.$confirm({
                title: '提示',
                content: '部分内容正在加载或加载失败，确定导出？',
                onOk: () => {resolve()},
                onCancel: () => {reject()},
              })
            });
          } catch (error) {
            return;
          }
        }
        await convertHtmlToFileAsync({
          title: this.analyzeTarget.name,
          pagesize: 'A4',
          rotate: false,
          margins: [96, 120, 96, 120],
          children: sheets
        },false,type);
      } catch (error) {
        showError(error)
      } finally{
        this.exporting = false;
      }
    }
  }
}
</script>
<style lang="less" scoped>
.nav-title{
  min-width: 250px;
  display: flex;
  a{
    flex: 1 1 100%;
    line-height: 40px;
    text-align: center;
    color: @text-color;
    &:hover{
      color: @primary-color;
    }
    &.selected{
      color: @primary-color;
      font-weight: bold;
    }
  }
}
.nav-panel{
  min-width: 250px;
  height: 100%;
  display: flex;
  flex-direction: column;
  & > .title{
    line-height: 34px;
    background-color: #fafbfc;
    padding: 0 @content-padding-h;
    color: @primary-color;
  }
  & > .header{
    flex: 1 1 40%;
    padding: 0 @content-padding-h;
    overflow-y: auto;
    & > .label{
      line-height: 26px;
      &::after{
        content: ':';
      }
    }
    ul{
      margin: 0 -5px;
      line-height: 34px;
      li{
        display: inline-block;
        margin: 0 5px;
        padding: 0 8px;
        line-height: 24px;
        border: 1px solid @border-color-base;
        border-radius: @border-radius-base;
        cursor: pointer;
        &:hover{
          color: @primary-color;
          border-color: @primary-color;
        }
        &.selected{
          color: white;
          background-color: @primary-color;
          border-color: @primary-color;
        }
        &.selected:hover{
          border-color: lighten(@primary-color, 5%);
          background-color: lighten(@primary-color, 5%);
        }
      }
    }
    .scopes-select{
      /deep/ .ant-form-item-label{
        line-height: 26px;
      }
    }
  }
  & > .body{
    flex: 1 1 60%;
    overflow: hidden auto;
    position: relative;
    .ant-spin{
      position: absolute;
      top: 38%;
      left: 50%;
      margin-left: -10px;
      margin-top: -12px;
    }
  }
  & > .footer{
    flex: none;
    padding: @content-padding-v @content-padding-h;
  }
}
.content{
  position: relative;
  background-color: @white;
  border-radius: @border-radius-base;
  height: 100%;
  padding-top: 40px;
  & > .header{
    position: absolute;
    width: 100%;
    margin-top: -40px;
    line-height: 40px;
    padding: 0 @content-padding-h;
    text-align: right;
    z-index: 1;
    box-shadow: 0px 5px 10px -5px #dad9d9;
    .export /deep/.ant-dropdown-trigger{
      padding: 0 1px;
    }
  }
  & > .body{
    height: 100%;
    overflow-y: auto;
    background-color: #eee;
    background-image: url('../../../assets/img/analysis_watermark.png');
    // .form-bg{
    //   overflow: hidden;
    //   background-image: url('../../../assets/img/analysis_watermark.png');
    // }
    .form-wrap{
      width: 794px;
      min-height: 1123px;
      margin: 20px auto;
      box-shadow: 1px 1px 20px #dad9d9;
      background-color: @white;
      position: relative;
      overflow: hidden;
    }
    .empty{
      position: absolute;
      top: 30%;
      width: 100%;
      text-align: center;
      color: fade(@text-color-secondary, 25%);
      font-size: 1.6em;
    }
    // .loading-mask{
    //   position: absolute;
    //   z-index: 1000;
    //   top: 0;
    //   left: 0;
    //   width: 100%;
    //   height: 100%;
    //   text-align: center;
    //   background-color: inherit;
    // }
    // .loading{
    //   position: absolute;
    //   z-index: 1001;
    //   top: 38%;
    //   left: 50%;
    //   width: 100px;
    //   margin-left: -50px;
    //   padding: 12px 8px 8px 8px;
    //   text-align: center;
    //   background: fade(@background-color-base, 90%);
    //   box-shadow: 1px 1px 10px #dad9d9;
    //   border-radius: @border-radius-base;
    // }
  }
}
</style>