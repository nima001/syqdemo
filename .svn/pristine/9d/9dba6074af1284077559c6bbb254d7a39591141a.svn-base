<template>
  <div class="settings">
    <a-collapse v-model="activeKey" :bordered="false" style="background-color:unset;" v-if="chartData.settings.chartType=='table'">  
      <a-collapse-panel class="table-setting" key="5" header="表格">
        <TableSetting v-model="chartData" v-bind="$attrs" v-on="$listeners"/>
      </a-collapse-panel>
    </a-collapse>
    <a-collapse v-model="activeKey" :bordered="false" style="background-color:unset;" v-else>
      <a-collapse-panel key="8" header="标题">
        <TitleSetting v-model="chartData" v-bind="$attrs" v-on="$listeners"/>
      </a-collapse-panel>
      <div class="tip-setting">
        <span>提示</span>
        <a-switch @click="(check,e)=>{e.stopPropagation()}" v-model="chartData.settings.tooltip.visible"/>
      </div>
      <!--图例配置-->
      <LegendSetting v-model="chartData" v-bind="$attrs"/>
      <!--x轴配置-->
      <XaxiSetting  v-model="chartData"/>
      <!--y轴配置-->
      <YaxiSetting  v-model="chartData"/>
      <!--图形属性-->
      <GraphicProperties v-model="chartData" v-bind="$attrs"/>
      <!--数据操作-->
      <DataOperation v-model="chartData" v-bind="$attrs"/>
    </a-collapse>
  </div>
</template>

<script>
import { Collapse, Switch, Modal, Input } from 'ant-design-vue'
import CustomIcon from "@/framework/components/CustomIcon";
import TableSetting from './TableSetting';
import TitleSetting from './TitleSetting';
import LegendSetting from './LegendSetting';
import XaxiSetting from './XaxiSetting';
import YaxiSetting from './YaxiSetting';
import DataOperation from './DataOperation';
import GraphicProperties from './GraphicProperties';
import Tags from '@framework/components/Tags';
import ColorPicker from './ColorPicker';
import ButtonRadio from './ButtonRadio';

export default {
  props: {
    value: {
      type: Object
    },
  },
  components: {
    Tags,
    CustomIcon,
    XaxiSetting,
    YaxiSetting,
    TableSetting,
    TitleSetting,
    LegendSetting,
    AInput: Input,
    DataOperation,
    AModal: Modal,
    ASwitch: Switch,
    GraphicProperties,
    ACollapse: Collapse,
    ACollapsePanel: Collapse.Panel,
  },
  watch: {
    show: {
      immediate: true,
      handler(val){
        return val;
      }
    },
    chartData: {
      deep: true,
      handler(val) {
        this.$emit('input', val);
      }
    },
  },
  data() {
    return {
      show: false,
      colorActive: 0,
      activeKey: undefined,
      chartData: this.value,
    };
  },
  methods: {
    open(key){
      if(this.activeKey&&this.activeKey.length) {
        let index = this.activeKey.indexOf(key);
        if(index>=0) {
          this.activeKey.splice(index,1);
        }
      }
    },
    onTagChecked(field){
      let dom = this.$refs.titleInput.$el;
      if(dom.tagName != 'INPUT'){
        dom = dom.getElementsByTagName('input')[0];
      }
      let start = dom.selectionStart, end = dom.selectionEnd;
      let text = this.titleModel.value || '';
      this.titleModel.value = text.substr(0, start) + '${' + field.code + '}' + text.substr(end);
      this.$nextTick(() => {
        dom.setSelectionRange(start, start + field.code.length + 3);
        dom.focus();
      })
    },
  }
};
</script>
<style lang="less" scoped>
.settings {
    width: 100%;
    overflow-y: auto;
    user-select: none;
    .ant-collapse-item {
      min-height: 52px;
    }
    .tip-setting {
      height: 52px;
      padding: @padding-xs @padding-md @padding-xs 40px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid #e8e8e8;
    }
}
</style>
