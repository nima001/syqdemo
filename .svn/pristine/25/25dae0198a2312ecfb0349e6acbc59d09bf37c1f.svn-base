<!-- 接口管理>用户服务申请 -->
<template>
  <a-layout class="open-layout">
    <div class="body">
      <a-alert
        type="error"
        :message="faildesc"
        banner
        v-if="hasPermit('InterfaceApply') && $route.query.state == 4 && allow"
      />
      <div
        v-if="$route.query.state == 2 || $route.query.state == 3"
        class="succeed"
      >
        <p>接口地址</p>
        <p>{{ $route.query.url }}</p>
      </div>
      <div>
        <article>
          <a-divider type="vertical" />
          <h5>用户信息</h5>
        </article>

        <p>请选择需要申请的用户信息</p>
        <!-- <div class="inquire">
          <div class="inps">
            <a-select v-model="searchVal" style="width:160px">
              <a-select-option value="0">全部</a-select-option>
              <a-select-option value="1">接口名称</a-select-option>
            </a-select>
            <a-input style="width: 160px;margin:0 10px" v-model="val" />
          </div>
          <a-button @click="search" type="primary">搜索</a-button>
          <a-button @click="reset">重置</a-button>
        </div> -->
        <a-spin tip="loading..." :spinning="spinning">
          <section class="UserService">
            <a-popover
              title="接口详情"
              placement="bottomLeft"
              v-for="item in data"
              :key="item.id"
            >
              <template slot="content">
                <ul class="apidetail">
                  <li>模块名称：{{ item.module }}</li>
                  <li>接口名称：{{ item.name }}</li>
                  <li>接口地址：{{ item.url }}</li>
                </ul>
              </template>
              <a-checkbox
                :class="{selected:item.selected == 1 && item.checked == true}"
                :disabled="hasPermit('InterfaceAudit') || allow"
                :value="item.code"
                v-model="item.checked"
                @change="handleChange"
                >{{ item.name }}</a-checkbox
              >
            </a-popover>
          </section>
        </a-spin>
      </div>

      <div>
        <article>
          <a-divider type="vertical" />
          <h5>申请说明</h5>
        </article>
        <a-form :form="form">
          <a-form-item>
            <a-textarea
              :rows="4"
              :readOnly="allow"
              v-decorator="[
                'desc',
                {
                  rules: [{ required: true, message: '请输入申请说明' }],
                  initialValue: desc,
                },
              ]"
            />
          </a-form-item>
        </a-form>
      </div>

      <a-button @click="back">返回</a-button>
      <a-button
        type="primary"
        @click="modify"
        v-if="hasPermit('InterfaceApply') && $route.query.state != 0"
        >{{ bar }}</a-button
      ><a-button
        type="primary"
        @click="apply"
        v-if="hasPermit('InterfaceApply') && $route.query.state == 0"
        >申请</a-button
      >
      <a-button
        type="primary"
        class="agree"
        :disabled="$route.query.state == 2 || $route.query.state == 3"
        @click="agreedApply"
        v-if="hasPermit('InterfaceAudit')"
        ><a-icon type="check" />同意申请</a-button
      >
      <a-button
        type="danger"
        @click="refuseApply"
        :disabled="$route.query.state == 2 || $route.query.state == 3"
        v-if="hasPermit('InterfaceAudit')"
        ><a-icon type="close" />拒绝申请</a-button
      >
    </div>
    <a-modal
      :centered="true"
      v-model="refuseVisible"
      :footer="null"
      :bodyStyle="{ padding: '15px' }"
    >
      <a-form :form="refusedForm">
        <a-form-item label="拒绝说明">
          <a-textarea
            :rows="4"
            v-decorator="[
              'faildesc',
              {
                rules: [{ required: true, message: '请输入拒绝说明' }],
              },
            ]"
          />
        </a-form-item>
        <div class="refused">
          <a-button type="danger" style="margin-right: 20px" @click="confirm"
            >确认</a-button
          >
          <a-button type="danger" @click="cancel">取消</a-button>
        </div>
      </a-form>
    </a-modal>
  </a-layout>
</template>

<script>
import {
  Layout,
  Button,
  Divider,
  Popover,
  Checkbox,
  Input,
  Form,
  Modal,
  Select,
  Icon,
  Spin,
  Alert,
  notification,
} from "ant-design-vue";
import {
  apiList,
  apiDetail,
  apiApply,
  appliedList,
  apiModify,
  apiVerify,
  apiVerifyList,
} from "../../api/service";
import { showError } from "../../../framework/utils";
export default {
  data() {
    return {
      bar: this.$route.query.state == 0 ? "申请" : "修改",
      form: this.$form.createForm(this),
      refusedForm: this.$form.createForm(this),
      data: [],
      // 输入框数据
      val: "",
      desc: "",
      // 下拉数据
      searchVal: "0",
      pagenum: 1,
      pagesize: 10,
      // 选中的选项集合
      checkList: [],
      // 是否允许修改禁用状态
      allow: false,
      // 勾选的列表
      apiIdList: [],
      // 拒绝申请时的弹框
      refuseVisible: false,
      spinning: true,
      // 失败原因
      faildesc: "",
    };
  },
  created() {
    // 审核人员进入
    if (this.hasPermit("InterfaceAudit")) {
      this.allow = true;
      this.getVerifyList(this.$route.query.code);
      // 开发人员修改进入
    } else if (
      this.$route.query.state !== 0 &&
      this.hasPermit("InterfaceApply")
    ) {
      this.getAppliedList(this.$route.query.code);
      this.allow = true;
    } else {
      this.getServiceApi(this.$route.query.code);
    }
  },
  methods: {
    // 修改申请接口
    modify() {
      if (this.allow == true) {
        this.allow = false;
        this.bar = "申请";
      } else {
        this.handleChange();
        if (this.apiIdList.length < 1) {
          showError({ message: "请至少勾选一项接口" });
          return;
        }
        this.form.validateFields((err, values) => {
          if (!err) {
            var data = {
              apiIdList: this.apiIdList,
              appId: this.$store.getters.appInfo.id,
              serviceId: this.$route.query.serviceId,
              desc: values.desc,
            };
            apiModify(data).then((res) => {
              this.$notification.success({
                message: "提示",
                description: "修改成功",
                duration: 1.5,
              });
            });
            setTimeout(() => {
              this.$router.push("/dev/manageapp");
            }, 2000);
          }
        });
      }
    },
    // 审核人员查看接口
    getVerifyList(code) {
      var data = {
        id: this.$store.getters.appInfo.id,
        pagenum: this.pagenum,
        pagesize: this.pagesize,
        module: code,
        serviceId: this.$route.query.serviceId,
      };
      apiVerifyList(data)
        .then((res) => {
          res.result.devApiVos &&
            res.result.devApiVos.forEach((item) => {
                item.checked = true;
            });
          this.data = res.result.devApiVos;
          this.spinning = false;
          this.desc = res.result.desc;
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 调取已申请的api接口
    getAppliedList(code) {
      var data = {
        id: this.$store.getters.appInfo.id,
        pagenum: this.pagenum,
        pagesize: this.pagesize,
        needtotal: true,
        module: code,
        serviceId: this.$route.query.serviceId,
      };
      appliedList(data)
        .then((res) => {
          this.spinning = false;
          res.result.devApiVos &&
            res.result.devApiVos.forEach((item) => {
              if (item.selected == 1) {
                item.checked = true;
              } else {
                item.checked = false;
              }
            });
          this.faildesc = res.result.faildesc;
          this.data = res.result.devApiVos;
          this.desc = res.result.desc;
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 调取所有接口
    getServiceApi(code) {
      var data = {
        needtotal: true,
        pagenum: this.pagenum,
        pagesize: this.pagesize,
        module: code,
      };
      apiList(data)
        .then((res) => {
          this.spinning = false;
          res.result.rows &&
            res.result.rows.forEach((item) => {
              item.checked = false;
            });
          this.data = res.result;
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 状态
    handleChange(e) {
      this.apiIdList = [];
      this.checkList = this.data.filter((item) => {
        return item.checked;
      });
      this.checkList.forEach((item) => {
        this.apiIdList.push(item.id);
      });
    },
    // 同意申请
    agreedApply() {
      var data = {
        faildesc: "",
        appid: this.$store.getters.appInfo.id,
        serviceId: this.$route.query.serviceId,
        state: 1,
      };
      apiVerify(data)
        .then((res) => {
          this.$notification.success({
            message: "提示",
            description: "审核完成",
            duration: 1.5,
          });
          setTimeout(() => {
            this.$router.push("/dev/manageapp");
          }, 2000);
        })
        .catch((err) => {
          showError(err);
        });
    },
    // 拒绝申请弹框
    refuseApply() {
      this.refuseVisible = true;
    },
    // 拒绝确认
    confirm() {
      this.refusedForm.validateFields((err, values) => {
        if (!err) {
          var data = {
            faildesc: values.faildesc,
            appid: this.$store.getters.appInfo.id,
            serviceId: this.$route.query.serviceId,
            state: 0,
          };
          apiVerify(data)
            .then((res) => {
              this.$notification.success({
                message: "提示",
                description: "审核完成",
                duration: 1.5,
              });
              this.refuseVisible = false;
              setTimeout(() => {
                this.$router.push("/dev/manageapp");
              }, 2000);
            })
            .catch((err) => {
              showError(err);
            });
        }
      });
    },
    // 关闭拒绝弹框
    cancel() {
      this.refuseVisible = false;
    },
    // 搜索
    search() {
      this.getServiceApi(this.$route.query.code);
    },
    //重置
    reset() {
      (this.val = ""), (this.searchVal = "0");
      this.getServiceApi(this.$route.query.code);
    },
    // 申请
    apply() {
      if (this.apiIdList.length < 1) {
        showError({ message: "请至少勾选一项接口" });
        return;
      }
      this.form.validateFields((err, values) => {
        if (!err) {
          var data = {
            apiIdList: this.apiIdList,
            appId: this.$store.getters.appInfo.id,
            serviceId: this.$route.query.serviceId,
            desc: values.desc,
          };
          apiApply(data).then((res) => {
            this.$notification.success({
              message: "提示",
              description: "申请已提交，待审核",
              duration: 1.5,
            });
          });
          setTimeout(() => {
            this.$router.push("/dev/manageapp");
          }, 2000);
        }
      });
    },
    // 返回
    back() {
      this.$router.push("/dev/manageapp");
    },
  },

  components: {
    ALayout: Layout,
    ADivider: Divider,
    AButton: Button,
    ACheckbox: Checkbox,
    AInput: Input,
    ATextarea: Input.TextArea,
    ASelect: Select,
    ASelectOption: Select.Option,
    AIcon: Icon,
    APopover: Popover,
    AForm: Form,
    AFormItem: Form.Item,
    AModal: Modal,
    ASpin: Spin,
    AAlert: Alert,
  },
};
</script>
<style lang="less" scoped>
.open-layout {
  padding: 10px;
  height: 100%;
  .body {
    width: 100%;
    height: 100%;
    padding: 8px 10%;
    margin: 0 auto;
    overflow-y: auto;
    background: #fff;
    .faildesc {
      margin: 10px 0;
      color: red;
    }
    .succeed {
      padding: 15px 10px;
      margin: 5px 0;
      background-color: #f6f6f6;
      color: #171717;
    }
    .apidetail {
      li {
        line-height: 1.5;
        font-size: 14px;
        color: #666;
      }
    }
    > div {
      margin-top: 30px;
      section {
        min-height: 10vh;
        max-height: 30vh;
        overflow-y: auto;
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        .selected {
          /deep/.ant-checkbox-checked .ant-checkbox-inner {
            background: #0dbc79;
            border-color: #0dbc79;
          }
        }
      }
      .inquire {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        height: 60px;
        margin-bottom: 14px;
        .ant-btn {
          margin-top: 0;
          width: 60px;
          height: 32px;
          margin-right: 13px;
        }
        .inps {
          display: flex;
          justify-content: flex-end;
          width: 100%;
        }
      }
    }
    .ant-btn {
      margin-top: 30px;
      margin-right: 30px;
    }
    article {
      display: flex;
      h5 {
        color: @primary-color;
        font-size: 18px;
        margin-bottom: 30px;
      }
      .ant-divider {
        width: 3px;
        height: 20px;
        background-color: @primary-color;
        margin-top: 5px;
      }
    }
    .ant-checkbox-wrapper {
      padding: 10px;
      margin: 0 15px 15px 0;
      width: 190px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      background-color: #f6f6f6;
    }
    .agree {
      color: #0dbc79;
      background: #f5f5f5;
      border: 1px solid #f5f5f5;
      &:hover {
        color: #fff;
        background: #0dbc79;
        border: 1px solid #0dbc79;
      }
    }
  }
}
</style>
