<template>
  <div class="data-table">
    <h2 v-if="mainTitle.visible!==false" :style="{ textAlign: position||'center' }" v-html="mainTitle.value"/>
    <h3 v-if="subTitle.visible!==false" :style="{ margin: 0, textAlign: position||'center' }" v-html="subTitle.value"/>
    <a-table
      :columns="columns"
      :rowKey="(row)=>row.k0"
      :bordered="settings.table.bordered"
      :dataSource="dataSource"
      :pagination="dataSource.length<20?false:true"
    />
  </div>
</template>
<script>
import { Table } from 'ant-design-vue'
import { cloneDeep, has, map, reduce, assign } from 'lodash';
import BaseMixin from "@person/components/chart/BaseMixin"

/**
 * 统计数据表
 */
export default {
  icon: 'table',
  components: {
    ATable: Table,
  },
  mixins: [BaseMixin],
  data() {
    return {
      valueCol: [],
    }
  },
  watch: {
    'settings.table.sumPosition': {
      deep: true,
      handler(val,old) {
        return val;
      }
    }
  },
  computed: {
    position() {
      if(this.settings.title&&this.settings.title.position) {
        let { position } = this.settings.title;
        return position;
      }else{
        return undefined
      }
    },
    mainTitle() {
      if(this.settings.title&&this.settings.title.main) {
        let { main } = this.settings.title;
        if(!main) {
          return  {
            visible: true,
            value: undefined,
          }
        }
        if(!has(main,'visible')) {
          main.visible = true;
        }
        return main;
      }else{
        return {
          main: {
            visible: true,
            value: undefined,
          }
        }
      }
    },
    subTitle() {
      if(this.settings.title&&this.settings.title.sub) {
        let { sub } = this.settings.title;
        if(!sub) {
          return  {
            visible: true,
            value: undefined,
          }
        }
        if(!has(sub,'visible')) {
          sub.visible = true;
        }
        return sub;
      }else{
        return {
          sub: {
            visible: true,
            value: undefined,
          }
        }
      }
    },
    columns(){
      if(!this.data){
        return [];
      }
      let that = this;
      function convert(cols){
        if(cols){
          return cols.map(item => ({
            title: item.showname, 
            align: 'center', 
            dataIndex: item.column,
            customCell: that.customCell,
            filters: [
              {
                text: '只显示有值行',
                value: 0
              }
            ],
            sorter: (a, b) => {
              if(a.k0!='合计'&&b.k0!='合计') {
               return a[item.column]-b[item.column];
              }
            },
            onFilter: (value, record) => {
              return record[item.column]!==0;
            },
            // onFilter: (value, record) => record.address.indexOf(value) === 0,
            customHeaderCell: that.customHeaderCell,
            children: convert(item.columns),
          }))
        }
      }
      let {keyCols = [], valueCols = []} = this.data;
      return [
         ... keyCols.map(item => ({
          title: item.showname, 
          dataIndex: item.column,
          customCell: this.customCell,
          customHeaderCell: this.customHeaderCell,
        })),
        ... convert(valueCols)
      ]
    },
    dataSource(){
      let dataSource = cloneDeep(this.data);
      this.valueCol = map(dataSource.valueCols, 'column');
      let sum = {};
      if(dataSource&&dataSource.rows) {
        //计算总数
        this.valueCol.forEach((item)=> {
          //处理空值
          map(dataSource.rows, (row)=>{
            if(!row[item]) {
              row[item] = 0;
            }
          });
          //计算
          let total = reduce(dataSource.rows, (sum, n)=>{
            return sum+n[item];
          },0);
          let rowTotal = {};
          rowTotal.k0 = '合计';
          rowTotal[item] = total;
          assign(sum, rowTotal)
        })
        if(this.settings.table.sumPosition===1) {//顶部显示合计
          dataSource.rows.unshift(sum);
        }else if(this.settings.table.sumPosition===0){//底部显示合计
          dataSource.rows.push(sum);
        }
        return dataSource && dataSource.rows;
      }
    }
  },
  methods: {
    customCell(record, index) {
      return {
        style: {
          'background-color': this.settings.table.bodyBackgroundColor,
          'padding': `${this.settings.table.lineHeight}px`,
          'color': this.settings.table.bodyColor,
        },
      }
    },
    customHeaderCell(record, index) {
      return {
        style: {
          'background-color': this.settings.table.headBackgroundColor,
          'padding': `${this.settings.table.lineHeight}px`,
          'color': this.settings.table.headColor,
        },
      }
    },
  }
}
</script>
<style lang="less" scoped>
/deep/.ant-table-thead {
  tr:not(:last-child)>th {
    border-bottom: 1px solid #e8e8e8;
  }
  th {
    border-right: 1px solid #e8e8e8;
    &:last-child {
      // border-right: none;
    }
  }
}
</style>