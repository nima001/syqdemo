 <template>
  <div class="account-detail" ref="accountDetail">
    <div class="accountlist">
      <div class="top">
        <div class="left">
          <a-button><a-icon type="upload"/>导出</a-button>
        </div>
        <div class="right">
          <a-select v-if="nodeid" class="search-item scope" v-model="choice">
            <a-select-option :value="1">本级</a-select-option>
            <a-select-option :value="2">包含下级</a-select-option>
          </a-select>
          <dict-select dict="idm.account.authlevel"
             v-model="properties.authlevel"
             placeholder="账号类型"
             allowClear
             class="search-item"
          />
          <dict-select dict="idm.account.status"
             v-model="properties.status"
             placeholder="账号状态"
             allowClear
             class="search-item"
          />
          <a-input
            class="inputBox"
            placeholder="请输入姓名/邮箱/手机/身份证号查询"
            style="width: 300px"
            allowClear
            v-model="keyWord"
          />
          <a-button class="searchBt" type="primary" @click="onSearch">搜索</a-button>
        </div>
      </div>
      <a-table
        class="per-table"
        rowKey="_id"
        :columns="columns"
        :dataSource="pagination.rows"
        :rowClassName="(row) => pagination.selected && pagination.selected._id == row._id ? 'selected': ''"
        :customRow="customRow"
        :pagination="false"
        :loading="loading"
      >
        <!--<div class="table-tr" slot="loginname" slot-scope="record">
          <custom-icon type="user" :object="record" class="icon" />
          {{record.loginname}}
        </div>-->

        <template slot="operation" slot-scope="text, record, index">
          <div class="editable-row-operations">
            <span>
              <a @click="() => edit(record.key)">查看详情</a> <!--:disabled="editingKey !== ''"-->
            </span>
            <span>
              <a @click="() => edit(record.key)">重置密码</a> <!--:disabled="editingKey !== ''"-->
            </span>
            <span>
              <a @click="() => edit(record.key)">注销</a> <!--:disabled="editingKey !== ''"-->
            </span>
            <span>
              <a @click="() => edit(record.key)">排序</a> <!--:disabled="editingKey !== ''"-->
            </span>
          </div>
        </template>
      </a-table>
      <div class="footer">
        <a-pagination
                v-if="pagination.rows && pagination.rows.length"
                showSizeChanger
                :showTotal="total => `总共：${total}人`"
                @showSizeChange="onShowSizeChange"
                :total="pagination.total"
                :pageSize="pagination.pagesize"
                v-model="pagination.pagenum"
                @change="onPageChange"
        />
      </div>
    </div>
  </div>
</template>
<script>
import { Row, Col, Button, Select, Input, Table, Pagination, Modal, Icon } from "ant-design-vue";
import DictSelect from "@/framework/components/DictSelect";
import CustomIcon from "@/framework/components/CustomIcon";
import TaskProgress from "@/framework/components/TaskProgress";
import { accountquery, deptaccountquery } from "@/idm/api/account";

export default {
  props: ["org", "nodeid", "treeid"],
  components: {
    ARow: Row,
    ACol: Col,
    AButton: Button,
    ASelect: Select,
    ASelectOption: Select.Option,
    AInput: Input,
    ATable: Table,
    APagination: Pagination,
    AModal: Modal,
    AIcon: Icon,
    CustomIcon,
    DictSelect,
    TaskProgress
  },
  data(){
    return {
      columns: [
        { title: "序号", width: "45px", customRender: this.indexRender },
        { title: "用户名", width: "110px", dataIndex: "loginname", scopedSlots: { customRender: "loginname" } },
        { title: "姓名", width: "110px", dataIndex: "username", scopedSlots: { customRender: "username" } },
        { title: "手机号码", width: "110px", dataIndex: "mobilephone", scopedSlots: { customRender: "mobilephone" } },
        { title: "所在组织", width: "110px", scopedSlots: { customRender: "orgid" } },
        { title: '操作', width: "110px", dataIndex: 'operation', scopedSlots: { customRender: 'operation' } },
      ],
      loading: false,
      nowTab: undefined,
      choice: 1,
      properties: {},
      keyWord: undefined,
      pagination: {
        selected: undefined,
        rows: null,
        pagesize: 20,
        pagenum: 1,
        total: 0
      },
    }
  },
  created() {
    this.getAccount(this.pagination);
  },
  methods: {
    customRow(row){
      return {
        on: {
          click: () => {
            this.$set(this.pagination, 'selected', row);
          },
          dblclick: (event) => {
            this.$router.push({name: 'orgUserInfo', query: { userid: row._id }});
          },
        }
      };
    },
    indexRender(text, row, index){
      let p = this.pagination;
      return (p.pagenum - 1) * p.pagesize + index + 1;
    },
    onPageChange(pagenum, pagesize) {
      this.getAccount({pagesize, pagenum});
    },
    onShowSizeChange(current, pagesize) {
      this.getAccount({pagesize, pagenum: 1});
    },
    onSearch() {
      let {pagesize} = this.pagination
      this.getAccount({pagesize, pagenum: 1});
    },
    getParams(page) {
      if (this.nodeid) {
        const params = {
          treeid: this.treeid,
          nodeid: this.nodeid,
          needtotal: true,
          searchkey: this.keyWord,
          properties: this.properties,
          ...page,
        };
        if (this.choice == 1) {
          params.orgid = this.org._id;
        }
        return params;
      } else {
        const params = {
          orgid: this.org._id,
          ...page,
          needtotal: true,
          searchkey: this.keyWord,
          properties: this.properties
        };
        return params;
      }
    },
    getAccount(page) {
      if (!this.org) {
        return;
      }
      this.loading = true;
      let request;
      if(this.nodeid) {
        request = accountquery(this.getParams(page));
      }else{
        request = deptaccountquery(this.getParams(page));
      }
      request.then(({result}) => {
        this.pagination = result;
        result.rows.forEach(element => {
          //console.log(element);

        });
        this.loading = false;
      }).catch(error => {
        this.pagination = {};
        this.loading = false;
        showError(error);
      });
    },
  }
};
</script>
<style lang="less" scoped>
.account-detail {
  height: 100%;
  flex-direction: column;
  display: flex;
  .top-btn {
    width: 100%;
    height: auto;
    padding: @content-padding-v @content-padding-h;
    background-image: linear-gradient(to right, #fcfcfc, @primary-1);
    .topbtn {
      cursor: pointer;
      height: 26px;
      line-height: 26px;
      padding: 0 14px;
      float: left;
      border-radius: 3px;
      margin-right: 5px;
      &:hover {
        background-color: @primary-1;
        color: @primary-color;
      }
      &.act-btn {
        background-color: @primary-2;
        color: @primary-color;
      }
    }
  }
  .accountlist {
    flex: auto;
    min-height: 0;
    display: flex;
    flex-direction: column;
    .top {
      padding: @content-padding-v/2 @content-padding-h @content-padding-v @content-padding-h;
      .left {
        float: left;
        margin-top: @content-padding-v/2;
        .ant-btn {
          margin-right: 10px;
          color: @primary-color;
          border-color: @primary-color;
        }
      }
      .right {
        margin-top: @content-padding-v/2;
        float: right;
        // line-height: 32px;
        .ant-select {
          margin-left: 5px;
        }
        .search-item {
          width: 180px;
          margin: 0 5px 0 0;
          &.scope {
            width: 100px;
          }
        }
        .searchBt {
          background-color: @primary-color;
          border: 0;
          color: @white;
          margin-left: 5px;
        }
      }
    }
    .per-table {
      flex-shrink: 1;
      min-height: 0;
      padding: 0 @content-padding-h;
      overflow-y: auto;
      /deep/table {
        table-layout: fixed;
        td,th {
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        td{
           padding: 2px 2px;
        }
        tr.selected{
          background: @primary-2;
        }
      } 
      .icon{
        width: 18px;
        height: 18px;
        padding: 1px;
      }
      .table-tr {
        cursor: pointer;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        .worstatus {
          width: 16px;
          height: 16px;
          display: inline-block;
        }
      }
      .editable-row-operations {
        span{
          margin: 0 10px;
        }
      }
    }
    .footer {
      padding: @content-padding-v @content-padding-h;
      .ant-pagination {
        float: right;
        margin-bottom: 10px;
      }
    }
  }
}

</style>