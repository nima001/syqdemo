<template>
  <div class="wrap">
    <div class="cell">
      <p class="title">人员调动概况</p>
      <ul class="list">
        <li class="item">
          <span class="icon" :style="{background:'#e0eafe'}">
            <custom-icon type="add"></custom-icon>
          </span>
          <span class="num">{{inTotal}}</span>
          <span class="desc">人员调入</span>
        </li>
        <li class="item">
          <span class="icon" :style="{background:'#fdedef'}">
            <custom-icon type="reduce"></custom-icon>
          </span>
          <span class="num">{{outTotal}}</span>
          <span class="desc">人员调出</span>
        </li>
        <li class="item">
          <span class="icon" :style="{background:'#dff8ee'}">
            <custom-icon type="add_reduce"></custom-icon>
          </span>
          <span class="num">{{inTotal - outTotal}}</span>
          <span class="desc">尽流入/出</span>
        </li>
      </ul>
    </div>
    <div class="cell">
      <p class="title">人员调动情况</p>
      <div class="chart" ref="chart"></div>
    </div>
  </div>
</template>
<script>
import CustomIcon from "@/framework/components/CustomIcon";
import { Chart } from "@antv/g2";
import { transferInfo } from "@/hall/api/usermanage";
import { mixins } from "@/hall/mixin/index";
import { showError } from "@/framework/utils/index";
export default {
  components: { CustomIcon },
  data() {
    return {
      svgType: ["add", "reduce", "add_reduce"],
      list: [],
      inTotal:0,
      outTotal: 0,
      chart: undefined
    };
  },
  mixins: [mixins],
  mounted() {
    this.getData(this.nodeData);
  },
  methods: {
    getData(nodeData) {
      this.inTotal = 0;
      this.outTotal = 0;
      if (nodeData && nodeData.id) {
        transferInfo(nodeData.id)
          .then(res => {
            this.list = this.formatter(res.result);
            this.draw(this.list);
          })
          .catch(err => {
            showError(err);
          });
      }
    },
    formatter(list) {
      let array = [];
      for (let i = 0; i < list.length; i++) {
        let item = list[i];
        this.inTotal += item.in;
        this.outTotal += item.out;
        let arr = [
          { time: item.time, type: "调入", value: item.in },
          { time: item.time, type: "调出", value: -item.out }
        ];
        array = [...array, ...arr];
      }
      return array;
    },
    draw(list) {
      if (this.chart) {
        this.chart.destroy();
      }
      const chart = new Chart({
        container: this.$refs.chart,
        autoFit: true
      });
      chart.data(list);
      chart.scale("value", {
        alias: "人数(位)"
      });
      chart.axis("time", {
        tickLine: null
      });
      chart.axis("value", {
        label: {
          formatter: text => {
            return text.replace(/(\d)(?=(?:\d{3})+$)/g, "$1,");
          }
        },
        title: {
          offset: 80,
          style: {
            fill: "#aaaaaa"
          }
        }
      });
      chart.legend({
        position: "top"
      });

      chart.tooltip({
        shared: true,
        showMarkers: false
      });
      chart.interaction("active-region");

      chart
        .interval()
        .adjust("stack")
        .position("time*value")
        .color("type", ["#6395f9", "#f2a5af"]);
      chart.render();
      this.chart = chart;
    }
  }
};
</script>
<style lang='less' scoped>
.wrap {
  width: 100%;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  min-height: 100%;
  .cell {
    padding: @content-padding-v @content-padding-h;
    background: @white;
    margin-top: @layout-space-base;
    border-radius: @border-radius-base;
    flex: 1;
    min-height: 280px;
    display: flex;
    flex-direction: column;
    &:first-child {
      margin-top: 0px;
    }
    .title {
      margin: 0px;
    }
    .list {
      margin: 0px;
      flex: 1;
      display: flex;
      justify-content: space-between;
      .item {
        display: flex;
        flex: 1;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        &::after {
          content: "";
          width: 1px;
          height: 40px;
          background: #d1dce9;
          position: absolute;
          right: 0px;
          top: 50%;
          transform: translateY(-50%);
        }
        &:last-child {
          &::after {
            width: 0px;
          }
        }
        .icon {
          width: 48px;
          height: 48px;
          border-radius: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          /deep/svg {
            width: 25px;
            height: 25px;
            border-radius: 0px;
          }
        }
        .num {
          padding: @padding-md 0px;
          font-size: 35px;
          font-weight: bold;
          color: #000;
        }
        .desc {
          color: #999;
          font-size: 16px;
        }
      }
    }
    .chart {
      flex: 1;
    }
  }
}
</style>