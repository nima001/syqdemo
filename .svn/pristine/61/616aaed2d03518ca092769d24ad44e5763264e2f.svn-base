<template>
  <div>
    <a-form-item 
      :label="field.desc"
      :required="!!field.require" 
      :validateStatus="validateStatus"
    >
      <a-input
        :value="propValue && propValue.name"
        :read-only="true"
        @click="showOrgSelect"
        @change="onNameChange($event.target.value)"
      >
        <a-icon slot="addonAfter" type="select" @click="showOrgSelect"/>
      </a-input>
    </a-form-item>
    <a-modal
      :footer="null"
      v-model="orgvisible"
      :width="500"
      :title="field.datasource == 'organization' ? '选择组织' : '选择用户'"
      :bodyStyle="{ height: '600px', padding: '0'}"
    >
      <org-user-select :mode="field.datasource == 'organization' ? 'org' : 'user'" 
        @finish="orgOk" 
      />
    </a-modal>
  </div>
</template>
<script>
import { Form, Input, Modal, Icon } from "ant-design-vue";
import get from 'lodash/get';
import set from 'lodash/set';
import OrgUserSelect from "@/framework/components/OrgUserSelect";

export default {
  props: {
    field: {
      type: Object
    },
    data: {
      type: Object,
      default: () => {}
    }
  },
  components: {
    AFormItem: Form.Item,
    AInput: Input,
    AModal: Modal,
    AIcon: Icon,
    OrgUserSelect
  },
  data() {
    return {
      code: this.field['name'],
      validateStatus: undefined,
      orgvisible: false,
      propValue: undefined
    }
  },
  created() {
    this.propValue = get(this.data, this.code);
  },
  methods: {
    validateField(obj){
      return new Promise((resolve, reject) => {
        this.validate((status) => {
          if(status == 'error'){
            reject({code:'form_validate_fail', message: '表单验证失败'});
          }else{
            if(status == 'success'){
              let org = {};
              org._id = this.propValue._id;
              org.name = this.propValue.name;
              //值undefined时设置为null 才会序列化 需要传key 服务器识别情况数据
              set(obj, this.code, this.propValue === undefined ? null : org);
            }
            resolve();
          }
        })
      });
    },
    validate(callback){
      let status = undefined;//error 验证失败 success成功
      //TODO 数据格式校验
      if(this.field.require && !this.propValue){
          status = 'error';
      }else{
          status = 'success';
      }
      this.validateStatus = status;
      if(callback){
        callback(status);
      }
    },
    onNameChange(value){
      if(!value){
        this.propValue = undefined;
      }
    },
    showOrgSelect() {
      this.orgvisible = true;
    },
    orgOk(type, list) {
      this.orgvisible = false;
      if (type == "ok" && list.length > 0) {
        this.propValue = list[0];
      }
    }
  }
};
</script>
<style lang="less" scoped>
.ant-form-item {
  margin-bottom: 0;
}
</style>