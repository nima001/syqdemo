<template>
  <div class="container">
    <a-modal
      title="附件管理"
      :width="800"
      :bodyStyle="{ height: '400px' }"
      :visible="filemanageModal"
      :destroyOnClose="true"
      @ok="handleOk"
      @cancel="handleCancel"
    >
      <a-spin :spinning="spinning">
        <div class="spin">
          <a-descriptions :column="1">
            <a-descriptions-item label="文件上传">
              <a-upload
                :multiple="true"
                :before-upload="beforeUpload"
                :showUploadList="false"
                @change="handleChange"
              >
                <a-button type="primary" ghost><a-icon type="upload" />上传</a-button>
              </a-upload>
            </a-descriptions-item>
            <a-descriptions-item label="选择文件">
              <a-button type="primary" ghost @click="showSelect">请选择已有文件</a-button>
            </a-descriptions-item>
            <a-descriptions-item label="文件删除">
              <ul v-if="annexList.length" class="list">
                <li
                  v-for="(item, index) in annexList"
                  :key="index"
                  @mouseover.prevent="() => (over = true)"
                  @mouseleave.prevent="() => (over = false)"
                >
                  <span :title="item.annexname">{{ index + 1 }}. {{ item.annexname }}</span>
                  <span :class="{ active: over }">
                    <a-icon type="download" title="下载" @click="downDoc(item)"/>
                    <a-icon type="delete" title="删除" @click="remove(item)"/>
                  </span>
                </li>
              </ul>
              <div class="emptycontent" v-else>暂无数据</div>
            </a-descriptions-item>
          </a-descriptions>
        </div>
      </a-spin>
    </a-modal>
    <a-modal
      :width="800"
      destroyOnClose
      :bodyStyle="{ height: '600px' }"
      title="已有文件列表"
      :visible="show"
      @ok="modalOk"
      @cancel="modalCancel"
    >
      <a-form :form="form" class="ant-advanced-search-form">
        <div class="box">
          <ul class="in-box">
            <li class="li-content">
              <div>
                <span class="name">发文时间：</span>
                <a-input-group compact style="top: 0">
                  <a-date-picker
                    placeholder="发文开始时间"
                    style="width: 50%"
                    v-model="startValue"
                    :disabled-date="disabledStartDate"
                  />
                  <a-date-picker
                    placeholder="发文结束时间"
                    style="width: 50%"
                    v-model="endValue"
                    :disabled-date="disabledEndDate"
                  />
                </a-input-group>
              </div>
            </li>
            <li class="li-content">
              <div>
                <span class="name">关键字:</span>
                <div>
                  <a-input
                    v-model="searchKey.searchkey"
                    placeholder="标题或文件内容"
                  />
                </div>
              </div>
            </li>
            <li class="li-button">
              <div>
                <span class="name"></span>
                <div>
                  <a-button
                    @click="search"
                    type="primary"
                    style="margin-right: 10px"
                    >搜索</a-button
                  >
                  <a-button @click="onreset">重置</a-button>
                </div>
              </div>
            </li>
          </ul>
        </div>
        <a-divider />
      </a-form>
      <a-table
        :rowKey="(row)=>row.id"
        :loading="spinning"
        :row-selection="rowSelection"
        :columns="columns"
        :scroll="{y:350}"
        :pagination="pagination"
        :dataSource="data"
        @change="handleTableChange"
      >
        <template slot="status" slot-scope="text">
          <span v-if="text">已归档</span>
          <span v-else>未归档</span>
        </template>
      </a-table>
      </a-table>
    </a-modal>
  </div>
</template>

<script>
import { Upload, Button, Row, Col, Icon, Spin, Descriptions, Divider, Form, DatePicker, Input, Table } from "ant-design-vue";
import EmptyData from "@/framework/components/EmptyData";
import { has, pull, assign, takeWhile, cloneDeep, map } from "lodash";
import { uploadV2, download } from "@/framework/api/file";
import { showError } from "@/framework/utils";
import { documentlist } from "@/person-shaoxing/api/information";
import { annexsave, annexlist } from "@/person-shaoxing/api/information";
import { relativeTimeRounding } from 'moment';
export default {
  props: {
    filemanageModal: {
      //弹窗是否显示
      type: Boolean,
    },
    docid: {
      //id
      type: Number,
    },
  },
  components: {
    AIcon: Icon,
    ASpin: Spin,
    EmptyData,
    AForm: Form,
    AInput: Input,
    ATable: Table,
    AInputGroup: Input.Group,
    ADatePicker: DatePicker,
    ADivider: Divider,
    ADescriptions: Descriptions,
    ADescriptionsItem: Descriptions.Item,
    AButton: Button,
    AUpload: Upload,
  },
  data() {
    return {
      show: false,
      over: false,
      columns: [
        {
          title: "序号",
          dataIndex: "index",
          key: "index",
          width: "10%",
          customRender: (text, record, index) => `${index + 1}`,
        },
        {
          title: "文件标题",
          dataIndex: "title",
          key: "title",
          width: "60%",
        },
        {
          title: "是否归档",
          dataIndex: "status",
          key: "status",
          align: 'center',
          scopedSlots: {
            customRender: 'status'
          }
        }
      ],
      annexs: [],
      annexList: [],
      spinning: false,
      documentAnnexVo: {},
      endValue: null,
      startValue: null,
      selectedKeys: [],
      data: [],
      searchKey: {
        statusIn:[0,1],
        needtotal: true,
        endtime: undefined,
        starttime: undefined,
        searchkey: undefined,
      },
      pagination: {
        total: 0,
        current: 1,
        pageSize: 10,
      },
      form: this.$form.createForm(this, { name: "docform" }),
    };
  },
  watch: {
    docid: {
      immediate: true,
      handler(val) {
        if (val) {
          this.documentAnnexVo.docid = val;
        }
      },
    },
    filemanageModal: {
      immediate: true,
      handler(val) {
        if (val) {
          this.getList(this.docid);
        }
      }
    },
    startValue(val) {
      this.searchKey.starttime = val;
    },
    endValue(val) {
      this.searchKey.endtime = val;
    },
  },
  computed: {
    rowSelection() {
      return {
        selectedRowKeys: this.selectedKeys,
        onChange: (selectedRowKeys, selectedRows) => {
          this.annexs = [];
          this.selectedKeys = selectedRowKeys;
          selectedRows.forEach((item, index)=>{
            let { id, title, fileuri } = item;
            if(fileuri) {
              this.annexs.push({id: id, annexname:title, annexuri:fileuri});
            }else{
              this.notify("已选文件中存在无文件项!");
            }
          });
        },
      };
    },
  },
  methods: {
    showSelect() {
      // this.selectedKeys = map(this.annexList, 'id');打开弹窗默认勾选
      this.show = true;
      if(!this.data.length) {
        this.documentList();
      }
    },
    modalCancel() {
      this.show = false;
    },
    modalOk() {
      map(this.annexs, (item)=>{
        if(item.annexuri) {
          let str = item.annexuri.split('file://')[1];
          item.annexuri = str.split('?')[0];
        }
      });
      this.annexList = cloneDeep(this.annexs);
      this.selectedKeys = map(this.annexList, 'id');
      this.show = false;
    },
    disabledStartDate(startValue) {
      const endValue = this.endValue;
      if (!startValue || !endValue) {
        return false;
      }
      return startValue.valueOf() > endValue.valueOf();
    },
    disabledEndDate(endValue) {
      const startValue = this.startValue;
      if (!endValue || !startValue) {
        return false;
      }
      return startValue.valueOf() >= endValue.valueOf();
    },
    handleTableChange(pagination) {
      this.pagination = pagination;
      this.documentList();
    },
    onreset() {
      this.searchKey.starttime = undefined;
      this.searchKey.endtime = undefined;
      this.searchKey.searchkey = undefined;
      this.startValue = null;
      this.endValue = null;
    },
    search() {
      this.form.validateFields((err, values) => {
        if (!err) {
          this.pagination.current = 1;
          this.documentList();
        }
      });
    },
    handleCancel() {
      this.annexList = [];
      this.$emit("update:filemanageModal", false);
    },
    notify(val) {
      this.$notification.warning({
        message: "提示",
        description: val,
        duration: 3,
      });
    },
    success(val) {
      this.$notification.success({
        message: "提示",
        description: val,
        duration: 3,
      });
    },
    beforeUpload(file) {
      return false;
    },
    remove(file) {
      let index = undefined;
      this.annexList.forEach((item, itemIndex) => {
        if (item.annexuri === file.annexuri) {
          index = itemIndex;
        }
      });
      this.annexList.splice(index, 1);
    },
    handleChange(info) {
      if (!has(info.file, "status")) {
        this.spinning = true;
        uploadV2(info.file)
          .then((res) => {
            if (res.data.code === "success") {
              this.annexList.push({
                annexname: res.data.result.name,
                annexuri: res.data.result.uploadid,
              });
            } else {
              this.notify("文件上传失败!");
            }
          })
          .catch((err) => {
            showError(err);
          })
          .finally(() => {
            this.spinning = false;
          });
      }
    },
    getList(docid) {
      this.spinning = true;
      annexlist(docid)
        .then(({ result }) => {
          this.annexList = result;
        })
        .catch((err) => {
          showError(err);
        }).finally(()=>{
          this.spinning = false;
        });
    },
    //文件下载
    downDoc(record) {
      if (record.annexuri) {
        download(record.annexuri);
      } else {
        this.$notification.warning({
          message: "提示",
          description: "暂无可下载内容!",
          duration: 3,
        });
      }
    },
    handleOk() {
      this.spinning = true;
      this.documentAnnexVo.annexList = this.annexList;
      annexsave(this.documentAnnexVo)
        .then(({code}) => {
            if(code === 'success') {
              this.success("保存成功!");
              this.handleCancel();
            }else{
              this.notify("保存失败!");
            }
        })
        .catch((err) => {
          showError(err);
        }).finally(()=>{
          this.spinning = false;
        });
    },
    documentList() {
      this.spinning = true;
      let {current, pageSize} = this.pagination;
      documentlist({pagenum: current,pageSize, ...this.searchKey})
        .then((res) => {
          if (res.result.rows&&res.result.rows.length) {
            let {pagenum, total, rows} = res.result;
            this.pagination.current = pagenum;
            this.pagination.total = total;
            this.data = rows;
          } else {
            this.$notification.warning({
              message: "提示",
              description: "暂无数据!",
              duration: 3,
            });
          }
        })
        .catch((err) => {
          showError(err);
        }).finally(()=>{
          this.spinning = false;
        });
    },
  },
};
</script>
<style lang="less" scoped>
.container,
.ant-spin-nested-loading {
  height: 100%;
}
.container {
  position: absolute;
}
/deep/.ant-descriptions {
  & .ant-descriptions-item-label {
    line-height: 2;
  }
  & .ant-descriptions-view table tbody tr td {
    padding-left: 20%;
    display: flex;
    & > span {
      .emptycontent {
        line-height: 28px;
      }
      ul.list{
        height: 230px;
        overflow: scroll;
        li {
          height: 32px;
          padding: 0 @layout-space-base;
          display: flex;
          align-items: center;
          transition: all 0.3s;
          cursor: pointer;
          &:hover {
            background-color: @primary-1;
          }
          span:first-child {
            display: inline-block;
            width: 440px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
          }
          span:last-child {
            margin-left: auto;
          }
          .anticon{
            margin-left: 0.5em;
            transition: all .3s;
            &:hover {
              color: @primary-color;
              display: inline-block;
              transform: scale(1.2);
            }
          }
        }
      } 
    }
  }
}
.ant-modal-content {
  .ant-advanced-search-form {
    .in-box {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 0;
    }
    .li-content {
      width: 40%;
    }
    /deep/.li-content {
      padding: @layout-space-base;
      padding-left: 0;
      & .pzwh {
        top: 0;
        display: inline-block;
        vertical-align: middle;
      }
      & .pzwh .ant-input {
        border: none;
        height: 30px;
      }
      & span.pzwh.ant-input-group {
        border: 1px solid #d9d9d9;
        border-radius: 4px;
      }
      & span.ant-input-group-addon {
        border: none;
        background: none;
        padding: 0 4px;
      }
    }
    .li-button {
      padding: @layout-space-base;
      padding-left: 0;
    }
    .name {
      line-height: 32px;
      padding-right: 5px;
    }
  }
}
</style>
