<template>
    <div ref="pieChart1"></div>
</template>

<script>
import { DataView } from "@antv/data-set";
import { Chart } from "@antv/g2";
export default {
  mounted() {
    this.init();
  },
  methods: {
    init() {
      const data = [
        { value: 122, type: "政法专项", name: "公安" },
        { value: 145, type: "政法专项", name: "检察院" },
        { value: 221, type: "政法专项", name: "法院" },
        { value: 241, type: "政法专项", name: "司法" },
        { value: 211, type: "政法专项", name: "子事例三" },
        { value: 356, type: "政法专项", name: "子事例四" },
        { value: 335, type: "党政群行政", name: "街道" },
        { value: 250, type: "党政群行政", name: "乡镇" },
        { value: 250, type: "党政群行政", name: "部门" }
      ];
      // 通过 DataSet 计算百分比
      const dv = new DataView();
      dv.source(data).transform({
        type: "percent",
        field: "value",
        dimension: "type",
        as: "percent"
      });
      const chart = new Chart({
        container: this.$refs.pieChart1,
        autoFit: true,
        height: 500,
        padding: 0
      });
      chart.data(dv.rows);
      chart.scale({
        percent: {
          formatter: val => {
            val = (val * 100).toFixed(2) + "%";
            return val;
          }
        }
      });
      chart.coordinate("theta", {
        radius: 0.5
      });
      chart.tooltip({
        showTitle: false,
        showMarkers: false
      });
      chart
        .interval()
        .adjust("stack")
        .position("percent")
        .color("type")
        .label("type", {
          offset: -10
        })
        .tooltip("name*percent", (item, percent) => {
          percent = (percent * 100).toFixed(2) + "%";
          return {
            name: item,
            value: percent
          };
        })
        .style({
          lineWidth: 1,
          stroke: "#fff"
        });

      const outterView = chart.createView();
      const dv1 = new DataView();
      dv1.source(data).transform({
        type: "percent",
        field: "value",
        dimension: "name",
        as: "percent"
      });

      outterView.data(dv1.rows);
      outterView.scale({
        percent: {
          formatter: val => {
            val = (val * 100).toFixed(2) + "%";
            return val;
          }
        }
      });
      outterView.coordinate("theta", {
        innerRadius: 0.5 / 0.75,
        radius: 0.75
      });
      outterView
        .interval()
        .adjust("stack")
        .position("percent")
        .color("name", [
          "#BAE7FF",
          "#7FC9FE",
          "#71E3E3",
          "#ABF5F5",
          "#8EE0A1",
          "#BAF5C4"
        ])
        .label("name")
        .tooltip("name*percent", (item, percent) => {
          percent = (percent * 100).toFixed(2) + "%";
          return {
            name: item,
            value: percent
          };
        })
        .style({
          lineWidth: 1,
          stroke: "#fff"
        });

      chart.interaction("element-highlight");

      chart.render();
    }
  }
};
</script>
<style lang='less' scoped>
</style>