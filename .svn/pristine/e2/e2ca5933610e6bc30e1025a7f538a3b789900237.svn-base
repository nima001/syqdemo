<template>
  <div class="layout">
    <div class="tab">
      <ul>
        <li v-for="item in tasktypeList" :key="item.key" 
          :class="{selected: search.tasktype == item.value}"
          @click="onTypeChange(item.value)"
        >{{item.text}}</li>
      </ul>
    </div>
    <div class="content">
      <div class="header">
        <ul class="left">
          <li v-for="(item,index) in deptTotal" :key="index" @click="chooseDept(item,index)" :class="['dept', {'active': isActive(index)}]">
            <div class="spin" v-if="spinning"><a-spin/></div>
            <div class="total" v-if="!spinning">{{item.number}}</div>
            <div class="name" :title="item.orgname" v-if="!spinning">{{item.orgname}}</div>
          </li>
        </ul>
        <ul class="right">
          <li><dict-select v-model="search.category" 
            dict="person.work.taskcategory" allowClear
            placeholder="所有分类" style="width: 105px"/></li>
          <li>
            <a-select v-model="search.statusIn" @change="changeStatus" placeholder="所有状态" style="width: 105px">
              <a-select-option v-for="item in statusList" :key="item.value">{{item.label}}</a-select-option>
            </a-select>
          </li>
          <li>
            <a-range-picker v-model="search.deadtime"
              :placeholder="['截止开始时间', '截止结束时间']"
              style="width: 240px"
            /> 
          </li>
          <li>
            <a-range-picker v-model="search.createtime"
              :placeholder="['发布开始时间', '发布结束时间']"
              style="width: 240px"
            /> 
          </li>
          <li>
            <UserSelect :search.sync="search" :title="'请选择执行人'" :name="'dealusername'" :value="'dealuser'"  @changesearch="changesearch"/>
          </li>
          <li>
            <UserSelect :search.sync="search" :title="'请选择发布人'" :name="'createusername'" :value="'createuser'" @changesearch="changesearch"/>
          </li>
          <li>
            <a-input v-model="search.searchkey" allowClear placeholder="输入关键词查询"/>
          </li>
          <li><a-button type="primary" @click="onSearch()">搜索</a-button></li>
          <li><a-button @click="resetSeach()">重置</a-button></li>
        </ul>
      </div>
      <div class="body">
        <a-table
          rowKey="id"
          :columns="columns"
          :dataSource="page.rows"
          :pagination="false"
          :loading="loading"
          @change="sorterChange"
        >
          <div slot="index" slot-scope="text,record,index" class="index">
            <span class="toped" v-if="!record.readed"><img style="height: 10px;" src="../../assets/img/icon-bussiness-new-message.png"/></span>
            <span>{{ (page.pagenum - 1) * page.pagesize + index + 1 }}</span>
          </div>
          <div slot="customtitle" slot-scope="text,record" class="title">
            <span :title="text">{{text}}</span>
          </div>
          <div slot="endtime" slot-scope="text,record">
            <span>{{text && text.substr(0, 10)}}</span>
            <span v-if="record.timelimit == 2" class="will expire">临</span>
            <span v-else-if="record.timelimit == 3" class="expire">超</span>
          </div>
          <div slot="opts" slot-scope="record">
            <a @click="showDetails(record)">查看</a>
          </div>
        </a-table>
      </div>
      <div class="footer">
        <a-pagination 
          v-if="page.rows && page.rows.length"
          :current="page.pagenum"
          :total="page.total"
          :pageSize="page.pagesize"
          showSizeChanger
          :showTotal="total => `总共：${total}条`"
          @change="onPageChange"
          @showSizeChange="onShowSizeChange"
        />
      </div>
    </div>
    <DetailModal :showModal.sync="showModal" :recordData.sync="record" @listAttentiontask="loadData(page.pagenum, page.pagesize)"/>
  </div>
</template>
<script>
import { Modal, Icon, Table, Pagination, Select, DatePicker, Input, Button, Spin } from 'ant-design-vue'
import DictSelect from '@framework/components/DictSelect'
import UserSelect from './components/UserSelect'
import DetailModal from './components/DetailModal'
import { cloneDeep, uniq, has } from 'lodash'
import { showError } from '../../../framework/utils'
import { queryConcernTask, worktaskdetails, countbyorg } from '@/person-shaoxing/api/workTask'


/**
 * 关注列表
 */
export default {
  name: 'ConcernTask',
  components: {
    AModal: Modal,
    AIcon: Icon,
    ATable: Table,
    APagination: Pagination,
    ASelect: Select,
    ASelectOption: Select.Option,
    ARangePicker: DatePicker.RangePicker,
    AInput: Input,
    AButton: Button,
    DictSelect,
    DetailModal,
    UserSelect,
    ASpin: Spin,
  },
  data(){
    return {
      statusList: [
        { value: 1, label: '进行中'},
        { value: 2, label: '已完成'},
        { value: 3, label: '已撤销'},
      ],
      spinning: false,
      showModal: false,
      record: {},
      columns: [
        { title: '序号', width: 50, scopedSlots: { 
          customRender: "index" 
        }},
        { title: '标题', dataIndex: 'title', scopedSlots: { 
          customRender: "customtitle" 
        }},
        { title: '分类', dataIndex: 'category', customRender: this.dictRender("person.work.taskcategory")},
        { title: '发布人', dataIndex: 'createusername'},
        { title: '主办处室', dataIndex: 'mainorg'},
        { title: '主办人', dataIndex: 'mainusername'},
        { title: '主办人已读', dataIndex: 'readed', customRender: this.readRender },
        { title: '协办处室', dataIndex: 'asistorgnames', customRender: this.asistorgRender()},
        { title: '协办人', dataIndex: 'asistusernames'},
        { title: '截止时间', dataIndex: 'deadtime', 
          defaultSortOrder: 'ascend', SortOrder: 'ascend', sortDirections: ['descend', 'ascend'], sorter: true, scopedSlots: { 
            customRender: "endtime" 
          }
        },
        { title: '发布时间', dataIndex: 'createtime',
          sortDirections: ['descend', 'ascend'], sorter: true,customRender: (text) => {
          return text && text.substr(0, 10)
        }},
        { title: '状态', dataIndex: 'status', customRender: (text) => {
          let s = this.statusList.find(item => item.value == text);
          return s && s.label;
        }},
        { title: '操作', scopedSlots: { 
          customRender: "opts" 
        }},
      ],
      loading: true,
      search: {
        orders: [{orderby: 'deadtime', ordertype: 'ASC'}],
        tasktype: undefined,
        category: undefined,
        statusIn: [1],
        createtime: undefined,
        deadtime: undefined,
        dealuser: undefined,
        dealusername: undefined,
        createuser: undefined,
        createusername: undefined,
        mainorgid: undefined,
        searchkey: undefined,//模糊匹配
      },
      active: undefined,
      page: {
        rows: [],
        pagesize: 20,
        pagenum: 1,
        total: 0,
      },
      deptTotal: [],
      showSelectUser: false,
    }
  },
  computed: {
    tasktypeList(){
      return this.$store.getters.dict('person.work.tasktype');
    },
    taskcategoryList(){
      return this.$store.getters.dict('person.work.taskcategory');
    }
  },
  watch: {
    tasktypeList: {
      immediate: true,
      handler(list){
        if(list && list.length && !this.search.tasktype){//任务类型常量加载到后才加载数据
          this.search.tasktype = list[0].value;
          this.countByOrg();
          this.loadData(1, this.page.pagesize);
        }
      }
    },
    search: {
      deep: true,
      handler(val) {
        return val;
      }
    },
  },
  created(){
    //Empty
  },
  methods: {
    sorterChange(pagination, filters, sorter) {
      if(has(sorter,'order')) {
        this.search.orders = [{orderby: sorter.field, ordertype: sorter.order==='ascend'?'ASC':'DESC'}];
      }else {
        this.search.orders = undefined;
      }
      this.loadData(this.page.pagenum, this.page.pagesize);
    },
    changesearch(name,value,id,username) {
      this.$set(this.search,name,username);
      this.$set(this.search,value,id);
    },
    changeStatus(val) {
      this.search.statusIn = [val];
    },
    chooseDept(item,val) {
      this.active = val;
      if(item.orgid) {
        this.search.mainorgid = item.orgid;
      }else{
        this.search.mainorgid = undefined;
      }
      this.loadData(1, this.page.pagesize);
    },
    isActive(val) {
      if(this.active === val) {
        return true;
      }
      return false;
    },
    onTypeChange(type){
      this.search.tasktype = type;
      this.sort = 'ascend';
      this.countByOrg();
      this.resetSeach();
    },
    onPageChange(pagenum, pagesize) {
      this.loadData(pagenum, pagesize);
    },
    onShowSizeChange(current, pagesize) {
      this.loadData(1, pagesize);
    },
    onSearch() {
      this.loadData(1, this.page.pagesize);
    },
    resetSeach(){
      Object.keys(this.search).forEach((key) => {
        if(key != 'tasktype' && key!= 'statusIn') {
          if(key === 'orders') {
            this.search[key] = [{orderby: 'deadtime', ordertype: 'ASC'}];
          }else{
            this.search[key] = undefined;
          }
        } 
      });
      this.loadData(1, this.page.pagesize);
    },
    readRender(text, row, index) {
      if(text===1) {
        return '是';
      }else if(text===0) {
        return '否';
      }
      return '';
    },
    dictRender(key) {
      return (text, row, index) => {
        let v = this.$store.getters.dictKey(key, text);
        text = (v && v.text) || "";
        return <span title={text}>{text}</span>;
      };
    },
    asistorgRender() {
      return (text, row, index) => {
        if(text) {
          let newText = text.split(',');
          let uniqText = uniq(newText);
          return <span>{uniqText.join(',')}</span>;
        }else{
          return <span>{""}</span>;
        }
      }
    },
    showDetails(item){
      this.loading = true;
      this.record = {};
      this.record.id = item.id;
      this.record.tabtype = 2;
       worktaskdetails(this.record).then(({result})=>{
        this.loading = false;
        this.record = cloneDeep(result);
        this.record.id = item.id;
        this.record.tabtype = 2;
        this.showModal = true;
      }).catch((err)=>{
        this.loading = false;
        this.record = {};
        showError(err);
      })
    },
    countByOrg() {
      this.spinning = true;
      countbyorg(this.search.tasktype).then((res)=>{
        this.deptTotal = res.result;
      }).catch((err)=>{
        showError(err);
      }).finally(()=>{
        this.spinning = false;
      })
    },
    loadData(pagenum, pagesize){
      if(!this.search.tasktype){
        //任务类型未设置时，不查询数据
        return;
      }
      this.loading = true
      let params = Object.assign({
        pagenum, pagesize, 
        needtotal: true,
      }, this.search);
      if(params.createtime){
        let [start, end] = params.createtime;
        params.createtimestart = start;
        params.createtimeend = end;
        params.createtime = undefined;
      }
      if(params.deadtime){
        let [start, end] = params.deadtime;
        params.deadtimestart = start;
        params.deadtimeend = end;
        params.deadtime = undefined;
      }
      queryConcernTask(params).then(({result}) => {
        this.page = result;
      }).catch(error => {
        showError(error);
      }).finally(() => {
        this.loading = false;
      })
    }
  }
}
</script>
<style lang="less" scoped>
.layout{
  height: 100%;
  display: flex;
  border-radius: @border-radius-base;
  background: white;
  & > .tab{
    width: 150px;
    background-color: #f2f2f2;
    ul{
      margin-top: 50px;
    }
    li{
      line-height: 40px;
      text-align: center;
      cursor: pointer;
      &:hover{
        background-color: @primary-1;
        color: @primary-color;
      }
      &.selected{
        background-color: white;
        color: @primary-color;
        font-weight: bold;
      }
    }
  }
  & > .content{
    flex: auto;
    width: 0;
    display: flex;
    flex-direction: column;
    padding: 10px 0;
    .header{
      padding: @content-padding-v @content-padding-h;
      & > .left{
        margin-bottom: 24px;
        margin-top: 10px;
        padding: @padding-xs;
        display: flex;
        justify-content: space-between;
        overflow-x: auto;
        cursor: pointer;
        li{
          flex: 0 1 160px;
          min-width: 160px;
          height: 100px;
          text-align: center;
          margin: 0 @padding-xs;
          border-radius: @border-radius-base;
          box-shadow: 0px 0px 10px 0px #eee;
          position: relative;
          overflow: hidden;
          white-space: nowrap;
          .spin {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: fade(white, 60%);
            .ant-spin {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
            }
          }
          .total {
            font-size: 3.1em;
            font-weight: bold;
            color: fade(@primary-color, 80%);
          }
          .name {
            padding: 0 @layout-space-base;
            position: relative;
            top: -5%;
            font-weight: bold;
            text-overflow: ellipsis;
            overflow: hidden;
          }
          &:hover{
            background-color: @primary-1;
            .total {
              color: @primary-color;
            }
          }
        }
        li.active {
          background-color: @primary-1;
        }
      }
      & > .right{
        float: right;
        margin-bottom: 8px;
        li{
          display: inline-block;
          margin-left: 5px;
        }
        .clear-user{
          color: @disabled-color;
          font-size: 0.9em;
        }
      }
    }
    .body{
      padding: 0 @content-padding-h;
      flex: 0 1 auto;
      overflow-y: auto;
      .ant-table thead {
        tr th:first-child {
          text-align: center;
        }
      }
      /deep/.ant-table  {
        .ant-table-thead{
          tr th.ant-table-row-cell-break-word:first-child {
            text-align: center;
          }
        }
        tr {
          td:first-child {
            .index {
              display: flex;
              justify-content: space-between
            }
          }
          td{
            .title span{
              max-width: 100px;
              white-space: nowrap;
              text-overflow: ellipsis;
              overflow: hidden;
              display: inline-block;
            }
          }
          td:last-child,td:nth-last-child(2) {
            white-space: nowrap;
          }
        }
        .expire{
          display: inline-block;
          width: 1.4em;
          margin-left: 4px;
          border: 1px solid @accent-color;
          border-radius: @border-radius-base;
          line-height: 1.4em;
          font-size: 0.8em;
          text-align: center;
          color: @accent-color;
          &:not(.will){
            border-color: @error-color;
            color: @error-color;
          }
        }
      }
    }
    .footer{
      padding: @content-padding-v @content-padding-h;
      .ant-pagination{
        float: right;
      }
    }
  }
}
</style>