<template>
  <a-layout class="form-design">
		<a-layout-sider class="components" theme="light" :width="250">
			<div class="title">布局</div>
			<ul>
				<li v-for="(w) in layouts" :key="w.type"><div draggable="true"><a-icon :type="w.icon"/>{{w.title}}</div></li>
			</ul>
			<div class="title">控件</div>
			<ul>
				<li v-for="(w) in widgets" :key="w.type"><div draggable="true"><a-icon :type="w.icon"/>{{w.title}}</div></li>
			</ul>
		</a-layout-sider>
		<a-layout-content>
			<a-form>
				<template v-for="(item,index) in value">
					<div v-if="show(item)" :key="index" class="cmpt-wrapper" @click="editCmpt(item)">
						<slot v-if="isSlotComp(item)" :name="item.type" v-bind="item" />
						<component v-else :is="item.type" v-bind="item"/>
					</div>
				</template>
			</a-form>
		</a-layout-content>
		<a-layout-sider class="settings" theme="light" :width="250">
			<a-form v-if="component">
				<template v-if="component.children">
					<a-form-item label="配置项">
						<draggable class="item-list"
							v-model="component.children" 
							tag="ul"
							handle='.drag-handle'
							:animation="200"
							ghost-class="ghost"
						>
							<transition-group>
								<li v-for="(item, index) in component.children" :key="getItemKey(item)">
									<a-icon type="menu" class="drag-handle"/>
									<a-input-number v-model="item.span" :min="1" :max="24" placeholder="所占格数"/>
									<a-icon class="delete" type="minus-circle" @click="deleteItem(index)"/>
								</li>
							</transition-group>
						</draggable>
						<a-button type="dashed" style="width:150px" @click="addItem">
							<a-icon type="plus" /> 添加项
						</a-button>
					</a-form-item>
				</template>
				<template v-else>
					<a-form-item
						label="字段标识"
						:required="true" 
					>
						<a-input v-model="component.code"/>
					</a-form-item>
					<a-form-item
						label="字段名称"
						:required="true" 
					>
						<a-input v-model="component.name"/>
					</a-form-item>
				</template>
			</a-form>
		</a-layout-sider>
	</a-layout>
</template>
<script>
import { Layout, Icon, Form, Input, InputNumber ,Button } from "ant-design-vue";
import draggable from "vuedraggable";

import {randomStr} from "@/framework/utils/index";
import { components, initDataProps, mixin } from "./common.js";


export default {
	name: 'form-design',
	mixins: [mixin],
	components: {
		ALayout: Layout,
		ALayoutSider:Layout.Sider,
		ALayoutContent:Layout.Content,
		AIcon: Icon,
		AForm: Form,
		AFormItem: Form.Item,
		AInput: Input,
		AInputNumber: InputNumber,
		AButton: Button,
		draggable,
		...components
	},
	props: {
		value: {
			type: Array,
			default: () => []
		},
	},
	data(){
		return {
			layouts: [],//布局
			widgets: [],//控件
			component: undefined,
		}
	},
	provide(){
		let _this = this;
		return {
			formData: initDataProps({}, this.value),
			createCmpt(cmpt, elementBuilder){
				return _this.createComponent(cmpt, elementBuilder);
			}
		}
	},
	mounted(){
		this.initCmptList();
	},
	methods: {
		async initCmptList(){
			for(let key in components){
				let m = await components[key]();
				let {title, icon, props} = m.default;
				if(props && props.children){//存在children属性即为布局
					this.layouts.push({ type: key, title, icon, props})	
				}else{
					this.widgets.push({ type: key, title, icon, props})
				}
			}
			//添加扩展组件
			let addExtendCmpt = (arr, cmpt) => {
				let index = arr.findIndex(item => item.type == cmpt.type);
				if(index >= 0){
					this.$set(arr, index, cmpt)
				}else{
					arr.push(cmpt)	
				}
			}
			console.log(this.$scopedSlots)
			for(let key in this.$scopedSlots){
				console.log(this.$scopedSlots[key])
				let [node] = this.$scopedSlots[key]();
				let {title, icon, props} = node.componentOptions.Ctor.extendOptions;
				if(props.children){//存在children属性即为布局
					addExtendCmpt(this.layouts, { type: key, title, icon, props})
				}else{
					addExtendCmpt(this.widgets, { type: key, title, icon, props})
				}
			}
		},
		editCmpt(cmpt){
			this.component = cmpt;
		},
		getItemKey(item){
			return item._id || (item._id = randomStr(8));
		},
		deleteItem(index){
			this.component.children.splice(index, 1);
		},
		addItem(){
			this.component.children.push({span: 6});
		},
		
	}
}
</script>
<style lang="less" scoped>
.form-design{
	height: 100%;
	background-color: white;
	border-radius: @border-radius-base;
	overflow: hidden;

	.components{
		border-right: 1px solid @border-color-split;
		padding: @padding-sm;
		.title{
			color: @text-color-secondary;
		}
		ul{
			overflow: hidden;
			margin: 10px 0;
			li{
				width: 50%;
				float: left;
				padding: 2px;

				& > div{
					height: 34px;
					line-height: 32px;
					background-color: @background-color-base;
					border: 1px solid @background-color-base;
					padding: 0 8px;
					cursor: move;
					&:hover{
						border: 1px dashed @primary-color;
						color: @primary-color;
					}
					.anticon{
						margin-right: 5px;
					}
				}
			}
		}
	}

	.ant-form{
		padding: 12px;
	}

	.cmpt-wrapper{
		//outline: 1px dashed @border-color-base;
		margin-bottom: 4px;
		padding: 1px;
		&:hover{
			outline-color: @primary-color;
		}
	}
	/deep/.cmpt-panel{
		min-height: 81px + 8px;
		outline: 1px dashed @accent-color;
		padding-top: 4px;
		.cmpt-wrapper{
			//outline: 1px dashed @border-color-base;
			margin-bottom: 4px;
			padding: 1px;
			&:hover{
				outline-color: @primary-color;
			}
		}
	}


	.settings{
		border-left: 1px solid @border-color-split;
		overflow: auto;

		.item-list{
			.drag-handle{
				font-size: 1.2em;
				color: hsv(0, 0, 60%);
				margin-right: 10px;
				vertical-align: middle;
				cursor: pointer;
			}
			.ant-input-number{
				vertical-align: middle;
			}
			.delete{
				font-size: 1.4em;
				color: @primary-color;
				margin-left: 8px;
				vertical-align: middle;
				&:hover{
					color: lighten(@primary-color, 20%);
				}
			}
		}
	}
}
</style>