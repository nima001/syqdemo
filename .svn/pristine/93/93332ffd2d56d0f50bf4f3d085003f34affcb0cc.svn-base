<template>
  <div class="org-list">
    <template>
      <div class="left" v-if="unittypes.indexOf(3) < 0">
        <ul>
          <li
            v-for="item in systypes"
            :key="item.key"
            :class="{ active: sysvalue == item.value }"
            @click="onSystypeClick(item)"
          >
            {{ item.text }}
          </li>
        </ul>
      </div>
      <div class="right">
        <!-- <div class="header">
          <div class="left">
            <a-input v-model="search.searchkey" />
          </div>
          <div class="right">
            <a-button @click="onSearch">搜索</a-button>
            <a-button @click="onReset">重置</a-button>
          </div>
        </div> -->
        <ul class="list" ref="list">
          <li v-for="item in dataList" :key="item._id" @click="orgClick(item)">
            <a-tooltip placement="top" :mouseEnterDelay="0.5">
              <template slot="title">
                <span>{{item.name}}</span>
              </template>
            <span>{{item.name}}<span class="num">{{item[displayFieldCode]}}</span></span>
            </a-tooltip>
          </li>
          <li v-show="pagination.pagenum < pagination.pagetotal" 
            class="footer-sentinel" ref="sentinel" style="text-align:center">
            <a-icon slot="indicator" type="loading"/>
          </li>
        </ul>
      </div>
    </template>
  </div>
</template>
<script>
import { Button, Input, Tooltip, Icon } from "ant-design-vue";
import DialogBox from "./DialogBox";
import { query } from "@/person/api/integratedquery";
import { getSMZToke } from '@/person-zhejiang/api/analyze'
import { get, set } from 'lodash';
import { showError } from '@/framework/utils';

export default {
  components: {
    DialogBox,
    AInput: Input,
    AButton: Button,
    ATooltip: Tooltip,
    AIcon: Icon
  },
  props: {
    district: {
      type: String,
    },
    unittypes: {
      type: Array,
      default: () => []
    },
    systype: {
      
    },
    displayField: {
      type: String,
    },
    filter: {
      type: Array,
    }
  },
  data() {
    return {
      show: false,
      sysvalue: this.systype,
      dataList: [],
      pagination: {
        pagenum: 1,
        pagesize: 20,
        total: 0,
        pagetotal: 0,
      },
      intersectionObserver: undefined,
    };
  },
  computed: {
    systypes() {
      let arr = this.$store.getters.dict("usermanage.org.systype") || [];
      return [{ key: "", value: null, text: "全部" }, ...arr];
    },
    distList(){
      return this.$store.getters.dict("usermanage.org.district") || [];
    },
    displayFieldCode(){
      return this.displayField && this.displayField.replace('_id@organization.statistic.', '_join0.');
    },
    params(){
      let query = {
        target: { id: 1, title: "组织" },
        fields: [
          { key: "name", showname: "机构名称" },
          { key: "orgcode", showname: "组织编码" },
        ],
        filter: { 
          op: 'and',
          criteria: [],
        },
        orders: [
          { orderby: 'index', ordertype: "ASC" }  
        ],
      }
      if(this.displayField){
        query.fields.push({ key: this.displayField });
        query.orders.unshift({ orderby: this.displayField, ordertype: "DESC" });
      }
      let criteria = [];
      if(this.district){
        criteria.push({
          field: { key: "district", showname: "所在区划" },
          op: "in",
          value: this.matchCode(this.district, this.distList),
        })
      }
      if(this.unittypes){
        criteria.push({
          field: { key: "unittypes", showname: "单位类型" },
          op: "in",
          value: this.unittypes,
        })
      }
      if(this.sysvalue){
        criteria.push({
          field: { key: "systype", showname: "系统类别" },
          op: "eq",
          value: this.sysvalue,
        })
      }
      if(this.filter){
        criteria = [...criteria, ...this.filter];
      }
      query.filter.criteria = criteria;
      return query;
    }
  },
  mounted() {
    this.dataList = [];
    this.show = false;
    this.loadData(this.pagination);
  },
  destroyed(){
    this.unBindScrollSentinel();
  },
  methods: {
    onSystypeClick(item) {
      this.pagination = {
        pagenum: 1,
        pagesize: 20,
        total: 0,
        pagetotal:0,
      };
      this.dataList = [];
      this.sysvalue = item.value;
      this.loadData(this.pagination);
    },
    orgClick(org){
      this.getSMZParams(({userId, serviceCode}) => {
        window.open(`http://59.202.42.184:8008/api.smz.do?m=getSmzJgsyDetailInfo&jgsy_code=${org.orgcode}&serviceCode=${serviceCode}&userId=${userId}`);
      })
    },
    getSMZParams(){
      if(this.smzParams){
        return Promise.resolve(this.smzParams);
      }else{
        return getSMZToke().then(({userId, serviceCode}) => {
          let p = {userId, serviceCode};
          this.smzParams = p;
          return p;
        })
      }
    },
    loadData({ pagenum, pagesize }) {
      query({
        ...this.params,
        pagenum,
        pagesize,
        needTotal: true,
      }).then(({result})=>{
        this.dataList = [...this.dataList, ...result.rows];
        this.pagination.pagenum = result.pagenum;
        this.pagination.pagesize = result.pagesize;
        this.pagination.total = result.total;
        this.pagination.pagetotal = Math.ceil(this.pagination.total/this.pagination.pagesize);
        if(this.pagination.pagenum < this.pagination.pagetotal){
          this.bindScrollSentinel();
        }else{
          this.unBindScrollSentinel();
        }
      }).catch((err)=>{
        showError(err);
      })
    },
    bindScrollSentinel(){
      if(this.intersectionObserver){
        return;
      }
      let sentinel = this.$refs.sentinel;
      if(sentinel){
        this.intersectionObserver = new IntersectionObserver((entries) => {
          if (entries[0].intersectionRatio > 0){
            let { pagenum, pagesize } = this.pagination;
            this.loadData({ pagenum: pagenum + 1, pagesize });
          }
        });
        this.intersectionObserver.observe(sentinel);
      }
    },
    unBindScrollSentinel(){
      if(this.intersectionObserver){
        this.intersectionObserver.disconnect();
        this.intersectionObserver = undefined;
      }
    },
    matchCode(code, list){
      for(let i = (code.length/2) - 1; i >= 0; i--){
        if(+code.substring(i * 2) != 0){
          code = code.substring(0, (i + 1) * 2)
          break          
        }
      }
      let arr = [];
      list.forEach(item => {
        if(item.value.startsWith(code)){
          arr.push(item.value);
        }
      });
      return arr;
    }
  },
};
</script>
<style lang="less" scoped>
.org-list{
  height: 600px;
  display: flex;
  overflow: hidden;
  padding: 66px 50px 40px 50px;
  font-size: 16px;
  color: #fff;
  position: relative;
  & > .left{
    width: 200px;
    height: 100%;
    flex: none;
    margin-right: 10px;
    background-color: #081220;
    overflow-y: auto;
    & > img {
      width: 50px;
    }
    li{
      line-height: 46px;
      margin-top: 5px;
      cursor: pointer;
      color: fade(#fff, 60%);
      text-align: center;
      &:hover{
        background-color: #23364c;
      }
      &.active{
        background-color: #23364c;
        color: #fff;
      }
    }
  }
  & > .right{
    flex: auto;
    display: flex;
    flex-direction: column;
    padding: 0 10px;
    & > .header{
      display: flex;
      .left{
        flex: auto;
      }
      .right{
        flex: none;
      }
      .ant-input{
        background: #111c31;
        border: unset;
        color: #fff;
        height: 46px;
        &:focus{
          box-shadow: 0 0 3px 1px rgba(158, 197, 255, 0.582);
        }
      }
      .ant-btn{
        background: #111c31;
        color: fade(#fff, 60%);
        border-color: #1c97b8;
        margin-left: 20px;
        height: 44px;
        width: 80px;
        &:hover{
          color: #fff;
        }
      }
    }
    .list {
        overflow: auto;
        display: flex;
        align-content: flex-start;
        flex-wrap: wrap;
        li:not(.footer-sentinel) {
          width: 45%;
          margin: @layout-space-base;
          padding: @padding-xs @padding-sm;
          text-align: center;
          background: #181832;
          background-size: 100%;
          background-position: 0 0;
          color: #fff;
          white-space: nowrap;
          display: flex;
          justify-content: center;
          align-items: center;
          position: relative;
          cursor: pointer;
          &:nth-child(2n) {
            margin-left: auto;
          }
          &:hover{
            background-color: lighten(#181832, 10%);
          }
          &::before {
            height: 23px;
            content: '';
            position: absolute;
            top: -8px;
            left: -3px;
            right: -3px;
            background: url('../../../assets/img/screen/list-top-bg.png') no-repeat;
            background-size: 100%;
          }
          & > span {
            padding: 0 @padding-xs;
            display: inline-block;
            width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
          }
          .num{
            color: #02E7EF;
            padding: 0 10px;
          }
        }
        .footer-sentinel{
          flex: none;
          width: 100%;
          padding: 5px;
        }
    }
    .pagination {
        width: 120px;
        padding: @padding-xs @padding-lg;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: @border-radius-base;
        color: fade(#fff, 80%);
        background: fade(#000, 30%);
        .current {
            color: #fff;
        }
        .prev, .next {
            margin: 0 16px;
            cursor: pointer;
        }
    }
  }
}
</style>
