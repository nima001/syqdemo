<template>
  <div ref="content" :class="['bar-chart', {'border': isDrag}]" @mousedown.prevent="allowMove?move():false">
    <h2 v-if="mainTitle.visible!==false||title" :style="{ textAlign: position||'center' }" v-html="mainTitle.value||title"/>
    <h3 v-if="subTitle.visible!==false||subtitle" :style="{ margin: 0, textAlign: position||'center' }" v-html="subTitle.value||subtitle"/>
    <div ref="chart" class="chart"></div>
    <div class="tag" v-if="allowDrag" @mousedown.prevent.stop="drag()"/>
  </div>
</template>
<script>
import * as G2 from "@antv/g2";
import BaseMixin from "./BaseMixin";
import { get, orderBy, reduce, map, groupBy, xor, has, keys } from 'lodash';

// 柱状图
/**
 * color: 自定义主题色 -- Array
 * annotation: 是否显示标注 -- Boolean
 * background: 是否显示背景色 -- Boolean
 * size: 柱状图宽度 -- Number
 * padding: 自定义边距 --Array
 * legend: 是否显示图例 -- Boolean 默认不显示
 * label: 是否显示label -- Boolean 默认显示
 */
export default {
  icon: "chart-bar",
  title: "柱状图",
  name: "BarChart",
  mixins: [BaseMixin],
  watch: {
    data: {
      deep: true,
      handler(val) {
        return val;
      },
    },
    settings: {
      deep:true,
      handler(val,old) {
        if(val!=old) {
          this.draw(this.data)
        }
      }
    },
  },
  data() {
    return {
      currentMoveX: 0,
      currentMoveY: 0,
      isDrag: false,
      isMove: false,
      background: undefined,
      plot: undefined,
    };
  },
  computed: {
		title(){
			let { title, context = {}} = this.settings;
			if(title&&typeof title=='string'){
				for(let key in context){
					title = title.replace(new RegExp('\\$\\{' + key + '\\}', 'g'), context[key]);
				}
				return title;
			}
			return undefined;
		},
		subtitle() {
			let { subtitle, context = {}} = this.settings;
			if(subtitle&&typeof title=='string'){
				for(let key in context){
					subtitle = subtitle.replace(new RegExp('\\$\\{' + key + '\\}', 'g'), context[key]);
				}
				return subtitle;
			}
			return undefined;
		},
		muitl(){
			if(this.data){
			  let { keyCols, valueCols, rows } = this.data;
			  return valueCols.length > 1 || keyCols.length > 1;
			}
		},
		sortType() {
      if(this.settings.sort) {
        let { type } = this.settings.sort;
        if(type=='asc'||type=='desc') {
          return type;
        }
      }
			return undefined;
		},
    position() {
      if(this.settings.title&&this.settings.title.position) {
        let { position } = this.settings.title;
        return position;
      }else{
        return undefined
      }
    },
    mainTitle() {
      if(this.settings.title&&this.settings.title.main) {
        let { main } = this.settings.title;
        if(!main) {
          return  {
            visible: true,
            value: undefined,
          }
        }
        if(!has(main,'visible')) {
          main.visible = true;
        }
        return main;
      }else{
        return {
          main: {
            visible: true,
            value: undefined,
          }
        }
      }
    },
    subTitle() {
      if(this.settings.title&&this.settings.title.sub) {
        let { sub } = this.settings.title;
        if(!sub) {
          return  {
            visible: true,
            value: undefined,
          }
        }
        if(!has(sub,'visible')) {
          sub.visible = true;
        }
        return sub;
      }else{
        return {
          sub: {
            visible: true,
            value: undefined,
          }
        }
      }
    },
    xAxis() {
      if(this.settings.xAxis) {
        let { xAxis } = this.settings;
        return xAxis;
      }else{
        return {
          visible: true,
          title: {
            visible: false,
            content: undefined
          }
        }
      }
    },
    yAxis() {
      if(this.settings.yAxis) {
        let { yAxis } = this.settings;
        return yAxis;
      }else{
        return {
          visible: true,
          title: {
            visible: false,
            content: undefined
          }
        }
      }
    },
    label() {
      if(this.settings.gemo) {
        let { label } = this.settings.gemo;
        return label;
      }else{
        return {
          visible: true
        }
      }
    },
    legend() {
      let { legend } = this.settings;
      if(!legend) {
        return  {
          visible: false,
        }
      }
      return legend;
    },
    tooltip() {
      let { tooltip } = this.settings;
      if(!tooltip) {
        return  {
          visible: true,
        }
      }
      return tooltip;
    },
    format() {
      if(this.tooltip) {
        let { format } = this.tooltip;
        if(format) {
          if(!format.unit) {
            format.unit = '';
          }
          if(!format.toFixed) {
            format.toFixed = 0;
          }
          return format;
        }
      }
      return {
        unit: '',
        toFixed: 0,
      };
    },
    color() {
      if(this.settings.gemo) {
        let { color } = this.settings.gemo;
        return color;
      }else{
        return undefined
      }
    },
    bgColor() {
      if(this.settings.gemo) {
        let { background } = this.settings.gemo;
        return background;
      }else{
        return undefined
      }
    },
    exchange() {
      if(this.settings.gemo) {
        let { exchange } = this.settings.gemo;
        return exchange;
      }else{
        return undefined
      }
    },
    slider() {
      if(this.settings.gemo) {
        let { slider } = this.settings.gemo;
        return slider;
      }else{
        return undefined
      }
    },
    annotation() {
      if(this.settings.gemo) {
        let { annotation } = this.settings.gemo;
        return annotation;
      }else{
        return undefined
      }
    },
    size() {
      if(this.settings.gemo) {
        let { size } = this.settings.gemo;
        return size;
      }else{
        return undefined
      }
    },
    colors() {
      if (this.color&&(this.color.length||typeof this.color==='string')) {
        if(typeof this.color==='string') {
          return this.color.split(',');
        }
        return this.color;
      } else {
        let colors = this.$store.getters.getConfig("chart.colors");
        if (colors) {
          try {
            colors = JSON.parse(colors);
            if (colors && colors.length) {
              return colors;
            }
          } catch (err) {}
        }
      }
      return ["#D15456", "#5488D1", "#EDBA55", "#D48265", "#91C7AE", "#749F83", "#BDA29A", "#6E7074", "#585470", "#706254"];
    },
  },
  mounted() {
    this.draw(this.data);
  },
  methods: {
    move() {
      let that = this;
      //获取x坐标和y坐标
      let startX = event.clientX;
      let startY = event.clientY;
      //获取左部和顶部的偏移量
      let left = that.$refs.content.offsetLeft;
      let top = that.$refs.content.offsetTop;
      this.isMove = true;
      let timer = setTimeout(()=>{
        document.onmousemove = function (e) {
          let endX = e.clientX;
          let endY = e.clientY;
          if(endX!=startX) {
            that.$refs.content.style.left = endX-(startX-left)+'px';
          }
          if(endY!=startY) {
            that.$refs.content.style.top =  endY-(startY-top)+'px';
          }
        }
      },300);
      document.onmouseup = function () {
        clearInterval(timer);
        this.isMove = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    drag(e) {
      let that = this;
      let startX = event.x;
      let startY = event.y;
      let width = that.$refs.content.offsetWidth;
      let height = that.$refs.content.offsetHeight;
      that.isDrag = true;
      document.onmousemove = function (e) {
        let moveX = e.pageX - startX;
        let moveY = e.pageY - startY;
        if(that.currentMoveX!=event.x&&moveX!=0) {
          that.$refs.content.style.width = Math.min(1400, Math.max(300, moveX+width))+'px';
          that.currentMoveX = event.x;
        }
        if(that.currentMoveY!=event.y&&moveY!=0) {
          that.$refs.content.style.height = Math.min(1400, Math.max(200, moveY+height))+'px';
          that.currentMoveY = event.y;
        }
      };
      document.onmouseup = function () {
        that.draw(that.data)
        that.isDrag = false;
        document.onmousemove = null;
        document.onmouseup = null;
      };
      return false;
    },
    createData(dataTable) {
      if (!dataTable) {
        return;
      }
      let { keyCols, valueCols, rows } = this.transform(dataTable);
      let row = rows;
      //截取
      if(this.settings.sort&&this.settings.sort.range&&this.settings.sort.range.length) {
        rows = rows.slice(this.settings.sort.range[0],this.settings.sort.range[1]);
      }
      //合并
      if(this.settings.sort&&this.settings.sort.mergeOther) {
        let xors = xor(row, rows);
        let sum = reduce(map(xors,'v0')||0,(sum,n)=>{
          return sum+n;
        });
        rows.push({k0:'剩余',v0:sum});
      }
      let newRows = this.getRows(rows,keyCols,valueCols);
      if(this.sortType) {
        if(keyCols.length > 1) {
          let keyArray = keys(groupBy(newRows,'key'));
          keyArray.forEach((item)=>{
            let row = newRows.filter(row=>row.key==item);
            let valueArray = map(row, 'value');
            let sum = reduce(valueArray, (sum, n)=> {
              return sum+n;
            });
            map(newRows, (row)=>{
              if(row.key==item) {
                row.total = sum;
              }
            });
          })
          return orderBy(newRows,'total',this.sortType);
        }
        return orderBy(newRows,'value',this.sortType);
      }else{
        return newRows;
      } 
    },
    getRows(rows,keyCols,valueCols) {
      return rows.map(item => {
        let key, type;
        if(keyCols.length > 1){
          let keys = keyCols.map(k => item[k.column]);
          type = keys.pop();
          key = keys.join("-")
        }else{
          key = item[keyCols[0].column]
        }
        return {
          key, type,
          value: item[valueCols[0].column] || 0
        };
      })
    },
    draw(dataTable) {
      let data = this.createData(dataTable);
      if (!data) {
        return false;
      }
      if (this.plot) {
        this.plot.destroy();
      }
      const chart = new G2.Chart({
        container: this.$refs.chart,
        autoFit: true,
        forceFit: true,
        appendPadding: this.settings.padding || [0, 0, 0, 0],
      });
      chart.data(data);
      let xVisible = this.xAxis.visible;
      let yVisible = this.yAxis.visible;
      let xTitleVisible = get(this.xAxis.title, 'visible');
      let yTitleVisible = get(this.yAxis.title, 'visible');
      let xTitleContent = get(this.xAxis.title, 'content');
      let yTitleContent = get(this.yAxis.title, 'content');

      //配置X轴
			if(xVisible!==false) {
				chart.axis('key', {
          title: { 
            style: {
              fill: '#AAAAAA'
            }
          },
          label: {
            autoRotate: true,
          },
          grid: this.xAxis.grid?true:null,
          animate: false
        });
        if(xTitleVisible) {
          chart.scale({
            key: {
              alias: xTitleContent||' '
            },
          });
        }else{
          chart.scale({
            key: {
              alias: ' '
            },
          });
        }
			}else{
				chart.axis('key', false);
			}

      //配置y轴
			if(yVisible!==false) {
				chart.axis('value', {
					title: { 
						style: {
							fill: '#AAAAAA'
						}
					},
					label: {
						autoRotate: true,
					},
					grid: this.yAxis.grid?true:null,
					animate: false
				});
        if(yTitleVisible) {
					chart.scale({
						value: {
							alias: yTitleContent||'记录数',
							nice: true,
						},
					});
				}else{
					chart.scale({
						value: {
							alias: ' ',
							nice: true,
						},
					});
				}
			}else{
				chart.axis('value', false);
			}

      //图形
      let geometry;
      if (this.bgColor) {
        this.background = this.colors[0];
        geometry = chart.interval({
          background: {
            style: {
              fill: this.muitl?'#1515164F':this.background,
            },
          },
        });
      } else {
        geometry = chart.interval();
      }
      let that = this;
      geometry.position("key*value").tooltip('key*value*type',function (key,value,type) {
        return {
          title: key,
          name: type||key,
          value: value.toFixed(that.format.toFixed) + that.format.unit
        }
      });

      //配置柱子宽度
      if (this.size) {
        geometry.size(this.size);
      }
      if (this.muitl) {//分组柱状图
        geometry.adjust([
          { type: "dodge", marginRatio: 0 },
        ]).color("type", this.colors);
      }else{
        geometry.color('key', (val) => {
          return this.colors[0]
        });
      }

      //翻转
			if(this.exchange) {
        chart.coordinate().transpose();
			}else{
        chart.coordinate();
			}

      // 配置图例
      chart.legend(false);
			if(this.legend) {
				if(this.legend.visible) {
					chart.legend({
						position: this.legend.position,
						flipPage: this.legend.flipPage,
            itemHeight: 15,
						marker: {
							symbol: this.legend.marker
						},
					});
				}
			}
      
      //提示
      chart.tooltip({
        showCrosshairs: false,//显示辅助线
        showTitle: this.muitl,
        showMarkers: false,
        shared: true,
      })
      if(this.tooltip) {
				if(!this.tooltip.visible) {
					chart.tooltip(false);
				}
			}

      //滑块
      if(this.slider) {
        chart.option('slider', {
          backgroundStyle: {
            fill: this.colors[0],
          }
        });
      }

      //交互
      if (!this.annotation) {
        chart.interaction("active-region");
      }

      //是否显示lebal
      if(this.label&&this.label.visible) {
        geometry.label("value", {
          layout: [
            // 柱形图数据标签位置自动调整
            { type: 'interval-adjust-position' },
            // 数据标签防遮挡
            { type: 'interval-hide-overlap' },
            // 数据标签文颜色自动调整
            // { type: 'adjust-color' },
          ],
          position: 'top',
          style: {
            fill: this.label.color,
          },
          content: (v)=> {
            return v.value.toFixed(that.format.toFixed)
          }
        });
      }else{
        geometry.label(false);//FIXME 值太多默认不显示
      }

      //标注
      if (this.annotation) {
        data.forEach((item) => {
          chart.annotation().text({
            position: [item.key, "max"],
            content: this.getTotal(data, item.key),
            style: {
              fill: this.colors[0],
              textAlign: "center",
            },
            offsetY: -20,
          });
        });
        this.changeAnnotation(chart, data);
      }
      chart.changeData(data);
      this.plot = chart;
    },
    getTotal(data, key) {
      let array = groupBy(data,'key')[key].filter((dataItem)=> dataItem.key==key);
      let total = reduce(map(array, "value"),(sum, n)=>{
        return sum+n;
      })
      return total;
    },
    //图例点击
    changeAnnotation(chart, data) {
      chart.on("legend-item:click", (...args) => {
        chart.controllers[3].option = [];
        chart.filteredData.forEach((item) => {
          chart.annotation().text({
            position: [item.key, "max"],
            content: this.getTotal(chart.filteredData, item.key),
            style: {
              fill: this.colors[0],
              textAlign: "center",
            },
            offsetY: -20,
          });
        });
        chart.changeData(data);
      });
    },
  },
};
</script>
<style lang="less" scoped>
.bar-chart {
  width: 100%;
  height: 400px;
  display: flex;
  flex-direction: column;
  position: relative;
  &.border {
    border: 1px dashed #000;
  }
  /deep/.chart {
    display: flex;
    div {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  }
  .tag {
    position: absolute;
    right: 0;
    bottom: 0;
    border-right: 5px solid #979797;
    height: 14px;
    border-bottom: 5px solid #979797;
    width: 14px;
    cursor: nw-resize;
  }
  h2 {
    margin: 0;
  }
  div {
    flex: 1;
  }
}
</style>
