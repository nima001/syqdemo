<!-- 审核中心 -->
<template>
  <a-layout class="open-layout">
    <div class="body">
      <div class="title">
        <a-tabs default-active-key="0" @change="changekey">
          <a-tab-pane key="0" tab="未审核"></a-tab-pane>
          <a-tab-pane key="1" tab="已审核" force-render></a-tab-pane>
        </a-tabs>
      </div>

      <div class="content">
        <div class="contentdiv">
          <div class="tools">
            <!-- v-show="allow" -->
            <a-select
              show-search
              placeholder="输入或选择服务名称"
              option-filter-prop="children"
              :filter-option="filterSelect"
              v-model="servicename"
              @change="getVerifyList"
              class="tsearch tsearchselect"
            >
              <!-- <a-select-option value="0">所有接口</a-select-option>
            <a-select-option value="1">选中接口</a-select-option>
              <a-select-option value="2">待审核接口</a-select-option>-->
              <a-select-option
                :value="value.selectValue"
                v-for="(value) in servicenameselect"
                :key="value.selectKey"
              >{{value.selectValue}}</a-select-option>
            </a-select>
            <a-select
              show-search
              v-model="appname"
              placeholder="输入或选择应用"
              option-filter-prop="children"
              :filter-option="filterSelect"
              @change="getVerifyList"
              class="tsearch tsearchselect"
            >
              <a-select-option
                :value="value.selectValue"
                v-for="(value) in appnameselect"
                :key="value.selectKey"
              >{{value.selectValue}}</a-select-option>
            </a-select>
            <a-select
              show-search
              v-model="applyuser"
              placeholder="输入或选择申请人"
              option-filter-prop="children"
              :filter-option="filterSelect"
              @change="getVerifyList"
              class="tsearch tsearchselect"
            >
              <a-select-option
                :value="value.selectValue"
                v-for="(value) in applyuserselect"
                :key="value.selectKey"
              >{{value.selectValue}}</a-select-option>
            </a-select>

            <!-- <a-input
            v-model="namelike"
            placeholder="请输入操作内容"
            @pressEnter="getVerifyList"
            style="width: 200px"
            class="tsearch"
            />-->

            <a-button type="primary" @click="getVerifyList" class="tsearch">搜索</a-button>

            <a-button type="primary" @click="restsearch" class="tsearch">重置</a-button>
          </div>
          <div>
            <a-table :columns="columns" :data-source="data" :pagination="false">
              <span slot="action" slot-scope="text, record">
                <a  v-if="hasPermit('/dev/audit/service')" @click="dispose(record)">{{tabkey === '0'? '处理' :'查看'}}</a>
              </span>
              <span slot="servicestate" slot-scope="text">
                {{text === 2 ? "已通过" : "已退回"}}
              </span>
            </a-table>
            <a-pagination
              v-if="data.length > 0"
              :total="total"
              :showSizeChanger="true"
              @showSizeChange="onShowSizeChange"
              :page-size-options="pageSizeOptions"
              :pageSize="pagesize"
              v-model="pagenum"
              @change="onPageChange"
              :showTotal="(total) => `总共：${total}条`"
            />
          </div>
        </div>
      </div>
    </div>
  </a-layout>
</template>

<script>
import {
  Layout,
  Tabs,
  Button,
  Input,
  Pagination,
  Table,
  Select
} from "ant-design-vue";
import { verifyList, listselects } from "../api/service";
import { showError } from "../../framework/utils";
export default {
  components: {
    ALayout: Layout,
    ATabs: Tabs,
    ATabPane: Tabs.TabPane,
    AButton: Button,
    AInput: Input,
    ATable: Table,
    ASelect: Select,
    ASelectOption: Select.Option,
    APagination: Pagination
  },

  //   props: {},

  data() {
    return {
      tabkey: 0,
      namelike: "",
      data: [],
      total: 0,
      pageSizeOptions: ["10", "20", "30", "40", "50"],
      pagesize: 10,
      pagenum: 1,
      //表格筛选条件
      servicename: undefined,
      appname: undefined,
      applyuser: undefined,
      servicenameselect: {},
      appnameselect: {},
      applyuserselect: {}
    };
  },

  computed: {
    columns() {
      let data = [
        {
          title: "序号",
          customRender: (text, record, index) => index + 1,
          width: "5%"
        },
        {
          title: "服务名称",
          dataIndex: "serviceName",
          width: "20%"
          //   scopedSlots: { customRender: "name" }
        },
        {
          title: "申请的应用",
          dataIndex: "appName",
          width: "30%"
        },
        {
          title: "申请人",
          dataIndex: "username",
          width: "10%"
        },
        {
          title: "申请时间",
          dataIndex: "applicationTime",
          width: "10%"
        },
        {
          title: "操作",
          key: "action",
          dataIndex: "action",
          scopedSlots: { customRender: "action" }
        }
      ];
      if (this.tabkey === "1") {
        let state = {
          title: "当前状态",
          dataIndex: "state",
          width: "10%",
          scopedSlots: { customRender: "servicestate" },
        };
        data.splice(5, 0,state);
      }
      return data;
    }
  },

  //   watch: {},

  //   mounted(){},
  created() {
    this.getVerifyList();
    this.getServiceNameSelect();
    this.getAppNameSelect();
    this.getApplyUserSelect();
  },

  methods: {
    //tab切换
    changekey(key) {
      this.tabkey = key;
      this.total = 0;
      this.pagenum = 1;
      this.pagesize = 10;
      this.restsearch();
    },
    //pagenum切换
    onPageChange(page, pageSize) {
      this.getVerifyList();
    },
    //pagesize切换
    onShowSizeChange(current, size) {
      (this.pagesize = size), (this.pagenum = 1);
      this.getVerifyList();
    },
    //获取待审核的服务列表
    getVerifyList() {
      let data = {
        appName: this.appname,
        needtotal: true,
        orders: [
          {
            orderby: "applicationtime",
            ordertype: "DESC"
          }
        ],
        pagenum: this.pagenum,
        pagesize: this.pagesize,
        service: this.servicename,
        servicetype: this.tabkey,
        userName: this.userName
      };
      verifyList(data)
        .then(res => {
          let result = res.result;
          this.pagenum = result.pagenum;
          this.pagesize = result.pagesize;
          this.total = result.total;
          this.data = result.rows;
        })
        .catch(err => {
          showError(err);
        });
    },
    //过滤下拉框筛选
    filterSelect(input, option) {
      return (
        option.componentOptions.children[0].text
          .toLowerCase()
          .indexOf(input.toLowerCase()) >= 0
      );
    },
    //获取服务名称下拉框
    getServiceNameSelect() {
      let data = "servicetype=" + this.tabkey + "&selecttype=0";
      listselects(data)
        .then(res => {
          this.servicenameselect = res.result;
          console.log(this.servicenameselect);
        })
        .catch(err => {
          showError(err);
        });
    },
    //获取应用名称下拉框
    getAppNameSelect() {
      let data = "servicetype=" + this.tabkey + "&selecttype=1";
      listselects(data)
        .then(res => {
          this.appnameselect = res.result;
        })
        .catch(err => {
          showError(err);
        });
    },
    //获取申请人下拉框
    getApplyUserSelect() {
      let data = "servicetype=" + this.tabkey + "&selecttype=2";
      listselects(data)
        .then(res => {
          this.applyuserselect = res.result;
        })
        .catch(err => {
          showError(err);
        });
    },
    //重置搜索
    restsearch() {
      this.servicename = undefined;
      this.appname = undefined;
      this.applyuser = undefined;
      this.getVerifyList();
      this.getServiceNameSelect();
      this.getAppNameSelect();
      this.getApplyUserSelect();
    },
    //点击处理
    dispose(item) {
      console.log(item);
      let data = {
        id: item.appid,
        name: item.appName
      };
      this.$store.commit("appInfo_change", data);
      console.log(item);
      this.$router.push({
        path: "/dev/manage/service/accessInfo",
        query: {
          code: item.serviceName,
          state: item.state,
          serviceId: item.serviceid,
          verifystate: this.tabkey,
          //   url: item.url
        }
      });
    }
  }
};
</script>
<style lang='less' scoped>
.open-layout {
  height: 100%;
  //   padding: 10px;
  .body {
    position: relative;

    width: 100%;
    height: 100%;
    min-height: 300px;
    margin: 0 auto;
    overflow-y: auto;
    .title {
      padding: 8px 24px 0 24px;
      background: #fff;
      /deep/ .ant-tabs-bar {
        margin-bottom: 0;
      }
    }
    .content {
      // margin: 10px 24px;
      width: 100%;
      //   height: calc(100% - 50px);
      height: e("calc(100% - 60px)");
      padding: 10px 24px;
      .contentdiv {
        height: 100%;
        background: #fff;
        padding: 10px 24px;
        .tools {
          display: flex;
          justify-content: flex-end;
          margin-top: 20px;
          margin-bottom: 15px;
          .tsearch {
            margin: 0 5px;
          }
          .tsearchselect {
            width: 200px;
          }
        }
        .ant-pagination {
          margin-top: 10px;
          text-align: right;
        }
      }
    }
  }
  // /deep/ .ant-table-wrapper {
  //   margin-top: 10px;
  //   line-height: 2.5;
  // }
  /deep/ .ant-table-tbody > tr > td {
    line-height: 2.5;
  }
}
</style>