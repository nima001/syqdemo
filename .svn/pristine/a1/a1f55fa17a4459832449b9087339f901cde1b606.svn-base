
<template>
  <div class="g6-wrapper">
    <div class="header">
      <div class="tabs">市人力资源和社会保障局</div>
    </div>
    <div class="mountNode-main">
      <div>
        <div class="mechanism-div">
          <div class="small-div"></div>
          <div class="small-p">变革沿革</div>
        </div>
      </div>
      <div id="mountNode"></div>
    </div>
    <div class="mountNode-reason">
      <div class="mechanism-div">
        <div class="small-div"></div>
        <div class="small-p">变更原因及依据</div>
      </div>
      <div class="reason-div">
        <p class="reason-p">
          变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因变更原因
        </p>
        <a-button>下载文件</a-button>
      </div>
    </div>
    <div class="mountNode-footer">
      <div class="mechanism-div">
        <div class="small-div"></div>
        <div class="small-p">基本情况</div>
      </div>
    </div>
  </div>
</template>
 
<script type='text/ecmascript-6'>
var g6Data = {
  nodes: [
    {
      id: "开始",
      tip: "这是开始",
    },
    {
      id: "填写商品信息",
      tip: "已经填写了商品信息",
    },
    {
      id: "资质审核初审",
      tip: "",
    },
    {
      id: "资质审核初审通过",
      tip: "",
    },
    {
      id: "资质审核初审打回",
      tip: "",
    },
    {
      id: "确认上市",
      tip: "",
    },
    {
      id: "上市",
      tip: "",
    },
    {
      id: "不上市",
      tip: "",
    },
    {
      id: "检验初审",
      tip: "",
    },
    {
      id: "检验初审通过",
      tip: "",
    },
    {
      id: "检验初审打回",
      tip: "",
    },
    {
      id: "检验初审打回2",
      tip: "",
    },
    {
      id: "检验初审打回3",
      tip: "",
    },
    {
      id: "检验初审打回4",
      tip: "",
    },
  ],
  edges: [
    {
      source: "开始",
      target: "填写商品信息",
    },
    {
      source: "填写商品信息",
      target: "资质审核初审",
    },
    {
      source: "资质审核初审",
      target: "资质审核初审通过",
    },
    {
      source: "资质审核初审",
      target: "资质审核初审打回",
    },
    {
      source: "资质审核初审通过",
      target: "确认上市",
    },
    {
      source: "确认上市",
      target: "上市",
    },
    {
      source: "确认上市",
      target: "不上市",
    },
    {
      source: "不上市",
      target: "检验初审",
    },
    {
      source: "检验初审",
      target: "检验初审通过",
    },
    {
      source: "检验初审",
      target: "检验初审打回",
    },
    {
      source: "检验初审通过",
      target: "检验初审打回2",
    },
    {
      source: "检验初审打回2",
      target: "检验初审打回3",
    },
    {
      source: "检验初审打回3",
      target: "检验初审打回4",
    },
  ],
};
import G6 from "@antv/g6";
import dagre from "dagre";
import { Button } from "ant-design-vue";
export default {
  components: {
    AButton: Button,
  },
  data() {
    return {};
  },
  mounted() {
    this.init();
  },
  methods: {
    init() {
      this.$nextTick(() => {
        // 得到流程图绘制对象
        var g = new dagre.graphlib.Graph();
        /**
         * g.setDefaultEdgeLabel不能省去，否则会报错
         * Error in nextTick: "TypeError: Cannot set property 'points' of undefined"
         */
        g.setDefaultEdgeLabel(function () {
          return {};
        });
        g.setGraph({
          rankdir: "LR", //控制方向top-bottom
        });
        //绘制节点
        g6Data.nodes.forEach((node) => {
          node.label = node.id;
          g.setNode(node.id, {
            width: 150,
            height: 40,
          });
        });
        //绘制连接
        g6Data.edges.forEach((edge) => {
          g.setEdge(edge.source, edge.target);
        });
        dagre.layout(g);
        var coord = 0;
        //g.nodes()返回图中节点的 id 数组
        g.nodes().forEach(function (node, i) {
          coord = g.node(node);
          g6Data.nodes[i].x = coord.x;
          g6Data.nodes[i].y = coord.y;
        });
        //g.edges()返回图中所有的边
        g.edges().forEach(function (edge, i) {
          coord = g.edge(edge);
          g6Data.edges[i].startPoint = coord.points[0];
          g6Data.edges[i].endPoint = coord.points[coord.points.length - 1];
          g6Data.edges[i].controlPoints = coord.points.slice(
            1,
            coord.points.length - 1
          );
        });
        G6.registerNode(
          "operation",
          {
            drawShape: function drawShape(cfg, group) {
              var rect = group.addShape("rect", {
                attrs: {
                  x: -75,
                  y: -20,
                  width: 150,
                  height: 40,
                  radius: 10,
                  //   stroke: "#000", //元素的边框颜色
                  fill: "#d60002", //元素的填充色
                  lineWidth: 1,
                },
              });
              return rect;
            },
          },
          "single-shape"
        );
        const timeBarData = [];
// for (let i = 0; i < 100; i++) {
//   timeBarData.push({
//     date: `2020${i}`,
//     value: Math.round(Math.random() * 300),
//   });
// }
        const timebar = new G6.TimeBar({
  width: 500,
  height: 150,
  padding: 10,
  type: 'trend',
  trend: {
    data: g6Data
  },
});
        const width = document.getElementById("mountNode").scrollWidth;
        const height = document.getElementById('container').scrollHeight || 500;
        var graph = new G6.Graph({
          container: "mountNode", //图的 DOM 容器，可以传入该 DOM 的 id 或者直接传入容器的 HTML 节点对象
          width,
          height,
          plugins: [timebar],
          pixelRatio: 1,
          // fitView: "tc",
          /**
           * 指当前图的事件模式，一个mode可能包含多个behavior。通过在图上切换mode，可以切换当前事件对应的行为。
           */
          modes: {
            default: [
              "drag-canvas", //拖拽画布
              {
                type: "activate-relations", //当鼠标移到某节点时，突出显示该节点以及与其直接关联的节点和连线。
                trigger: "mouseenter", //触发事件 可以是 mousenter : 鼠标移入时触发，也可以是 click ：鼠标点击时触发。
                activeState: "active", //活跃节点状态。当行为被触发，需要被突出显示的节点和边都会附带此状态，默认值为 active
              },
            ],
          },
          defaultNode: {
            type: "operation",
            labelCfg: {
              style: {
                fill: "white",
                fontSize: 14,
                // fontWeight: "bold"
              },
            },
          },
          defaultEdge: {
            type: "polyline",
          },
          edgeStyle: {
            default: {
              endArrow: true,
              lineWidth: 1,
              stroke: "#666",
            },
          },
        });

        graph.data(g6Data);
        graph.render();
        console.log("==>", graph);
        // graph.fitView();
      });
    },
  },
};
</script>
<style scoped lang="less">
.g6-wrapper {
  margin: 10px;
  display: flex;
  flex-direction: column;
  background: #ffffff;
  .header {
    padding: @layout-space-base @content-padding-h;
    height: 50px;
    border-bottom: 1px solid #ededed;
    align-items: center;
    display: flex;
    .tabs {
      font-size: 18px;
      font-weight: 800;
      color: #666666;
    }
  }
  .mechanism-div {
    padding: @layout-space-base @content-padding-h;
    display: flex;
    align-items: center;
    .small-div {
      width: 5px;
      height: 20px;
      background: @primary-color;
    }
    .small-p {
      font-size: 20px;
      margin-left: 5px;
    }
  }
  .mountNode-main {
    border-bottom: 1px solid #ededed;
    #mountNode {
      width: 100%;
    }
  }
  .mountNode-reason {
    border-bottom: 1px solid #ededed;
    .reason-div {
      padding: 0 @layout-space-base @layout-space-base @content-padding-h;
      .reason-p {
      }
    }
  }
  .mountNode-footer {
  }
}
</style>