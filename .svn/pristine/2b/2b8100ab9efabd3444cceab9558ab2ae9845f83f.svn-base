<template>
  <div class="layout">
    <Title title="人员结构" />
    <div class="container">
      <SwiperChart>
        <div slot="content">
          <div class="title" @click="ageShow('党政人员平均年龄','dz')">
            <div class="top">党政人员结构</div>
            <div class="bottom">
              <span>平均年龄</span>
              <span v-if="data.dzqpjnl">{{data.dzqpjnl.toFixed(2)}}</span>
              <span v-else>0</span>
            </div>
          </div>
          <div class="chart-detail">
            <div class="chart-content" v-for="(item, dataIndex) in dataXz">
              <RingChart
                :data="item.data"
                :settings="{
                  canvas: { width: 160, height: 135 },
                  padding: [0,0,0,0],
                  radius: 0.8,
                  innerRadius: 0.8,
                  tooltip: {
                    visible: true
                  },
                  color: ['#F2A54D','#60B4F5','#F84848','#DF6EA3','#6EDF75','#A66DF5','#C3F1CE','#A0A4F5'],
                  infoText: {
                    title: item.data.rows[0].k0,
                    offsetY: -10,
                    style: { fontSize: 15, fill: '#fff', textAlign: 'center' },
                  },
                  contentStyle: {
                    offsetY: 10,
                    fontSize: 13, fill: '#fff', textAlign: 'center'
                  }
                }"
              >
                <template v-slot:customLegend="props">
                  <div class="legend">
                    <ul v-if="item.data.rows">
                      <li v-for="(row, index) in item.data.rows" @click="showModal(row, 'a010101')">
                        <span :style="{background: props[index]}" class="spot"></span>
                        <span>{{row.k0}}</span>
                      </li>
                    </ul>
                  </div>
                </template>
              </RingChart>
            </div>
          </div>
          <RetirePlan :districtCode="districtCode" :type="'dz'"/>
        </div>
        <div slot="content">
          <div class="title" @click="ageShow('政法人员平均年龄','zf')">
            <div class="top">政法人员结构</div>
            <div class="bottom">
              <span>平均年龄</span>
              <span v-if="data.zfpjnl">{{data.zfpjnl.toFixed(2)}}</span>
              <span v-else>0</span>
            </div>
          </div>
          <div class="chart-detail">
            <div class="chart-content" v-for="(item, dataIndex) in dataZf">
              <RingChart
                :data="item.data"
                :settings="{
                  canvas: { width: 160, height: 135 },
                  padding: [0,0,0,0],
                  radius: 0.8,
                  innerRadius: 0.8,
                  tooltip: {
                    visible: true
                  },
                  color: ['#F2A54D','#60B4F5','#F84848','#DF6EA3','#6EDF75','#A66DF5','#C3F1CE','#A0A4F5'],
                  infoText: {
                    title: item.data.rows[0].k0,
                    offsetY: -10,
                    style: { fontSize: 15, fill: '#fff', textAlign: 'center' },
                  },
                  contentStyle: {
                    offsetY: 10,
                    fontSize: 13, fill: '#fff', textAlign: 'center'
                  }
                }"
              >
                <template v-slot:customLegend="props">
                  <div class="legend">
                    <ul v-if="item.data.rows">
                      <li v-for="(row, index) in item.data.rows" @click="showModal(row, 'a010105')">
                        <span :style="{background: props[index]}" class="spot"></span>
                        <span>{{row.k0}}</span>
                      </li>
                    </ul>
                  </div>
                </template>
              </RingChart>
            </div>
          </div>
          <RetirePlan :districtCode="districtCode" :type="'zf'"/>
        </div>
        <div slot="content">
          <div class="title" @click="ageShow('事业人员平均年龄','sy')">
            <div class="top">事业人员结构</div>
            <div class="bottom sy">
              <span>平均年龄</span>
              <span v-if="data.sypjnl">{{data.sypjnl.toFixed(2)}}</span>
              <span v-else>0</span>
            </div>
          </div>
          <div class="chart-detail">
            <div class="chart-content" v-for="(item, dataIndex) in dataSy">
              <RingChart
                :data="item.data"
                :settings="{
                  canvas: { width: 160, height: 135 },
                  padding: [0,0,0,0],
                  radius: 0.8,
                  innerRadius: 0.8,
                  tooltip: {
                    visible: true
                  },
                  color: ['#F2A54D','#60B4F5','#F84848','#DF6EA3','#6EDF75','#A66DF5','#C3F1CE','#A0A4F5'],
                  infoText: {
                    title: item.data.rows[0].k0,
                    offsetY: -10,
                    style: { fontSize: 15, fill: '#fff', textAlign: 'center' },
                  },
                  contentStyle: {
                    offsetY: 10,
                    fontSize: 13, fill: '#fff', textAlign: 'center'
                  }
                }"
              >
                <template v-slot:customLegend="props">
                  <div class="legend">
                    <ul v-if="item.data.rows">
                      <li v-for="(row, index) in item.data.rows" @click="showModal(row, 'a010103')">
                        <span :style="{background: props[index]}" class="spot"></span>
                        <span>{{row.k0}}</span>
                      </li>
                    </ul>
                  </div>
                </template>
              </RingChart>
            </div>
          </div>
          <RetirePlan :districtCode="districtCode" :type="'sy'"/>
        </div>
      </SwiperChart>
      <div class="warn">
        <div class="left">
          <img src="../../../assets/img/screen/icon-problem.png" />
          <span>预警问题数</span> 
        </div>
        <div class="right">
          <LcdFont :length="4" :realNumber="10" :realStyle="realStyle" :fakeStyle="fakeStyle"/>
        </div>
      </div>
    </div>
    
    <dialog-box v-model="showChart">
      <chartDetail :districtCode="districtCode"  :dataList="dataList" :title="title"/>
    </dialog-box>
    <dialog-box v-model="showAge" :title="title">
      <AgeDetail :districtCode="districtCode" :showAge.sync="showAge" :data="dataSource" :title="title" :type="type"/>
    </dialog-box>
  </div>
</template>

<script>
import Title from "./Title";
import SwiperChart from './SwiperChart'
import RingChart from "@person/components/chart/RingChart";
import chartDetail from './chartDetail';
import AgeDetail from './AgeDetail';
import LcdFont from './LcdFont';
import { keys, includes } from 'lodash';
import RetirePlan from './RetirePlan';
import DialogBox from "../components/DialogBox";
import { areaStatistics } from '@/person-shaoxing/api/orgStaffReport';
import { personAnalyzeXz, personAnalyzeSy, personChild, chartAggregate } from '../../../api/analyze';
import { showError } from '../../../../framework/utils';

export default {
  props: {
    districtCode: {
      type: String,
    },
  },
  components: {
    Title,
    RingChart,
    SwiperChart,
    chartDetail,
    AgeDetail,
    LcdFont,
    RetirePlan,
    DialogBox
  },
  data() {
    return {
      showChart: false,
      showAge: false,
      dataSource: undefined,
      data: {},
      dataXz: [],
      dataZf: [],
      dataSy: [],
      dataList: [],
      type: undefined,
      title: '',
      fakeStyle: {
        fontSize: '1.8em',
      },
      realStyle: {
        color: "#FF7C28",
        textStroke: "1 #ECA066",
        opacity: 0.95,
        fontSize: '1.8em',
      },
    };
  },
  watch: {
    districtCode(val) {
      this.getAge(val);
      this.loadData(val);
      return val;
    },
  },
  computed: {
    complietype() {
      let v = this.$store.getters.dict('usermanage.user.complietype');
      return v;
    }
  },
  mounted() {
    this.showAge = false;
    this.showChart = false;
    if(this.districtCode) {
      this.getAge(this.districtCode);
      this.loadData(this.districtCode);
    }
  },
  methods: {
    ageShow(title, type) {
      this.title = title;
      this.type = type;
      let array = [];
      if(type=='dz') {
        array = [
          'dzqtjjzzpjnl', 'dzqtjjfzpjnl',
          'dqzxcjzzpjnl', 'dqzxcjfzpjnl',
          'dqzxkjzzpjnl', 'dzqxkjfzpjnl',
          'dzqgjzzpjnl', 'dzqgjfzpjnl',
        ];
      }else if(type=='sy'){
        array = [
          'sybztjjzzpjnl', 'sybztjjfzpjnl',
          'sybzxcjzzpjnl', 'sybzxcjfzpjnl',
          'sybzxkjzzpjnl', 'sybzxkjfzpjnl',
          'sybzgjzzpjnl', 'sybzgjfzpjnl',
        ];
      }else if('zf') {
        array = [
          'zftjjzzpjnl', 'zftjjfzpjnl',
          'zfxcjzzpjnl', 'zfxcjfzpjnl',
          'zfxkjfzpjnl', 'zfxkjzzpjnl',
          'zfgjzzpjnl', 'zfgjfzpjnl',
        ];
      }
      areaStatistics(this.districtCode,array).then(({result}) => {
        this.dataSource = result;
        this.showAge = true;
      }).catch(error => {
        showError(error)
      });
    },
    loadData(val) {
      // personAnalyzeXz(val).then(({result})=>{
      //   this.dataXz = this.handerData(result);
      // }).catch(error=>{
      //   showError(error);
      // })
      // personAnalyzeSy(val).then(({result})=>{
      //   this.dataSy = this.handerData(result);
      // }).catch(error=>{
      //   showError(error);
      // });
      this.dataXz = [];
      this.dataZf = [];
      this.dataSy = [];
      chartAggregate(1097,{district: val, complietype: this.complietype[0].value}).then(({result})=>{
        this.dataXz.push(result);
        chartAggregate(1098,{district: val, complietype: this.complietype[0].value}).then(({result})=>{
          this.dataXz.push(result);
        }).catch(error=>{
          showError(error);
        })
      }).catch(error=>{
        showError(error);
      })
      chartAggregate(1097,{district: val, complietype: this.complietype[2].value}).then(({result})=>{
        this.dataZf.push(result);
        chartAggregate(1098,{district: val, complietype: this.complietype[2].value}).then(({result})=>{
          this.dataZf.push(result);
        }).catch(error=>{
          showError(error);
        })
      }).catch(error=>{
        showError(error);
      })
      chartAggregate(1097,{district: val, complietype: this.complietype[2].value}).then(({result})=>{
        this.dataSy.push(result);
        chartAggregate(1098,{district: val, complietype: this.complietype[2].value}).then(({result})=>{
          this.dataSy.push(result);
        }).catch(error=>{
          showError(error);
        })
      }).catch(error=>{
        showError(error);
      })
    },
    getAge(district){
      areaStatistics(district, [
        'dzqpjnl', 'zfpjnl','sypjnl'
      ]).then(({result}) => {
        this.data = result;
      }).catch(error => {
        showError(error)
      });
    },
    handerData(result) {
      let rows = [];
      let data = [];
      result.forEach((item, itemIndex)=>{
        item.keyCols.forEach(col=>{
          if(item.rows[0][col.key]) {
            rows.push({'k0': col.showname, 'v': item.rows[0][col.key], 'code': col.key})
          }
        })
        result[itemIndex].keyCols = [{
          "column": "k0",
          "showname": ""
        }];
        data.push({keyCols: result[itemIndex].keyCols, rows: rows, valueCols: [{ "column":"v", "showname":"" }] });
        rows = [];
      })
      return data;
    },
    showModal(item, complietype) {
      this.title = item.k0;
      this.dataList = [];
      let starAge, endAge, education = undefined;
      if(includes(item.k0,'岁及以上')) {
        starAge = (item.k0).split('岁及以上')[0];

      }else if(includes(item.k0,'-')) {
        let string = (item.k0).split('岁')[0];
        starAge = string.split('-')[0];
        endAge = string.split('-')[1];
      }else if(includes(item.k0,'岁及以下')) {
        endAge = (item.k0).split('岁及以下')[0];
      }else{
        education = item.k0;
      }
      if(education) {
        chartAggregate(1100,
          { 
            district: this.districtCode, 
            complietype: complietype, 
            education: education,
          }
          ).then(({result})=>{
          result.data.name = '年龄分布';
          this.dataList.push(result.data);
          this.showChart = true;
        }).catch(error=>{
          showError(error);
        })
        chartAggregate(1099,
          { 
            district: this.districtCode, 
            complietype: complietype, 
            education: education,
          }
          ).then(({result})=>{
          result.data.name = '职务层次分布';
          this.dataList.push(result.data);
          this.showChart = true;
        }).catch(error=>{
          showError(error);
        })
      }else if(starAge||endAge){
        chartAggregate(1101,
          { 
            district: this.districtCode, 
            complietype: complietype,
            starAge: starAge, 
            endAge: endAge
          }
          ).then(({result})=>{
          result.data.name = '学历分布';
          this.dataList.push(result.data);
          this.showChart = true;
        }).catch(error=>{
          showError(error);
        })
        chartAggregate(1102,
          { 
            district: this.districtCode, 
            complietype: complietype, 
            starAge: starAge, 
            endAge: endAge
          }
          ).then(({result})=>{
          result.data.name = '职务层次分布';
          this.dataList.push(result.data);
          this.showChart = true;
        }).catch(error=>{
          showError(error);
        })
      }
      
      // personChild(this.districtCode, item.code, type).then(({result}) => {
      //   this.dataList = result;
      //   this.showChart = true;
      // }).catch(error => {
      //   showError(error)
      // });
    }
  }
};
</script>

<style scoped lang="less">
@font-face {
  font-family: LESLIEB;
  src: url("../../../assets/img/screen/LESLIEB_.TTF") format("truetype");
}
.layout {
  display: flex;
  flex-direction: column;
}
.container {
  flex: 1;
  /deep/.ant-carousel {
    height: 637px;
    display: flex;
    justify-content: center;
    .slick-slider {
      width: 95%;
      padding: 0 @layout-space-base;
      .slick-track {
        background: fade(#000, 30%);
      }
      // .slick-slide {
      //   height: 705px;
      //   padding: @layout-space-base 0;
      //   background: fade(#000, 30%);
      // }
    }
  }
  .title {
    font-size: 1em;
    border-radius: 8px;
    display: flex;
    margin-top: @padding-xs;
    flex-direction: column;
    align-items: center;
    color: #fff;
    cursor: pointer;
    .bottom {
      width: 100%;
      color: #01E3FC;
      display: flex;
      align-items: center;
      justify-content: space-around;
      span:first-child {
        font-size: 1.2em;
        // font-weight: 500;
      }
      span:last-child {
        font-size: 1.5em;
        font-family: LESLIEB;
        // color: fade(#01e3fc, 95%);
      }
      &.sy span:last-child {
        // color: fade(#FF7C28, 95%);
      }
    }
  }
  .chart-detail {
    height: 270px;
    padding-top: @layout-space-base;
    // background: url('../../../assets/img/screen/icon-division.png') no-repeat;
    .chart-content {
      height: 50%;
      margin-bottom: @layout-space-base;
      display: flex;
      flex-direction: column;
      background: url("../../../assets/img/screen/legend-bg.png") no-repeat;
      background-position: 100% 50%;
      /deep/.ring-chart {
        height: 100%;
        & .chart {
          width: 50%;
        }
      }
      .legend {
        width: 48%;
        text-align: left;
        white-space: nowrap;
        position: absolute;
        top: 50%;
        right: 0;
        transform: translateY(-50%);
        color: fade(#fff, 60%);
        ul {
          width: 100%;
          display: flex;
          flex-wrap: wrap;
          margin: 0;
          margin-left: auto;
          li {
            width: 50%;
            display: flex;
            align-items: center;
            font-size: 0.8em;
            cursor: pointer;
            user-select: none;
            .spot {
              width: 10px;
              height: 10px;
              margin-right: @layout-space-base;
              border-radius: @border-radius-base;
              display: inline-block;
            }
            span:last-child {
              text-overflow: ellipsis;
              overflow: hidden;
            }
            &:hover {
              color: #fff;
            }
          }
        }
      }
    }
  }
  .warn {
    margin: @padding-md @padding-lg 0 @padding-lg;
    padding: 0 @padding-lg;
    color: #fff;
    border-radius: @border-radius-base;
    background: fade(#7AC3E4,20%);
    font-size: 1.1em;
    font-weight: bold;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
}
</style>
