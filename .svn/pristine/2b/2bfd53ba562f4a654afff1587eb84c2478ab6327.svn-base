
<template>
  <a-select
    show-search
    :value="value"
    placeholder="查找历史"
    style="width: 200px"
    :show-arrow="false"
    :filter-option="false"
    :not-found-content="null"
    :loading="dataLoading"
    @search="onSearch"
    @change="onChange"
    @focus="allSearch()"
    @popupScroll="handlePopupScroll"
    :options="data"
  >
  </a-select>

</template>
<script>
import { Icon, Select } from "ant-design-vue";
import { querylist } from "@/person/api/integratedquery";
import { showError } from "@framework/utils";

/**
 * 查询选择
 * 提供外部事件
 * 1.select 选中查询事件 返回查询ID
 */

export default {
  components: {
    AIcon: Icon,
    ASelect: Select,
    ASelectOption: Select.Option,
  },
  props: {
    namespace: {
      //搜索查询的命名空间
      type: String,
      required: true,
    },
  },
  data() {
    return {
      data: [],
      pagenum: 1,
      pagesize: 20,
      value: undefined,
      dataLoading: false,
      loadStatus: true,
      allData: []
    };
  },
  created() {
    console.log("select source", this.namespace);
  },

  methods: {
    fetch(value, callback, time) {
      let timeout;
      let currentValue;
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      currentValue = value;
      timeout = setTimeout(()=>{
        querylist({
          searchkey: value,
          pagenum: this.pagenum,
          pagesize: this.pagesize
        })
        .then((res) => {
            if (currentValue === value) {
              callback((res.result.rows || [])
                .map((item) => {
                  return {
                    value: item.id,
                    label: item.title,
                  };
                })
                );
               this.allData.push(res.result.rows)
              /* 
              if(result.length) {
                this.loadStatus = 'scroll';
                this.pagenum++;
                this.loadStatus = true;
              }else{
               this.loadStatus = false
              }
               */
            }
          })
          .catch((error) => {
            showError(error);
          });
      }, time);
    },
    onSearch(value) {
      this.fetch(value, (data) => (this.data = data), 500);
    },
    onChange(value) {
      this.value = value;
      this.fetch(value, (data) => (this.data = data));
    },
    allSearch(value) {
      this.fetch(value, (data) => (this.data = data), 0);
    },
    clearSearch() {
      this.data = [];
      this.value = "";
    },
    /* loadNext(){
      return this.query.next().then(list => {
        this.setCheckState(list);
        this.dataList = [...this.dataList, ...list];
        return list;
      })
    }, */
    handlePopupScroll(e,value) {
      if(e.target.scrollHeight - e.target.clientHeight - e.target.scrollTop <= 34){//剩余可滚动区域小于底部加载中高度
         /*  this.loadStatus = 'scroll';
          this.loadNext().then(list => {
            this.loadStatus = false;
          }).catch(err => {
            if(error != 'cancel'){
              this.loadStatus = false;
              showError(error)
            }
          }) */

           this.pagenum++;
           this.fetch(value, (data) => (this.data = data), 0)
        }
     /*  const { target } = e;
      const scrollHeight = target.scrollHeight - target.scrollTop;
      const clientHeight = target.clientHeight;
      if (scrollHeight === 0 && clientHeight === 0) {
        this.pagenum = 1;
      } else {
        if (scrollHeight < clientHeight + 5) {
          let pagenum = this.pagenum; //获取当前页
          let pagesize = this.pagesize * (pagenum + 1 || 1); //新增数据量
          //let newData = []; //存储新增数据
          //let max = ""; // max 为能展示的数据的最大条数
          if (this.allData.length > pagesize) {
            // 如果总数据的条数大于需要展示的数据
            max = pagesize;
          } else {
            // 否则
            max = this.allData.length;
          }
          this.allData.forEach((item, index) => {
            if (index < max) {
              //当data数组的下标小于max时
              newData.push(item);
            }
          });
          this.data = newData; //将新增的数据赋值到要显示的数组中
        }
      } */
    },
  },
};
</script>
<style lang="less" scoped>
.clear-search {
  color: @text-color-secondary;
  font-size: 12px;
  &:hover {
    color: @text-color;
  }
}
</style>